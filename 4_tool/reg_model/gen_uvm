#!/usr/bin/env python

"""
Register File Generator

Provide a register file specification in JSON format (e.g.: gpio_regs.json),
then this script can be used to create the hardware design in Verilog and
documentation in HTML formats.

 # gen_reg <JSON file>

"""

import sys
import json

def read_spec( spec ):
  """load register json"""
  try:
    with open(spec) as json_file:
      rf = json.load(json_file)
  except IOError:
    print 'Error: cannot open rfification file "'+spec+'"!'
    sys.exit(-1)
  json_file.close()
  return rf
# ---- read_spec( spec ) end ----

def check_spec( rf ):
  """check required keys in JSON and re-format name string"""
  for r in rf.get('registers'):
    if 'name' not in r:
      print 'ERROR: missing \'name\' in register'
      sys.exit(-1)
    if ('access' not in r) or ('addressOffset' not in r) or ('fields' not in r):
      print 'ERROR: '+r['name']+' missing \'access\', \'addressOffset\' or \'fields\'!'
      sys.exit(-1)
    r['name'] = r['name'].lower().replace(' ', '')
    for f in r['fields']:
      if 'name' not in f:
        print 'ERROR: missing \'name\' in field of register '+r['name']
        sys.exit(-1)
      if ('bitWidth' not in f) or ('bitOffset' not in f):
        print 'ERROR: '+r['name']+'.'+f['name']+' missing \'bitWidth\' or \'bitOffset\'!'
        sys.exit(-1)
      f['name'] = f['name'].lower().replace(' ', '')
# ---- check_spec( rf ) end ----

def gen_verilog( rf ):
  """Generate Verlog design"""
  # get global parameters
  name  = rf.get('name')
  base  = int(rf.get('baseAddress', '0'))
  reg   = rf.get('registers')
  has_ro=0

  # open output file
  try:
    rtl = open('c_reg_model.sv', 'w')
  except IOError:
    print 'Error: cannot creat RTL file c_reg_model.sv"!'
    sys.exit(-1)

  # generate module header
  print >> rtl, '/* c_reg_model.sv : generated by gen_reg_uvm */'

  print >> rtl, '`ifndef C_{0}_REG_MODEL__SV\n`define C_{1}_REG_MODEL__SV\n'.format(name.upper(),name.upper())
  # generate register ports
  starting = ''
  for r in reg:
    if r['access'] == 'READ_ONLY':
      io_str = 'input '
    else:
      io_str = 'output'
    print >> rtl,'class {0} extends uvm_reg;\n    `uvm_object_utils({1})'.format(r['name']+"_field_reg",r['name']+"_field_reg")
    for f in r['fields']:
        print >> rtl,'    rand uvm_reg_field {0};'.format(f['name']+"_field")              
    print >> rtl,'    virtual function void build();'
    for f in r['fields']:
        print >> rtl,'        {0} = uvm_reg_field::type_id::create("{1}");'.format(f['name']+"_field",f['name']+"_field")
    print >> rtl,'    endfunction : build'
    print >> rtl,'    function new(string name = "{0}");\n        super.new(.name(name),.n_bits({1}),.has_coverage(UVM_NO_COVERAGE));'.format(r['name']+"_field_reg",32)
    print >> rtl,'    endfunction : new'
    print >> rtl,'endclass : {0}\n'.format(r['name']+"_field_reg")

  print >> rtl,'class c_reg_model extends uvm_reg_block;\n    `uvm_object_utils(c_reg_model)'
  for r in reg:
    print >> rtl,'    rand {0}       {1};'.format(r['name']+"_field_reg",(r['name']+'_reg').rjust(25))

  print >> rtl,'\n    virtual function build();'
  print >> rtl,'        this.default_map = create_map("default_map",12\'h000,4,UVM_LITTLE_ENDIAN);'

  for r in reg:
    print >> rtl,'\n        {0} = {1}::type_id::create("{2}");'.format(r['name']+"_reg",r['name']+"_field_reg",r['name']+'_reg')
    print >> rtl,'        {0}.configure(this,null,"");'.format(r['name']+"_reg")
    print >> rtl,'        {0}.build();'.format(r['name']+"_reg")
    for f in r['fields']:
      print >> rtl,'        {0}.{1}.configure({2},{3},{4},"RW",1,0,1,1,1);'.format(r['name']+'_reg',f['name']+"_field",r['name']+"_reg",f['bitWidth'],f['bitOffset'])
      print >> rtl,'        {0}.add_hdl_path_slice("{1}",{2},{3});'.format(r['name']+'_reg',f['name']+"_field",f['bitOffset'],f['bitWidth'])
  for r in reg:
    print >> rtl,'        default_map.add_reg({0},\'h{1},"RW");'.format((r['name']+'_reg').ljust(20),hex(r['addressOffset']))
  print >> rtl,'    endfunction : build'
  print >> rtl,'    function new(string name = "c_reg_model");'
  print >> rtl,'        super.new(name,UVM_NO_COVERAGE);'
  print >> rtl,'    endfunction : new\n'
  print >> rtl,'endclass : c_reg_model'
  print >> rtl,'`endif'
  # Assign values according to bit position
##  for r in reg:
##    if r['access'] != 'WRITE_ONLY':
##        prev_idx = 0;
##        for f in r['fields']:
##          if f['bitOffset']>prev_idx:
##            print >> rtl, 'assign value_{0}[{1}:{2}] = {{{3}{{1\'b0}}}};'.format(
##                r['name'],f['bitOffset']-1,prev_idx,f['bitOffset']-prev_idx)
##          print >> rtl, 'assign value_{0}[{1}:{2}] = {4}{0}_{3};'.format(
##              r['name'],f['bitWidth']+f['bitOffset']-1,f['bitOffset'],f['name'],
##              '' if r['access']=='READ_ONLY' else 'value_')
##          prev_idx = f['bitWidth']+f['bitOffset']
##        if prev_idx<32:
##          print >> rtl, 'assign value_{0}[31:{1}] = {{{2}{{1\'b0}}}};'.format(
##                r['name'],prev_idx,32-prev_idx)
##
  print '>> SystemVerilog file '+name+'_regs.sv is generated.'

  rtl.close()
# ---- gen_verilog( rf ) end ----

def gen_html_head( html ):
  print >> html, '''
<!DOCTYPE html>
<html>
<head>
<title>Register Map</title>
<style>
table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
}
th, td {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}
</style>
</head>
<body>'''
# ---- gen_html_head( html ) end ----

def gen_html_body( html, rf, base ):
  # get global parameters
  name  = rf.get('name')
  desc  = rf.get('description')
  #base  = int(rf.get('baseAddress', '0'))
  reg   = rf.get('registers')

  print >> html, '<h1>'+name+' register map</h1>'
  print >> html, '<h2>base address: {0:#08x}</h2>'.format(base)
  print >> html, '<p>'+desc+'</p>'
  print >> html, '<table>'

  for r in reg:
    print >> html, '''
  <tr>
    <th>register</th>
    <th>offset</th>
    <th>access</th> 
    <th>function</th>
  </tr>
  <tr>
    <td>{0}</td>
    <td>{1:#05x}</td>
    <td>{2}</td>
    <td>{3}</td>
  </tr>'''.format(r.get('name'), r.get('addressOffset'), r.get('access'),
      r.get('description'))
    print >> html, '''
  <tr>
    <th>field</th>
    <th>bits</th>
    <th>default</th> 
    <th>function</th>
  </tr>'''
    for f in r['fields']:
      print >> html, '''
  <tr>
    <td>{0}</td>
    <td>{1}:{2}</td>
    <td>{3}</td>
    <td>{4}</td>
  </tr>'''.format(
      f.get('name'),
      int(f.get('bitOffset'))+int(f.get('bitWidth'))-1, f.get('bitOffset'),
      f.get('reset', 'N/A'),
      f.get('description'))

  print >> html, '</table>'
# ---- gen_html_body( html, rf, base ) end ----

def gen_html_tail( html ):
  print >> html, '''
</body>
</html>'''
# ---- gen_html_tail( html ) end ----

def gen_html( rf ):
  """Generate HTML document"""

  # open output file
  try:
    html = open(rf.get('name')+'_regs.html', 'w')
  except IOError:
    print 'Error: cannot creat HTML file "'+rf.get('name')+'_regs.hrml"!'
    sys.exit(-1)

  gen_html_head( html )
  gen_html_body( html , rf, 0 )
  gen_html_tail( html )

  html.close()

  print '>> HTML file '+rf.get('name')+'_regs.html is generated.'
# ---- gen_html( rf ) end ----

def gen_html_full( rfl ):
  """Generate HTML document"""

  # open output file
  try:
    html = open('engine_regs.html', 'w')
  except IOError:
    print 'Error: cannot creat HTML file "engine_regs.hrml"!'
    sys.exit(-1)

  base = 0
  gen_html_head( html )
  for rf in rfl:
    if rf.get('name') != 'nc':
      gen_html_body( html , rf, base )
    base = base + 4096
  gen_html_tail( html )

  html.close()

  print '>> HTML file engine_regs.html is generated.'
# ---- gen_html_full( rfl ) end ----

def gen_ral( rf ):
  """Generate Verlog design"""
  # get global parameters
  name  = rf.get('name')
  #base  = int(rf.get('baseAddress', '0'))
  reg   = rf.get('registers')

  # open output file
  try:
    ral = open(name+'_regs.ral', 'w')
  except IOError:
    print 'Error: cannot creat RAL file "'+name+'_regs.ral"!'
    sys.exit(-1)

  # generate block header
  print >> ral, 'block '+name+' {'
  print >> ral, '  bytes 4096;'

  for r in reg:
    print >> ral, '  register {0} ({1}.{0}) @\'h{2:03x} {{'.format(
            r.get('name'), name, r.get('addressOffset'))
    print >> ral, '    bytes 4096;'

    for f in r['fields']:
      print >> ral, '    field {0} ({1}.{0}) @{2} {{'.format(
              f.get('name'), r.get('name'), f.get('bitOffset'))
      if r.get('access') == 'READ_ONLY':
        access = 'ro'
      elif r.get('access') == 'WRITE_ONLY':
        access = 'wo'
      else:
        access = 'rw'
      print >> ral, '      access '+access+';'
      print >> ral, '      reset  {:#x};'.format(f.get('reset', 0))
      print >> ral, '      bits   {};'.format(f.get('bitWidth'))
      print >> ral, '    }'

    print >> ral, '  }'

  print >> ral, '}'
  ral.close()

  print '>> RAL file '+name+'_regs.ral is generated.'
# ---- gen_ral( rf ) end ----

# ---------- ---------- ---------- ----------
if __name__ == "__main__":

  if len(sys.argv) < 2:
    print 'usage: gen_reg <json_file> {<json_file>|nc}'
    sys.exit(-1)

  if len(sys.argv) == 2:
    rf = read_spec(sys.argv[1])
    check_spec(rf)
    gen_verilog(rf)
    gen_ral(rf)
    gen_html(rf)
  else:
    rfl = []
    for f in sys.argv[1:]:
      if f != 'nc':
        rf = read_spec(f)
        check_spec(rf)
      else:
        rf = {'name': 'nc'}
      rfl.append(rf)
    gen_html_full(rfl)


//=======================================================================
// COPYRIGHT (C) 2009-2017 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

// DESCRIPTION: These are symbolic constant definitions used by SVT VIP.

`ifndef GUARD_SVT_COMMON_DEFINES_SVI
`define GUARD_SVT_COMMON_DEFINES_SVI

`ifndef GUARD_SVT_LOADER_UTIL_SVI
`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_loader_util)
`endif

// Load the macros that define workarounds needed to run with IUS and QUESTA
`include `SVT_SOURCE_MAP_LIB_SRC_SVI(R-2020.12,svt_multi_sim_defines)

`protect
/** @cond PRIVATE */
`define SVT_REPLACEABLE_DEFINE(name,value) \
`ifndef name \
`define name value \
`endif
/** @endcond */
`endprotect

/**
 * This constant is used to control the absolute maximum for array element display.
 */
`SVT_REPLACEABLE_DEFINE(SVT_MAX_ARRAY_ELEM_DISPLAY_DEFAULT,1024)

//svt_vipdk_exclude
/**
 * Time out used by svt_cmd_assistant to avoid hang when waiting for
 * CMD_CALLBACKS_RESET notification.
 */
`SVT_REPLACEABLE_DEFINE(SVT_CMD_CALLBACKS_RESET_TIMEOUT,500)

`protect
/** @cond PRIVATE */
// If SVT_DISABLE_ALL_MSG is used to disable all messages, then set the SVT_DISABLE_MSG
// macro if not already set to disable UVM_INFO level messages.
`ifdef SVT_DISABLE_ALL_MSG
 `ifndef SVT_DISABLE_MSG
  `define SVT_DISABLE_MSG
 `endif
`endif
/** @endcond */
`endprotect

/**
 * svt_mem class can use this macro to insure the debug messages they produce are filtered
 * based on the 'SVT_MEM_ENABLE_INTERNAL_MESSAGING' define.
 */
`define svt_mem_debug(id, msg) \
`ifdef SVT_MEM_ENABLE_INTERNAL_MESSAGING \
  `svt_debug(id,msg) \
`else \
  do begin end while(0) \
`endif

/**
 * svt_mem class can use this macro to insure the verbose messages they produce are filtered
 * based on the 'SVT_MEM_ENABLE_INTERNAL_MESSAGING' define.
 */
`define svt_mem_verbose(id, msg) \
`ifdef SVT_MEM_ENABLE_INTERNAL_MESSAGING \
  `svt_verbose(id,msg) \
`else \
  do begin end while(0) \
`endif

//svt_vipdk_end_exclude
/**
 * Values (constants) representing levels of recursion.
 */
`define SVT_DEEP_RECURSION          0
`define SVT_SHALLOW_RECURSION       1
`define SVT_NULL_RECURSION          2

/**
 * Constants used with operations such as byte_pack, compare, etc.,
 * to select the completeness of the action. RELEVANT for protocol
 * specific fields, COMPLETE for all fields.
 */
`define SVT_RELEVANT     -1
`define SVT_COMPLETE     9
`define SVT_UNASSIGNED   10

/**
 * Defines the default window to be used when comparing two reals using the
 * fuzzy comparer. Note that setting this to a value less than or equal to
 * 1e-13 resulted in false failures on some simulators.
 */
`SVT_REPLACEABLE_DEFINE(SVT_DEFAULT_FUZZY_COMPARE_PRECISION,0.000001)

/**
 * Defines a limit for the number of elements allowed in the queues
 * internal to the svt_downstream_imp class.
 */
`SVT_REPLACEABLE_DEFINE(SVT_MAX_DOWNSTREAM_IMP_Q_SIZE,4)

/**
 * Default string used as the initial value in all instances to recognize
 * instances whose names have and have not been set.
 */
`define SVT_UNSET_INST_NAME "unset_inst"

/**
 * Macros defined to represent different timeunit values.
 */
`define SVT_TIMEUNIT_UNKNOWN 0
`define SVT_TIMEUNIT_1_FS    1
`define SVT_TIMEUNIT_10_FS   2
`define SVT_TIMEUNIT_100_FS  3
`define SVT_TIMEUNIT_1_PS    4
`define SVT_TIMEUNIT_10_PS   5
`define SVT_TIMEUNIT_100_PS  6
`define SVT_TIMEUNIT_1_NS    7
`define SVT_TIMEUNIT_10_NS   8
`define SVT_TIMEUNIT_100_NS  9
`define SVT_TIMEUNIT_1_US   10
`define SVT_TIMEUNIT_10_US  11
`define SVT_TIMEUNIT_100_US 12
`define SVT_TIMEUNIT_1_MS   13
`define SVT_TIMEUNIT_10_MS  14
`define SVT_TIMEUNIT_100_MS 15
`define SVT_TIMEUNIT_1_S    16
`define SVT_TIMEUNIT_10_S   17
`define SVT_TIMEUNIT_100_S  18

// ****************************************************************************
//   Error Check Constants
// ****************************************************************************

/**
 * Constants used to indicate the pass or fail effect for a check..
 */
`define SVT_IGNORE_EFFECT     0
`define SVT_VERBOSE_EFFECT    1
`define SVT_DEBUG_EFFECT      2
`define SVT_NOTE_EFFECT       3
`define SVT_WARNING_EFFECT    4
`define SVT_ERROR_EFFECT      5
`define SVT_EXPECTED_EFFECT   6
`define SVT_DEFAULT_EFFECT    7

/**
 * DEPRECATED:
 * The original error check constants, stated in terms of fail, but used for both pass and fail.
 */
`define SVT_IGNORE_FAIL_EFFECT     `SVT_IGNORE_EFFECT
`define SVT_VERBOSE_FAIL_EFFECT    `SVT_VERBOSE_EFFECT
`define SVT_DEBUG_FAIL_EFFECT      `SVT_DEBUG_EFFECT
`define SVT_NOTE_FAIL_EFFECT       `SVT_NOTE_EFFECT
`define SVT_WARNING_FAIL_EFFECT    `SVT_WARNING_EFFECT
`define SVT_ERROR_FAIL_EFFECT      `SVT_ERROR_EFFECT
`define SVT_EXPECTED_FAIL_EFFECT   `SVT_EXPECTED_EFFECT
`define SVT_DEFAULT_FAIL_EFFECT    `SVT_DEFAULT_EFFECT

// ****************************************************************************
//   XML and FSDB Output Constants
// ****************************************************************************

/**
 * Writer type constants used for controlling the writer format
 */
`define SVT_WRITER_FORMAT_FSDB               0
`define SVT_WRITER_FORMAT_XML                1
`define SVT_WRITER_FORMAT_XML_N_FSDB         2
`define SVT_WRITER_FORMAT_FSDB_PERF_ANALYSIS 3

// ****************************************************************************
//   Memory Macros
// ****************************************************************************

`ifdef SVT_MEM_INCLUDE_USER_DEFINES
`include "svt_mem_user_defines.inc"
`endif 

`ifndef SVT_MEM_MAX_ADDR_WIDTH
 `define SVT_MEM_MAX_ADDR_WIDTH 64 
`endif

`ifndef SVT_MEM_MAX_DATA_WIDTH
 `define SVT_MEM_MAX_DATA_WIDTH 1024
`endif

`ifndef SVT_MEM_MAX_ATTR_WIDTH
 `define SVT_MEM_MAX_ATTR_WIDTH 8 
`endif

// For backwards compatibility.
`define SVT_MEM_MAX_ADDR_WDTH `SVT_MEM_MAX_ADDR_WIDTH
`define SVT_MEM_MAX_DATA_WDTH `SVT_MEM_MAX_DATA_WIDTH

`ifndef SVT_MEM_MAX_ADDR_REGION_WIDTH
 `define SVT_MEM_MAX_ADDR_REGION_WIDTH   16 
`endif

`define SVT_MEM_INIT_UNKNOWNS            0
`define SVT_MEM_INIT_ZEROES              1
`define SVT_MEM_INIT_ONES                2
`define SVT_MEM_INIT_ADDRESS             3
`define SVT_MEM_INIT_VALUE               4
`define SVT_MEM_INIT_INCR                5
`define SVT_MEM_INIT_DECR                6
`define SVT_MEM_INIT_USER_PATTERN        7

/**
 * Mask values for to the currently defined system memory manager operations.
 */
`define SVT_MEM_PEEK_OP_MASK           'h1
`define SVT_MEM_POKE_OP_MASK           'h2
`define SVT_MEM_LOAD_OP_MASK           'h4
`define SVT_MEM_DUMP_OP_MASK           'h8
`define SVT_MEM_FREE_OP_MASK           'h10
`define SVT_MEM_INITIALIZE_OP_MASK     'h20
`define SVT_MEM_COMPARE_OP_MASK        'h40
`define SVT_MEM_ATTRIBUTE_OP_MASK      'h80

/** Constants for the initialize options supported by backdoor classes */
`define SVT_MEM_INITIALIZE_CONST      0
`define SVT_MEM_INITIALIZE_INCR       1
`define SVT_MEM_INITIALIZE_DECR       2
`define SVT_MEM_INITIALIZE_WALK_LEFT  3
`define SVT_MEM_INITIALIZE_WALK_RIGHT 4
`define SVT_MEM_INITIALIZE_RAND       5

/** Constants for the compare options supported by backdoor classes */
`define SVT_MEM_COMPARE_SUBSET        0
`define SVT_MEM_COMPARE_STRICT        1
`define SVT_MEM_COMPARE_SUPERSET      2
`define SVT_MEM_COMPARE_INTERSECT     3

/**
 * Dump ALL locations in the address range. When not set only the written (i.e., via the bus, a poke,
 * or a load) values will be included in the dump output.
 */
`define  SVT_MEM_DUMP_ALL              'h1

/** Exclude the dump file text header. Note that with MIF this will exclude WIDTH and other settings. */
`define  SVT_MEM_DUMP_NO_HEADER        'h2

/** Exclude the BEGIN from the file output. Used with append when BEGIN not required. */
`define  SVT_MEM_DUMP_NO_BEGIN      'h4

/** Exclude the END from the file output. Used with append when END not required. */
`define  SVT_MEM_DUMP_NO_END        'h8

/** Append the contents to the existing file if found. For internal use only. */
`define  SVT_MEM_DUMP_APPEND           'h10

/** Write protect the memory locations in the load file */
`define  SVT_MEM_LOAD_PROTECT          'h1

//----------------------------------------------------------------------
// ATTRIBUTE BIT VALUES
//----------------------------------------------------------------------
`define SVT_MEM_ATTRIBUTE_UNINIT   'h0
`define SVT_MEM_ATTRIBUTE_LAST_WR  'h1
`define SVT_MEM_ATTRIBUTE_INIT     'h2
`define SVT_MEM_ATTRIBUTE_LAST_RD  'h3
`define SVT_MEM_ATTRIBUTE_WR_PROT  'h4
`define SVT_MEM_ATTRIBUTE_ACC_LOCK 'h8

/** Indicates that the attribute operation should 'OR' values. */ 
`define SVT_MEM_ATTRIBUTE_OR         1

// ****************************************************************************
//  Debug Opts Macros
// ****************************************************************************
`define SVT_DEBUG_OPTS_FSDB_FILE_NAME "svt_model_log.fsdb"

// ****************************************************************************
//  Definitions for Common Symbolic Values Used by the GPIO utility
// ****************************************************************************
`define SVT_GPIO_CMD_READ      1
`define SVT_GPIO_CMD_WRITE     2
`define SVT_GPIO_CMD_PULSE     3
`define SVT_GPIO_CMD_INTERRUPT 4

// ************************************************
// FIFO RATE CONTROL definitions
// ************************************************
`define SVT_FIFO_EMPTY_ON_START 0
`define SVT_FIFO_FULL_ON_START 1

`define SVT_FIFO_WRITE 0
`define SVT_FIFO_READ 1

`ifndef SVT_FIFO_MAX_RATE
`define SVT_FIFO_MAX_RATE 256
`endif

`ifndef SVT_FIFO_MAX_FULL_LEVEL
`define SVT_FIFO_MAX_FULL_LEVEL 256
`endif

// ************************************************
// TRAFFIC PROFILE definitions
// ************************************************
`ifndef SVT_TRAFFIC_MAX_TOTAL_NUM_BYTES
`define SVT_TRAFFIC_MAX_TOTAL_NUM_BYTES 4096
`endif

`ifndef SVT_TRAFFIC_MAX_XACT_SIZE
`define SVT_TRAFFIC_MAX_XACT_SIZE 64
`endif

`define SVT_TRAFFIC_PROFILE_FIXED 0
`define SVT_TRAFFIC_PROFILE_RANDOM 1
`define SVT_TRAFFIC_PROFILE_CYCLE 2
`define SVT_TRAFFIC_PROFILE_UNIQUE 3

`define SVT_TRAFFIC_PROFILE_SEQUENTIAL 0
`define SVT_TRAFFIC_PROFILE_TWODIM 1
`define SVT_TRAFFIC_PROFILE_RANDOM_ADDR 2

`define SVT_TRAFFIC_PROFILE_END_OF_PROFILE 0
`define SVT_TRAFFIC_PROFILE_END_OF_FRAME_TIME 1
`define SVT_TRAFFIC_PROFILE_END_OF_FRAME_SIZE 2

`define SVT_TRAFFIC_MAX_FRAME_TIME 4096
`define SVT_TRAFFIC_MAX_FRAME_SIZE 4096

`define SVT_TRAFFIC_PROFILE_INPUT_EVENT 0
`define SVT_TRAFFIC_PROFILE_OUTPUT_EVENT 1

`define SVT_TRAFFIC_PROFILE_MAX_ARBITER_THREADS 512

`define SVT_FIFO_ADD_TO_ACTIVE 0
`define SVT_FIFO_REMOVE_FROM_ACTIVE 1

`define SVT_MAX_DELAY real'('hFFFF_FFFF)

// ************************************************
// Types of REGPACK'S
// ************************************************
`define SVT_NO_REGPACK 0
`define SVT_REGPACK_ALPHA 1

`endif // GUARD_SVT_COMMON_DEFINES_SVI

//=======================================================================
// COPYRIGHT (C) 2007-2017 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

`ifndef GUARD_SVT_TRANSACTION_SV
`define GUARD_SVT_TRANSACTION_SV

`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_cmd_defines)

`include `SVT_SOURCE_MAP_LIB_SRC_SVI(R-2020.12,svt_data_util)

`ifdef SVT_VMM_TECHNOLOGY
typedef class svt_notify;
`else
typedef class svt_non_abstract_report_object;
`endif

// The `SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING macro put in place to make
// documentation more re-usable.  It has no functional behavior.

`ifdef SVT_UVM_TECHNOLOGY
 // If using UVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 `define SVT_TRANSACTION_STARTED_NOTIFY uvm_transaction::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY uvm_transaction::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING UVM_DISABLE_AUTO_ITEM_RECORDING
 `define SVT_TRANSACTION_OBJECT_TYPE uvm_object
`elsif SVT_OVM_TECHNOLOGY
 // If using OVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 // NOTE: We add begin_event/end_event in OVM
 `define SVT_TRANSACTION_STARTED_NOTIFY svt_sequence_item::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY svt_sequence_item::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING svt_disable_auto_item_record
 `define SVT_TRANSACTION_OBJECT_TYPE ovm_object
`else
 // If using VMM technology then extend svt_data
 `define SVT_TRANSACTION_BASE_TYPE svt_data
 `define SVT_TRANSACTION_TYPE svt_transaction
 `define SVT_TRANSACTION_STARTED_NOTIFY vmm_data::STARTED
 `define SVT_TRANSACTION_ENDED_NOTIFY vmm_data::ENDED
 `define SVT_TRANSACTION_START_TIME start_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING <undefined>
 `define SVT_TRANSACTION_OBJECT_TYPE
`endif

//svt_vipdk_exclude
//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
2o139uOaDkEuXEsktp7tm+nmYjbw0OEG4vhFxPNoLI0JRnLPu1Hq/mdbriz8frHO
8NtN33jl/82lFelF/ju8dIpu6URxv0FINQizGHbQRciKnDECdDs3vOXSu6RqFmdw
87bcQYvw+Q6yLc+0t7FddeVoDTDlpnshR993uUNyUW0NZsYpqNV31Q==
//pragma protect end_key_block
//pragma protect digest_block
IE0C+uGGEHPJMmmZSZv+/3Zgkr4=
//pragma protect end_digest_block
//pragma protect data_block
7ebDKIu38FUx/YiHOBfXQtzXW8xHr6u8BmDmuaOvs0kDHB06Vg0MPrXCDmxhlzXY
HdEkIRTxes0+RqVvOrjB4mjqr+HspTnJ1gkoIfABh8KQcrk37B6Ete/XRFfq2vB7
XhdjAgKDxeaXTBjsQZIMhuqvpW8VC/OqYnhAQfHsrkjTYAMG3kkoW4odiORxn1Bt
HvYC+NHrmk6m2R8p+xnc4TzU7m8+bXrrl3atvTnPlATbQO7coJ7XJZqbuRBaU9J1
kRGFB6t33a+Y7RpIwuKjTnkYlpsBtGZh2f489fCnE7Z/nn99rU49gOavGzpD7stb
ynmQL7ejBAOBQr+Wkb6UC+qUoJ9sKKl+zE1EphULLtHkVhLRSeTGYvO4UOZ55Prx
8gU2LAoNIK4IFT7iStjm4WinIVjTlXk6O7R5AQV0vIfnCMKjmyEPBMiFosppRDvA
7FwtWAhJBvpyuzS47RaRO7JNFp6T8UBtBmSI8lesQEoUcvq7qFaVbahk0nYDXLJ+
I0HyQsORWBRjIvJ3hXksByGsmB3884eMqIrdXFM59bEYDGV5182CHigKGQViOxEF
1pjmWrRP17t5N5DlHxUkUDHSuD36KA7Ge6XLnqYeu53zUh8qUblDdMbwgVEUxBcn
afdcCn8x5xJkIrgds9LYtDjx5JTG6VLX8MA2V1gN3iE=
//pragma protect end_data_block
//pragma protect digest_block
bXAuIWngTRNNYpvqYfJGJ2IeWo8=
//pragma protect end_digest_block
//pragma protect end_protected

`ifdef SVT_VMM_TECHNOLOGY
/**
 * This macro can be used to create a simple "one channel" multi-stream
 * scenario class which implements its scenario via a contained
 * atomic scenario class.
 */
`define SVT_TRANSACTION_MS_SCENARIO(class_name) \
class class_name``_ms_scenario extends svt_dynamic_ms_scenario; \
 \
  /** Properly typed scenario implementing the details of the scenario. */ \
  rand class_name``_scenario contained_scen; \
 \
  /** Name for the channel associated with this multi-stream scenario. */ \
  string chan_name = ""; \
 \
  /** Indicates whether this scenario should wait for the completion of the transactions generated by the scenario. */ \
  bit throttle = 0; \
 \
  /** Controls how many times the scenario is used. -1 indicates no limit, non-negative values define hard limits. */ \
  int execute_limit = -1; \
 \
  /** Used in conjunction with execute_limit, tracking how many times the scenario has been executed. */ \
  int execute_cnt = 0; \
 \
  /** Setup delay applied prior to initiating the transactions in the scenario. */ \
  real setup = 0.0; \
 \
  /** Minimum setup delay value used to define one end of the range for setup delays. */ \
  real setup_min = 0.0; \
 \
  /** Maximum setup delay value used to define one end of the range for setup delays. */ \
  real setup_max = 0.0; \
 \
  /** Temporary used during randomization to allow the setup delay to be randomized */ \
  rand longint unsigned setup_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_max_longint; \
 \
  /** Hold delay, in simulation time units, applied after initiating the transactions in the scenario and waiting for their completion (i.e., if #throttle set to 1). */ \
  real hold = 0.0; \
 \
  /** Minimum hold delay value used to define one end of the range for hold delays. */ \
  real hold_min = 0.0; \
 \
  /** Maximum hold delay value used to define one end of the range for hold delays. */ \
  real hold_max = 0.0; \
 \
  /** Temporary used during randomization to allow the hold delay to be randomized */ \
  rand longint unsigned hold_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_max_longint; \
 \
  /** VMM ID associated with this scenario. */ \
  int  SCENARIO_ID; \
 \
  /** Defines the weight to be applied to the delays which make up the lower sidewall of the overall delay range. */ \
  int LOWER_DELAY_wt = 1000; \
 \
  /** Defines the weight to be applied to the delays in the middle of the delay range, between the lower and upper sidewalls. */ \
  int MIDDLE_DELAY_wt = 1; \
 \
  /** Defines the weight to be applied to the delays which make up the upper sidewall of the overall delay range. */ \
  int UPPER_DELAY_wt = 100; \
 \
  /** Defines what percentage of the overall delay range which should be set aside for each of the two sidewalls, lower and upper. */ \
  int SIDEWALL_PERCENT = 10; \
 \
  constraint reasonable_scen_length { \
    this.contained_scen.length > 0; \
  } \
 \
  constraint reasonable_setup \
  { \
    this.setup_longint dist { \
      `SVT_BATHTUB_DIST(this.setup_min_longint,this.setup_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
  constraint reasonable_hold \
  { \
    this.hold_longint dist { \
      `SVT_BATHTUB_DIST(this.hold_min_longint,this.hold_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
`ifdef SVT_PRE_VMM_11 \
  function new(string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(); \
`else \
  function new(`VMM_SCENARIO parent = null, string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(parent); \
`endif \
    begin \
      string scen_tag = (contained_scen == null) ? "CONTAINED_ATOMIC_SCENARIO" : "CONTAINED_SCENARIO"; \
      if (contained_scen == null) begin \
        /* Create an atomic scenario as the default scenario */ \
        class_name``_atomic_scenario atomic_scen = new(); \
        this.contained_scen = atomic_scen; \
      end else begin \
        this.contained_scen = contained_scen; \
      end \
      if (factory != null) begin \
        this.contained_scen.using = factory; \
      end \
      this.chan_name = chan_name; \
      this.throttle = throttle; \
      SCENARIO_ID = this.define_scenario(scen_tag,1); \
      this.scenario_kind = SCENARIO_ID; \
      this.length = 1; \
      this.repeated = 0; \
      this.log.is_above(this.contained_scen.log); \
    end \
  endfunction \
 \
  local virtual function string this_class_name(); \
    begin \
      return {`SVT_DATA_UTIL_ARG_TO_STRING(class_name), "_ms_scenario"}; \
    end \
  endfunction \
 \
  virtual task execute(ref int n); \
    begin \
      class_name``_channel out_chan; \
      int unsigned n_inst; \
      bit ready_to_apply = 0; \
      bit applied = 0; \
      if (this.execute_limit_exceeded()) begin \
        `svt_verbose("execute", $sformatf("The current execute_cnt (%0d) exceeds the execute_limit (%0d). Nothing to execute.", \
                                    this.execute_cnt, this.execute_limit)); \
        n = 0; \
      end else if (!$cast(out_chan, get_channel(this.chan_name))) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) could not be found or is not of type %0s_channel. Unable to continue.", \
                                  this.chan_name, `SVT_DATA_UTIL_ARG_TO_STRING(class_name))); \
        n = 0; \
      end else if (out_chan == null) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) is null. Unable to continue.", this.chan_name)); \
        n = 0; \
      end else begin \
        `svt_verbose("execute", $sformatf("Generated scenario (%0d, %0d) directed at channel %0s", this.stream_id, this.scenario_id, this.chan_name)); \
        if (this.setup > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0f", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0t(%0f)", this.setup, this.setup)); \
`endif \
          #this.setup; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0f is complete", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0t(%0f) is complete", this.setup, this.setup)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Setup is %0f, so not delaying execution.", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Setup is %0t(%0f), so not delaying execution.", this.setup, this.setup)); \
`endif \
        end \
        fork \
          begin \
            `svt_verbose("execute", $sformatf("About to apply %0d xacts to out_chan %0s for scenario (%0d, %0d).", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            while (!ready_to_apply) begin \
              @ ready_to_apply; \
            end \
            this.contained_scen.apply(out_chan, n_inst); \
            `svt_verbose("execute", $sformatf("Applied %0d xacts to out_chan %0s for scenario (%0d, %0d)", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            applied = 1; \
          end \
          begin \
            if (this.throttle) begin \
              bit orig_tee_mode = out_chan.tee_mode(1); \
              class_name last; \
              fork begin /* disable fork block */ \
              fork \
                begin \
                  while (!applied) begin \
                    class_name next; \
                    ready_to_apply = 1; \
                    `svt_verbose("execute", $sformatf("tee'ing next transaction out of out_chan %0s", this.chan_name)); \
                    out_chan.tee(next); \
                    /* Make sure we see something before attempting to set 'last' */ \
                    last = next; \
                    `svt_verbose("execute", $sformatf("tee'ed transaction from out_chan %0s", this.chan_name)); \
                  end \
                end \
                begin \
                  `svt_verbose("execute", $sformatf("waiting for applied on out_chan %0s", this.chan_name)); \
                  @ applied; \
                  `svt_verbose("execute", $sformatf("waited for applied on out_chan %0s", this.chan_name)); \
                end \
              join_any \
              disable fork; \
              end join_any /* disable fork block */ \
              void'(out_chan.tee_mode(orig_tee_mode)); \
              if ((last != null) && (!last.notify.is_on(vmm_data::ENDED))) begin \
                `svt_verbose("execute", $sformatf("waiting for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
                last.notify.wait_for(vmm_data::ENDED); \
                `svt_verbose("execute", $sformatf("waited for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
              end \
              `svt_verbose("execute", $sformatf("throttle of out_chan %0s is complete", this.chan_name)); \
            end else begin \
              ready_to_apply = 1; \
              `svt_verbose("execute", $sformatf("scenario for out_chan %0s setup with throttle = 0", this.chan_name)); \
            end \
          end \
        join \
        `svt_verbose("execute", $sformatf("Applied %0d instances to out_chan %0s", n_inst, this.chan_name)); \
        if (this.hold > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0f", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0t(%0f)", this.hold, this.hold)); \
`endif \
          #this.hold; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0f is complete", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0t(%0f) is complete", this.hold, this.hold)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Hold is %0f, so not delaying completion.", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Hold is %0t(%0f), so not delaying completion.", this.hold, this.hold)); \
`endif \
        end \
        n += n_inst; \
        this.execute_cnt++; \
      end \
    end \
  endtask \
 \
  virtual function string psdisplay(string prefix = ""); \
    begin \
      psdisplay = { super.psdisplay(prefix), "\n" }; \
      psdisplay = { psdisplay, prefix, "chan_name = ", this.chan_name, "\n" }; \
      psdisplay = { psdisplay, prefix, $sformatf("throttle = %0b\n", throttle) }; \
      psdisplay = { psdisplay, this.contained_scen.psdisplay(prefix) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SCENARIO_ID = %0d\n", SCENARIO_ID) }; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0f\n", this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0f\n", this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0f\n", this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0f\n", this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0f\n", this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0f\n", this.hold_max) }; \
`else \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0t(%0f)\n", this.setup, this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0t(%0f)\n", this.setup_min, this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0t(%0f)\n", this.setup_max, this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0t(%0f)\n", this.hold, this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0t(%0f)\n", this.hold_min, this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0t(%0f)\n", this.hold_max, this.hold_max) }; \
`endif \
      psdisplay = { psdisplay, prefix, $sformatf("LOWER_DELAY_wt = %0d\n", LOWER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("MIDDLE_DELAY_wt = %0d\n", MIDDLE_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("UPPER_DELAY_wt = %0d\n", UPPER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SIDEWALL_PERCENT = %0d\n", SIDEWALL_PERCENT) }; \
    end \
  endfunction \
 \
  virtual function vmm_data copy(vmm_data to = null); \
    begin \
      class_name``_ms_scenario cpy = null; \
 \
      if (to == null) begin \
        cpy = new(); \
      end else if (!$cast(cpy, to)) begin \
        `svt_fatal("copy", $sformatf("Cannot copy to instance that is not of type %0s", this_class_name())); \
      end \
 \
      if (cpy != null) begin \
        void'(super.copy(cpy)); \
        if (!$cast(cpy.contained_scen,this.contained_scen.copy())) begin \
          `svt_fatal("copy", $sformatf("%0s failed attempting to copy contained scenario", this_class_name())); \
        end \
        cpy.chan_name = this.chan_name; \
        cpy.throttle = this.throttle; \
      end \
 \
      return cpy; \
    end \
  endfunction \
 \
  virtual function bit adjust_weights_per_cfg(); \
    adjust_weights_per_cfg = !execute_limit_exceeded(); \
  endfunction \
 \
  function void pre_randomize(); \
    begin \
      this.setup_longint = this.setup; \
      this.setup_min_longint = this.setup_min; \
      this.setup_max_longint = this.setup_max; \
 \
      this.hold_longint = this.hold; \
      this.hold_min_longint = this.hold_min; \
      this.hold_max_longint = this.hold_max; \
 \
      void'(adjust_weights_per_cfg()); \
 \
      /* Make sure the contained scenario info matches the scenario info */ \
      this.contained_scen.stream_id = this.stream_id; \
      this.contained_scen.scenario_id = this.scenario_id; \
      foreach (this.contained_scen.items[i]) begin \
        this.contained_scen.items[i].stream_id   = this.contained_scen.stream_id; \
        this.contained_scen.items[i].scenario_id = this.contained_scen.scenario_id; \
        this.contained_scen.items[i].data_id     = i; \
      end \
      super.pre_randomize(); \
    end \
  endfunction \
 \
  function void post_randomize(); \
    begin \
      super.post_randomize(); \
 \
      this.setup = this.setup_longint; \
      this.hold = this.hold_longint; \
    end \
  endfunction \
 \
  function bit execute_limit_exceeded(); \
    begin \
      execute_limit_exceeded = (execute_limit >= 0) && (execute_cnt >= execute_limit); \
    end \
  endfunction \
 \
endclass: class_name``_ms_scenario

`endif // ifdef SVT_VMM_TECHNOLOGY

//svt_vipdk_end_exclude
/** Add some customized logic to copy implementation and trace queues */
`define SVT_TRANSACTION_SHORTHAND_CUST_COPY \
`ifdef SVT_VMM_TECHNOLOGY \
  if (do_what == DO_COPY) begin \
    svt_transaction_copy_hook(this.__vmm_rhs); \
  end \
`endif

/** Container which automates exception generation for a transaction. */
`define SVT_TRANSACTION_EXCEPTION_LIST_INITIATOR(classname) \
/** Exception list initiator for classname transaction */ \
class classname``_exception_list_initiator extends classname; \
  rand classname``_exception_list rand_exception_list; \
 \
`ifndef SVT_VMM_TECHNOLOGY \
  /** Constructor */ \
  function new(string name=""); \
    super.new(name); \
  endfunction \
 \
  `svt_data_member_begin(classname``_exception_list_initiator) \
  `svt_data_member_end(classname``_exception_list_initiator) \
`endif \
 \
  /** pre_randomize method which can be insures rand_exception_list is non-null. */ \
  function void pre_randomize(); \
    super.pre_randomize(); \
    if (this.rand_exception_list == null) this.rand_exception_list = new(); \
    this.rand_exception_list.setup_randomized_exception(this.cfg, this); \
`ifdef SVT_MULTI_SIM_SKIPPED_PRE_RANDOMIZE \
    this.rand_exception_list.populate_exceptions(); \
`endif \
  endfunction \
 \
  /** pre_randomize method which removes the exception list if it is empty. */ \
  function void post_randomize(); \
    super.post_randomize(); \
    if ((this.rand_exception_list != null) && (this.rand_exception_list.num_exceptions > 0)) begin \
      this.exception_list = this.rand_exception_list; \
    end else begin \
      /* Clearing this.rand_exception_list can result in warning in some simulators, so leave it. */ \
      /* this.rand_exception_list = null; */ \
      this.exception_list = null; \
    end \
  endfunction \
 \
endclass

// =============================================================================
/**
 * Base class for all SVT model transaction data descriptor objects. As functionality
 * commonly needed for transactions for SVT models is defined, it will be implemented
 * (or at least prototyped) in this class.
 */
class `SVT_TRANSACTION_TYPE extends `SVT_DATA_TYPE;

  // ****************************************************************************
  // Enumerated Types
  // ****************************************************************************

//svt_vipdk_exclude
`ifndef SVT_VMM_TECHNOLOGY
  /**
   * Enum used to provide compatibility layer for supporting vmm_data notify types in UVM.
   * SHOULD ONLY BE USED IN SUITES IMPLEMENTED TO UTILIZE UVM/VMM BRIDGE TECHNOLOGIES.
   */
  typedef enum int {EXECUTE = 999_999,
                    STARTED = 999_998,
                    ENDED = 999_997
                    } notifications_e;
`endif

//svt_vipdk_end_exclude
`ifdef SVT_OVM_TECHNOLOGY
   ovm_event begin_event;
   ovm_event end_event;
`endif

  /**
   * Used to indicate status for a transaction or for a data flow within a
   * transaction. Transactions may be setup with a single status property, or they may
   * have multiple properties corresponding to the different data flows supported
   * by the transaction.
   *
   * For simple transactions or data flows where value acceptance occurs immediatly
   * upon the driving of the signal(s), the values will simply go from INITIAL->ACCEPT.
   * In simple situations which require a handshake the values would be expected to
   * go from INITIAL->ACTIVE->ACCEPT. Note that if a handshake is required, but the
   * handshake occurs immediately, the status will only go through INITIAL->ACCEPT.
   *
   * PARTIAL_ACCEPT normally comes into play if the transaction or data flow involves
   * multiple iterations (e.g., burst transactions or transactions with multiple
   * beats). In this situation the status will go to PARTIAL_ACCEPT as each iteration
   * is completed, and back to ACTIVE whenever a new iteration is begun. The status
   * will only go to ACCEPT once the final iteration is complete.
   *
   * For example a two beat burst with no handshake would be expected to go through
   * INITIAL->PARTIAL_ACCEPT->ACCEPT. A two beat burst with a handshake would be
   * expected to to through INITIAL->ACTIVE->PARTIAL_ACCEPT->ACTIVE->ACCEPT.
   *
   * A transaction might also cycle between ACTIVE and PARTIAL_ACCEPT it the protocol
   * defines several phases. For example a transaction that is made up of multiple
   * distinct packets (e.g., header, data, handshake) might go to ACTIVE as a packet
   * is being transmitted, to to PARTIAL_ACCEPT when a packet is completed, cycle
   * between ACTIVE and PARTIAL_ACCEPT as the remaining packets are exchanged, and
   * only change to ACCEPT once the final packet is complete.
   *
   * Status fields for transactions or data flows with multiple iterations or phases
   * are partnered with 'next' counters reflecting the next iteration or phase. The
   * counter is incremented when a PARTIAL_ACCEPT or ACCEPT occurs, and can be used
   * in combination with the status field to recognize where the transaction is in
   * terms of processing.
   *
   * For example a status of ACTIVE combined with a next value of 0 indicates that
   * the first beat of the transaction, beat 0, is on the bus. A status of ACTIVE
   * combined with a next value of 3 indicates that the 4th beat of the transaction,
   * beat 3, is on the bus. A status of PARTIAL_ACCEPT combined with a next value
   * of 1 indicates that there is no activity on the bus, but that the first beat,
   * beat 0, has been accepted.
   *
   * In protocols where it is possible for a transaction to be rejected, and then
   * retried by the transmitter, the RETRY status has been provided. This status
   * Corresponds for the most part to the INITIAL state, i.e., the transaction is
   * not active, but has the added recognition that the transaction was tried at
   * least once before, and that the component is waiting to re-attempt transaction
   * transmission.
   *
   * DISABLED is specified upon transaction construction if the design is configured
   * to not support a particular part of the protocol which might have been tracked. For
   * example if there are multiple data flows, and the transactions are designed
   * to track these data flows individually (e.g., via status fields for the individual
   * data flows), but one of these data flows is disabled by the configuration, then the
   * status field for that data flow would be set to DISABLED.
   *
   * For transactions and data flows which are DISABLED, the corresponding next
   * counter remains at 0 throughout the transaction.
   *
   * The CANCELLED status occurs if an iteration is queued up but not initiated on the bus,
   * and it is cancelled prior to being placed on the bus. CANCELLED should only be used if
   * the component is designed such that it can return to this transaction and resume the
   * effort to place the CANCELLED iteration on the bus. Once the component restarts this
   * iteration the status is changed to ACTIVE.
   *
   * If the component is not designed to resume cancelled transactions, and is instead
   * designed to 'drop' these transactions, then it should instead mark the transaction
   * as ABORTED. Whenever a transaction is interrupted and dropped for any reason, it
   * should be marked as ABORTED.
   */
  typedef enum {
    INITIAL         = `SVT_CMD_XACT_STATUS_INITIAL,        /**< Data object initial (inactive) state */
    RETRY           = `SVT_CMD_XACT_STATUS_RETRY  ,        /**< Data object initial (inactive) state, but as the result of a retry */
    ACTIVE          = `SVT_CMD_XACT_STATUS_ACTIVE,         /**< Transaction or Data Flow values have been driven by one end of the bus */
    PARTIAL_ACCEPT  = `SVT_CMD_XACT_STATUS_PARTIAL_ACCEPT, /**< Transaction or Data Flow has been accepted either automatically or due to handshake */
    ACCEPT          = `SVT_CMD_XACT_STATUS_ACCEPT,         /**< All iterations or phases of the Transaction or Data Flow have been accepted */
    DISABLED        = `SVT_CMD_XACT_STATUS_DISABLED,       /**< Data Flow is not supported by this system, and therefore not included in this transaction */
    CANCELLED       = `SVT_CMD_XACT_STATUS_CANCELLED,      /**< Iteration or phase was started, but cancelled for some reason */
    ABORTED         = `SVT_CMD_XACT_STATUS_ABORTED         /**< Transaction or Phase interrupted by a protocol reset or other event */
   } status_enum;


  // ****************************************************************************
  // Local Data
  // ****************************************************************************

  /**
   * Reference to the higher level transaction that produced this transaction.
   * This is assigned by calling the store_context() method.
   */
  local `SVT_TRANSACTION_TYPE causal_xact;

  /**
   * Reference to the original (same level) transaction that resulted in the
   * attempt of this transaction.
   * This is assigned by calling the store_trace() method.
   */
  local `SVT_TRANSACTION_TYPE original_xact;

//svt_vipdk_exclude
  /**
   * Transaction cache used to reuse transactions without going through destruction
   * and construction.
   */
  static local `SVT_TRANSACTION_TYPE recycled_xact[$];

  /**
   * Flag used to signify that this transaction is being recycled or already recycled.
   */
  local bit is_recycled_xact = 0;

//svt_vipdk_end_exclude
  /**
   * Flag used to verify that pre_randomize and post_randomize are not blocked by extended classes.
   */
  local bit pre_post_randomize_handshake = 0;

  /** Flag used to differentiate internally generated transactions from testbench provided transactions. */
  local bit is_internal = 0;

  // ****************************************************************************
  // Public Data
  // ****************************************************************************

  /**
   * Reference to the lower level transactions that are created as a result of
   * processing this transaction.  This is assigned by calling the store_context()
   * method.
   */
  `SVT_TRANSACTION_TYPE implementation[$];

  /** Default factory used for creation of the implementation queue. */
  `SVT_TRANSACTION_TYPE default_implementation_xact_factory = null;

  /**
   * Trace of any transactions of the same type that were created as a result of
   * processing this transaction (e.g., due to retries, etc.). If enable_trace()
   * defined to return 0, then only contains 'last' traced transaction. If
   * enable_trace() defined to return 1, then contains all traced transactions.
   * Elements are added to this list via calls to store_trace().
   */
  `SVT_TRANSACTION_TYPE trace[$];

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the exception list object is not copied or compared (NULL), the
   * reference is copied and compared (SHALLOW), or whether the object is copied and
   * compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum exception_list_opts = DEEP;

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the lower level protocol references are not copied or compared (NULL),
   * the references are copied and compared (SHALLOW), or whether the objects are
   * copied and compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum protocol_xacts_opts = NULL;

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  // Time stamps used to describe the transaction start and end cycles, as well as the
  // individual phase start and end cycles.
  // ---------------------------------------------------------------------------

  /** Time at which this transaction was started */
  real start_time = 0;
  /** Time at which this transaction was ended */
  real end_time = 0;
`endif  

  /** Time at which this transaction was started recorded as a realtime value */
  realtime svt_begin_realtime = 0;

  /** Time at which this transaction was ended recorded as a realtime value */
  realtime svt_end_realtime = 0;

  /** Time at which this transaction was accepted recorded as a realtime value */
  realtime svt_accept_realtime = 0;

  /**
   * Local 'time' stores the current active start time of the object. 
   * This is used for backwards compatibility purposes. Should be removed when all
   * clients remove the 'save_prop_vals_to_xml' implementation and move to 'save_object_begin'
   * and 'save_object_data'.
   */
  realtime active_xml_start_time = -1;

`ifndef SVT_VMM_TECHNOLOGY

  /**
   * Comparer which is used to define the function of the comp() compare if provided.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  local `SVT_XVM(comparer) comp_comparer = null;

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
fwMuwpPfI7wQzL6yNO08faMRXFiAso1CVmFtCKNVvKY4rN9KjLZUIRdbVrizDgy+
8V8Y5V0zjzJHcqSJ1BO9qDXYKrKEft9NsVT2KkhAHZjhbuziJtJiw6D+FKY8AX1v
/UXGRJkZoWVfVvag5DGnK5UodBhqGZ39VutHd9Ovr17eeuFvX34yyA==
//pragma protect end_key_block
//pragma protect digest_block
/XDAMYSBhqlWjLrKqGBfquq8unQ=
//pragma protect end_digest_block
//pragma protect data_block
oPC6wCzT8BCm6pYObIgCibFmVTXiQ0J6AYsHmoWnll6nFPPCXdUt1BO4fXNxb3OC
yFEjLJlFGR7MHv6RpuPFatEEOYJ0gNFad14n1MMdRQNFi3Aa9ez9M5yng27O7Xmr
L9CFE9gnTmpXSOYvlYsVvQgoxeD7by3xSAAGymvMqq9TnaegFT9ht9RdsZQWnjUd
jhU+h1un/0nC+JNYAmLqrwQAdX/XkgNcDeERUrXDU2GvGPwtGLiyVgiRQ4AgG1sk
u41dT/g2P90RMx7dMxWjOW8vfrAs0AQyphx+T9JuhLI+VN0eTlNrQky7vaCXZlE3
DG2EHr2p6O+MSJ7Wv5hVMVvzyHfHC0B6CuCI0BxwAHTlxHs4pbt7r3xo7RDfK5gR
8XHzhVCuJHYfk0OFKwogxCOkRSybiP5wM/Z8GlaCzkKaLaTsajxHmDCdYqyxTQ83
q1yAoCMyjexkDFWhPPjnjJlmqa4hTOXC0jV1xptXT/uIEjgINW507dzZgUOfqKts
uu4twCMENDQS4M+9zcHuDSe8qHKQhoj0WUbQx7ge7eUhlG/P7Zr9hgg2qCRx0e1T
snUlzL26n3B1SiClDH3HP7PpaTZ9gooHvgBJDLCo4cJyMQR3l2qa6LLTsdl2zUgD
MO/mr82RAKljevSV9Uerq2WCOq1NzrsdbJNPRGUkuCgxGtLgE16fcKnFUm3Ev6hG
IQZVsDUYg5Q6rBMREQFWr6YwzgPLKGfqCvKMqOrB4juq0ghTzKvzWHRcvf3GHJv+
aJN2PvRVNscV0O54nuJPFojGONW3GlMpo6FMNaAZvKOs3CYrfw1LOUSUM8NhPXkG
UrvK6TwiokHiE4W/LEvjT1Xi6ORvS/1c5FWZna14cPnvWWEKLOpbiNtyK6PezvsP
i2zC2zf/zdnz50ns3o7fYKM9OKdSlP0SWNWB84CI3TexpJD+lH2lVjwSP1rulH29
TnILDOV604eEFNLkwP+2+2e4r5kOKMWrdjcyDvoESmJKyKYI8eGeH6IVOe/pcoCc
Ut3uY1PsmZmDMChP5DLV3K6XASZKnQOywXOOxEGMtYPSUb+2H7V0J6z9UfWVU7nf
wpf+rL6XvHqyXKokFcbWGj7xh0A447zaOhWDK0qq02DmJAIxTOWD46dnGnNQZn4K
emNQzOk9A3VuYNoBtosdzL839t9QQFCnxBjgWBcqS2JxdGPS46AeJiWjUhEOulkr
NXO7uZ6QoGQNOHSuWdv1LyXZo/+Z2wtWyGrKYwG11yOdlzJTmzc4Bt5D3r4wbiDQ
hoUZnTncDq9wjoqNKAmris7fK4+mLd0+Q1D6advrW8Mo87b1/dIphhQHFn3i8F1g
jWjL4pzvbH+YZBIuZN0CwenP1C5GXZmAE5aJzEDfsmSdCNqy5dbyrVxp23rAysjy
UTlTos/7L1M6PWFztqACHmQ4N8szTI8o8P0vkRHAih5MeSgMLxvf+ZYCIdmGUj1q
wyWekCVUC0GOFiEhTEUZUnBeq1hRosKIvyluoccxF8lcMAJ8ALtenavFeNLFO3z1
3NtqxfUGNdysMPXeUKYNwF5Eq9kvSNNUYaHZv6GnahPBpvrH4n3yb193C5dhhWW2
yGuk/2gCSOTiYem4nqbH4CsgbR7vEY+pATW4l0waFqN2dWZwfywGHFU9uRlFYfic
XAddLt/Q0dYhq4+RzzXwrMLbY1h7b6IV+Syhw7abtGGgYCe/GLP5MHHiUudBbOJU
ZnHUx36gs21qX1oF0UBjng==
//pragma protect end_data_block
//pragma protect digest_block
apdHws8qPXcsxweQlLwsPr69Zjg=
//pragma protect end_digest_block
//pragma protect end_protected

`endif

`ifdef SVT_VMM_TECHNOLOGY
  `svt_vmm_data_new(`SVT_TRANSACTION_TYPE)
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_transaction class, passing the
   * appropriate argument values to the <b>svt_data</b> parent class.
   *
   * @param log An vmm_log object reference used to replace the default internal
   * logger. The class extension that calls super.new() should pass a reference
   * to its own <i>static</i> log instance.
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(vmm_log log = null, string suite_name = "");
`else
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_sequence_item class, passing the
   * appropriate argument values to the <b>svt_sequence_item_base</b> parent class.
   *
   * @param name Intance name for this object
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(string name = "svt_transaction_inst", string suite_name = "");
`endif

  // ****************************************************************************
  //   SVT shorthand macros 
  // ****************************************************************************
  `svt_data_member_begin(`SVT_TRANSACTION_TYPE)
    `svt_field_handle(causal_xact,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(implementation, `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_handle(original_xact,        `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(trace,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `SVT_TRANSACTION_SHORTHAND_CUST_COPY
  `svt_data_member_end(`SVT_TRANSACTION_TYPE)

  // ****************************************************************************
  // Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Override pre_randomize to implement the 'pre' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void pre_randomize ();

  //----------------------------------------------------------------------------
  /**
   * Override post_randomize to implement the 'post' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void post_randomize ();

  // ****************************************************************************
  // VMM Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Copies the object implementation queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_implementation (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

  //----------------------------------------------------------------------------
  /**
   * Copies the object trace queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_trace (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /**
   * Copies the object into to, allocating if necessay.
   * 
   * @param to Destination class for the copy operation
   */
  extern virtual function `SVT_DATA_BASE_TYPE do_copy(`SVT_DATA_BASE_TYPE to = null);

  // ---------------------------------------------------------------------------
  /**
   * Compares the object with to, based on the requested compare kind. Differences are
   * placed in diff.
   *
   * @param to vmm_data object to be compared against.
   * @param diff String indicating the differences between this and to.
   * @param kind This int indicates the type of compare to be attempted. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in comparisons of the non-static
   * data members. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_compare(vmm_data to, output string diff, input int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Returns the size (in bytes) required by the byte_pack operation.
   *
   * @param kind This int indicates the type of byte_size being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in a size calculation based on the
   * non-static fields. All other kind values result in a return value of 0.
   */
  extern virtual function int unsigned byte_size ( int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Packs the object into the bytes buffer, beginning at offset, based on the
   * requested byte_pack kind.
   *
   * @param bytes Buffer that will contain the packed bytes at the end of the operation.
   * @param offset Offset into bytes where the packing is to begin.
   * @param kind This int indicates the type of byte_pack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being packed and the return of an integer indicating the number of
   * packed bytes. All other kind values result in no change to the buffer contents, and a
   * return value of 0.
   */
  extern virtual function int unsigned do_byte_pack ( ref logic [7:0] bytes[], input int unsigned offset = 0, input int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Unpacks the object from the bytes buffer, beginning at offset, based on
   * the requested byte_unpack kind.
   *
   * @param bytes Buffer containing the bytes to be unpacked.
   * @param offset Offset into bytes where the unpacking is to begin.
   * @param len Number of bytes to be unpacked.
   * @param kind This int indicates the type of byte_unpack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being unpacked and the return of an integer indicating the number of
   * unpacked bytes. All other kind values result in no change to the exception contents,
   * and a return value of 0.
   */
  extern virtual function int unsigned do_byte_unpack ( const ref logic [7:0] bytes[], input int unsigned offset = 0, input int len = -1, input int kind = -1 );

  // ---------------------------------------------------------------------------
  /**
   * Hook called by the VMM shorthand macro after performing the automated 'copy'
   * routine.
   * 
   * @param to Destination class for teh copy operation
   */
  extern function void svt_transaction_copy_hook(`SVT_DATA_BASE_TYPE to = null);

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
0n2oO06AzjOFTkbD/Wyd6VPZbTzN8O0RmXWBLIv77aycLHddSFhMNtoeHRsfxz2L
oTGSpjJgOP3O7WIclr31a1GI5gKG/gsTrgLKfwQnF7SvZz/cinEhFHy+6ebH9yRP
YIWIiTblDYwWxxSCl9iQBCw1Di+n61NX5YYWAYK83nzCyJRgHZZ2+g==
//pragma protect end_key_block
//pragma protect digest_block
VucySemHDwhPvs1ssF0SsEYNUEo=
//pragma protect end_digest_block
//pragma protect data_block
ypiTXSyLxyvxNeCaIXx41kr3I3kZPTMTQgoR9TIMDjAmTj5hRDqVlJJdNmnj0FfP
VTE5jHYjBXCAdFRoqu7J73w8bPjgEPAs//ZiWw8Aa7mMjnEp3hN51bl1BIyHBQtk
Z9y7nBwvEfE0Bhm8J7GHICTB7Q3pB0HJ52cjEUXOAyjwORiUOrMnO6r1UPTs86KE
oLR1oeWKDol+8lP6OK16sZ3l8B1qL6WjtG2CKDTdCzPp4fNxyUXhUJPfcnmFEvMg
oWUaDS0fIhCv3wkUgNSmuaT8c7yzGyNLqORWtxnIdCUmiq/ywW8gxW/6yVcrokl8
4kd8lVUxTYpsV3d6Xb2/NCIXh6mvRk+OHs1vukU1yVNZ+e2FJdW46HdeydH4rNIU
1s1HiX4nOWMJp1jk6KJqaCNp69gBnLe+8Xj0JGHgNqQ2ITdAYuUCG+vGxi2LZxRX
ue0PiGCl8mR4RVw59JhV+LoixC1kPrl4eEtrscu82R4V4N3JASeJLZTNdatiFyUJ
6Nx94VgskPYNI6IRzPW5MCwNcLgsG1bP6eCnVGEILzZXyaKJEQHLy1HhU7FteaE0
TbgMryidDK+xaNxFyMiewKUCFCLBptFXTxyqKgYH+YE3CErZmelimB8ks+1HtCjn
o9kXaFshjPGio6ZHdUtf/xKACtqJFh1lHvbgG6oD9vtG/o9i0anMrgednQ5xQAnb
Ql6qg5dGy/UqWMJ2SRl1kK75x2RCHurD6TvBjkbaAHsFalDCr94by1Swy/Hm85A2
Ztoo7d7ifAqHgV9+qlyytKVUOuz4cyi6/xPE+eqkTS1wD1wtA8sp9erGzFkGi8xg
MesAd7i3xDBvvVb/1iTXZKVjnUoitcuM0BVx/FZtPLvb57lg8eGR39PpOtkR17/d
qzDXq5ZQH/oYBSWecLtKgMavCJwLrmbR665IWsi24LzU38MSxq4FM8xvkWlsdZ92
dm0Iyo9qyxD4VuupGAsY/RmNFGfObxL0KUOar0Ib0W7qYrlbvtSEnKFSjbSzWloc
08VxOVCYY60V18dynaSQ3r4AQcYrW+12bg9itQlaILv6uKmcfXBU2a2V7zEQvAsl
GQT5oI/cs876hi7qeAhT13r+Kdy0zO/ivDzXJedIvUknntK86dMBb9qwi3f3t2m3
8DQxJvOh4Lgk9pJqgxLrnljc2gszvgBvZ93zb4uD2txEPmt9yn+Or2jQQJjTXTvZ
VVpNx7yCh8tKfsUFYXH4zW0TjkCD2R8sH7UVzYTU9VsnweaeUxQzn1Pexf9hE1ng
IcLyyK6DgTSBKZ2YwcpkpvvRdCcJN6l7ixtHw47uhZdDcCSVnKc2bV/0xiispuaM
v5odJKm1Lt020++dOFC+qHBcJohjoDfTFCCHhE1d6G4aH9DTcKX1wcoyzrOr3RdL
vMsIaAfju4gTB2vWH5yaia4wV8gXsh65tP0rXRUasc+1hwYhKgeoxRrcOUweJCIB
Q4CwvZuEBI1Rtiime3FmTQ==
//pragma protect end_data_block
//pragma protect digest_block
I/+8tXwF+KJJ15qg2p/kA0pS/ZA=
//pragma protect end_digest_block
//pragma protect end_protected

`else

  // ---------------------------------------------------------------------------
  /** Override the 'do_copy' method to copy fields directly. */
  extern virtual function void do_copy(`SVT_XVM(object) rhs);

  // ---------------------------------------------------------------------------
  /** Override the 'do_compare' method to compare fields directly. */
  extern virtual function bit do_compare(`SVT_XVM(object) rhs, `SVT_XVM(comparer) comparer);

  // ---------------------------------------------------------------------------
  /**
   * Pack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_pack(`SVT_XVM(packer) packer);

  // ---------------------------------------------------------------------------
  /**
   * Unpack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_unpack(`SVT_XVM(packer) packer);

`endif

  // ---------------------------------------------------------------------------
  /**
   * Checks to see that the data field values are valid.
   *
   * @param silent bit indicating whether failures should result in warning messages.
   * @param kind This int indicates the type of is_avalid check to attempt. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in verification that the non-static
   * data members are all valid. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_is_valid(bit silent = 1, int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Clears the contents of the transaction so that it can safely be reused.
   */
  extern virtual function void clear();

  //----------------------------------------------------------------------------
  /**
   * Displays the meta information to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.  Extends class flexibility in choosing what
   * meta information should be displayed.
   */
  extern virtual function string psdisplay_meta_info ( string prefix = "" );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short_via_pattern( svt_pattern pttrn, string prefix = "", bit hdr_only = 0 );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short( string prefix = "", bit hdr_only = 0);

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet
   * generally necessary to uniquely identify that packet. This method
   * basically consists of two calls to psdisplay_short(), with hdr_only = 1 and
   * hdr_only = 0, to create the header and body information for the transaction.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   */
  extern virtual function string psdisplay_short_hdr_body(string prefix = "");

  //----------------------------------------------------------------------------
  /**
   * Returns a concise string (32 characters or less) that gives a concise
   * description of the data transaction. Can be used to represent the currently
   * processed data transaction via a signal.
   */
  extern virtual function string psdisplay_concise();

  //----------------------------------------------------------------------------
  /**
   * Displays the implementation list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_impl_elem_display Optional int used to control whether the method does
   * a full or partial display of the implementation queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_implementation ( string prefix = "", int max_impl_elem_display = -1 );

  //----------------------------------------------------------------------------
  /**
   * Displays the trace list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_trace_elem_display Optional int used to control whether the method does
   * a full or partial display of the trace queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_trace ( string prefix = "", int max_trace_elem_display = -1 );

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
qQoZAStR0y3gu5H1nKMgG1AGqKcgE1gdUcPpsYl17RGuSODl1O1oTT6jg/H2cFD5
UXkIGBpar1kpuL2zcYsQwFtXq210jx/dqbwncCkMIY2nul2b7GhbivEXpkvkCfBu
Uv0EarnsTabF6k97JdoskjZ4nIWHHprPVZKsIZ5wf52sbcTxmP5J6w==
//pragma protect end_key_block
//pragma protect digest_block
GHmNwQKaoZxhIMlxK32vwD7/98Y=
//pragma protect end_digest_block
//pragma protect data_block
RxGP7IWriviyg6T0fd/xyLstRqG/QatVJaS3xLCB43yDtnck9yq+9s9lXTMvFR0c
W/h9Wu7yh0p2qx9qVrptF2Psh3RUz+Aw5XktafVZ7icbd0Y4MtmNDf82IonGG+yU
V0IWRUfObthC11YLwl0PA9aURc/yguN2saEIPi2QqGaQv90rpv7YFvUgBLQVAisM
K00bbufEvXmobYyOVZSSYXCoNUh/bBGTLgZAPcYsO6NZ6l1l1BpXBBVs5hpIHYo6
hepmzQJj96QjopTI/S0xP/2j+JSWv7QAB89zV/FfUJR3AH7k06Bti4nJp26UksXy
fPgsJQ4rX2QQJh5wUNtLhJB+igeVBYmS/vLN6/6Gh0j+dtoZVerkfdwVBQ5Wu/fW
fNtqO793MnlGiKkyjqJb3e3Dg4inX+YykPNUbrw6CzzBukPyDnFh1empn4K3VJuv
ItGSrpwBUbKpM+oSDCeoV5lNbU6zt6q4LlKZZJuDWXGK+25XvjVmhEGElVLb0C8W
Gbw5kgKKDIT0tjsuF3RZQsMw0OOhmJhzcWOFBhYKKAU/7z6yxTyDodv9+knaeGGi
HlMkRdNa2ubVfEyWVkUhS7x9y6iCpBvMXeeL04roddLJoPTrYoHNrFaP4rqppvOm
m2OJkQr2pvp82fW8paNqkN+xAUIzJCWb7mV2XgXS1NECQdLqAK1nqR0mwKnyHYKw
y+7bqg+RTDbsXA9VZ/IHWAkwGZfFn6oehhSDLcjoTPZuaHhUh5teAA851fqWZcyZ
o9xd3ne30MsGKEOWsCGXl63elW6dark/2sFrEHeD9VY7w8IrTW2RqlXX6ODHWB5Z
pz4kGey1JPFibmsZers+hqJyRBqMs5g4EkBCShKmCFBVWGTuI2xCmUAyn2e5WDk7
r8eVR5Q4iXLs1n6/D1/ybS4nj71X4Ol2DOqlUehsuy4p48wveAIg7lImzBDIYArc
cCxpQygI4gfnh+LilJ2Sw+JOamBWwtWDcN+9/pq6Ko5xc7NlEsnH0GgR/d0c83m9
tRV0iB2zn4ruM5Q8WxVBJMwystuwHPYo02/M5lGDaL8=
//pragma protect end_data_block
//pragma protect digest_block
nz1zmdPmrGfAeQDLjyldjSR/t2k=
//pragma protect end_digest_block
//pragma protect end_protected

`ifndef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /** Method which filters out any accept time values of -1. */
  extern virtual function time get_safe_accept_time();
`endif

  //----------------------------------------------------------------------------
  /** Method which filters out any begin time values of -1. */
  extern virtual function time get_safe_begin_time();

  //----------------------------------------------------------------------------
  /** Method which filters out any end time values of -1. */
  extern virtual function time get_safe_end_time();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the begin event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_begin_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the end event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_end_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the accept event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_accept_realtime();

  // ****************************************************************************
  // Transaction Specific Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * Method to allocate a new data converter. Extended classes with additional
   * converter capabilities should overload this method to allocate an extended
   * data converter supporting these additional capabilities.
   */
  extern virtual function svt_data_converter allocate_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to return the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to provide access
   * to the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function svt_data_converter get_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to set the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to store away
   * the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function void set_data_converter(svt_data_converter new_converter);

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the 8b10b lookup tables.
   *
   * @param force_load Forces the 8b10b tables to be re-initialized.
   */
  extern virtual function void initialize_8b10b( bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Encodes an eight bit data value into its ten bit representation. The function
   * returns 0 and the output is unpredictable if Xs and Zs are passed in via the
   * argument.
   * 
   * @param data_in Eight bit value to be encoded.
   * @param data_k Flag that determines when the eight bit data represents a 
   * control character.
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected. If the encode operation fails then the value remains unchanged.
   * @param data_out Ten bit encoded data.
   */
  extern function bit encode_8b10b_data( input bit[7:0] data_in, input bit data_k, ref bit running_disparity, output bit[9:0] data_out );

  //----------------------------------------------------------------------------
  /**
   * Decodes a ten bit data value into its eight bit representation. The function
   * returns 0 and the output is unpredictable.
   * 
   * @param data_in Ten bit value to be decoded
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected.  If the encode operation fails then the value remains unchanged.
   * @param data_k Flag that determines when the Ten bit data represents a 
   * control character.
   * @param data_out Eight bit decoded data.
   */
  extern function bit decode_8b10b_data( input bit[9:0] data_in, ref bit running_disparity, output bit data_k, output bit[7:0] data_out );

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the scrambling seed.
   */
  extern function void initialize_scrambling();

  //----------------------------------------------------------------------------
  /**
   * Function is used for scrambling a byte of data. Following 
   * rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) All D-codes and K-codes are scrambled.
   * 3) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array that contains data to be scrambled.
   * @param lfsr Sixteen bit value with which the function encodes the data.
   * It is up to the entity calling this function to keep track of the 
   * lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array constaing the scrambled data.
   */
  extern function void scramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

  //----------------------------------------------------------------------------
  /**
   * Function is used for unscrambling a byte of data. The function returns 0 and
   * the output is unpredictable if Xs and Zs are passed in via the argument. 
   * Following rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array whose elements need to be unscrambled.
   * @param lfsr Is the Sixteen bit value with which the function decodes 
   * the data. It is up to the entity calling this function to keep track of 
   * the lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array containing unscrambled data.
   */
  extern function void unscramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

//svt_vipdk_exclude
  // ---------------------------------------------------------------------------
  /**
   * This method initializes the CRC lookup table, saves the CRC width, and the initial
   * CRC value.
   * 
   * @param poly Polynomial used to initialize the CRC lookup table
   * @param width Width of the CRC lookup table that is generated
   * @param init The CRC value is initialized to this value
   * @param force_load Forces the CRC algorithm to be re-initialized
   */
  extern virtual function void initialize_crc(bit[31:0] poly, int width, bit[31:0] init, bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the CRC initial value.
   *
   * @return The CRC initial value.
   */
  extern virtual function bit[31:0] get_crc_initial_value();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC initial value.
   *
   * @param init The new CRC initial value.
   */
  extern virtual function void set_crc_initial_value(bit[31:0] init);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the crc polynomial value.
   *
   * @return The CRC polynomial value.
   */
  extern virtual function bit[31:0] get_crc_polynomial();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC polynomial value.
   *
   * @param poly The new CRC polynomial value.
   */
  extern virtual function void set_crc_polynomial(bit[31:0] poly);

  // ---------------------------------------------------------------------------
  /**
   * This methods applies a byte to the CRC algorithm.
   * 
   * @param value Value to be applied to the CRC algorithm
   * @param init Optional argument that signifies that the CRC value should be initialied
   *        before the value is applied.
   */
  extern virtual function void apply_byte_to_crc(bit[7:0] value, bit init = 0);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the calculated CRC value.
   */
  extern virtual function bit[31:0] get_crc();

//svt_vipdk_end_exclude
  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #implementation property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #implementation transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_implementation_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #implementation property.
   */
  extern function `SVT_TRANSACTION_TYPE get_implementation(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method first sets up the causal reference for the implementation_xact
   * and then saves the implementation_xact in the #implementation transaction
   * list.
   */
  extern virtual function void store_context(`SVT_TRANSACTION_TYPE implementation_xact);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #causal_xact reference to point to the
   * causal transaction.
   */
  extern virtual function void store_causal_ref(`SVT_TRANSACTION_TYPE causal);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #causal_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null.
   */
  extern virtual task wait_for_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null, but only for the indicated number of time units.
   * It gives up if the value isn't updated within the specificied number of
   * time units.
   *
   * @param wait_time The number of time units to wait before giving up.
   */
  extern virtual task wait_for_causal_ref_thru_time_unit(int wait_time = 1);

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #implementation transaction list, as well as any
   * causal references which may have been setup.
   */
  extern function void clear_implementation();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method is used to enable/disable the trace capability. The base
   * class implementation always returns 0, indicating that this feature is
   * disabled. Extended classes wishing to support this feature must
   * consider whether this feature should always be enabled, be enabled for
   * all instances of the extended class, or enabled on a per instance basis.
   * This method, and any supporting data fields, etc., in the extended class
   * should be implemented in accordance with these decisions.
   */
  extern virtual function bit enable_trace();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #trace property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #trace transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_trace_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #trace property.
   */
  extern function `SVT_TRANSACTION_TYPE get_trace(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method is used to add trace_xact to the #trace transaction list
   * associated with this transaction. It first sets up our transaction as the
   * #original_xact reference for the trace_xact transaction, and then saves the 
   * trace_xact transaction in the #trace transaction list.
   * @param trace_xact The transaction to be added to the #trace transaction list.
   * @param copy Bit indicating whether the trace_xact or a copy should be stored.
   * @param copy_depth If copy set to 1, indicates whether the copy should be done
   * with a DEEP or SHALLOW copy, thereby including or excluding objects such as
   * #implementation.
   */
  extern virtual function void store_trace(`SVT_TRANSACTION_TYPE trace_xact, bit copy = 1, recursive_op_enum copy_depth = SHALLOW);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #original_xact reference to point to the
   * original transaction.
   */
  extern virtual function void store_original_ref(`SVT_TRANSACTION_TYPE original);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #original_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_original_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #trace transaction list, as well as any
   * original references which may have been setup.
   */
  extern function void clear_trace();

  // ---------------------------------------------------------------------------
  /**
   * Determines if this transaction can reasonably be expected to function correctly
   * on the supplied cfg object.
   * 
   * @param cfg The svt_configuration to examine for supportability.
   * @param silent Indicates whether issues with the configuration should be reported.
   *
   * @return Returns '1' if sequence is supported by the configuration, '0' otherwise.
   */
  extern virtual function bit is_supported(svt_configuration cfg, bit silent = 0);

`ifdef SVT_UVM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to return a do_not_randomize value for the transaction.
   *
   * @return Always returns '0'.
   */
  extern virtual function bit get_do_not_randomize();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to start a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_start(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);

  // ---------------------------------------------------------------------------
  /**
   * Utility method used to finish a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_finish(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);
`endif

  // ---------------------------------------------------------------------------
  /**
   * Method to add this transaction to #recycled_xact, which is a queue of
   * recycled transactions. Transactions should only be recycled if the client
   * is sure that the transaction is no longer in use.
   */
  extern virtual function void recycle_me();

  // ---------------------------------------------------------------------------
  /**
   * Method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern virtual function `SVT_TRANSACTION_TYPE get_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * Static method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern static function `SVT_TRANSACTION_TYPE find_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * This method create/update the 'svt_pa_object_data' object data for use in the XML/FSDB which provides
   * basic information about the object. The transaction extension adds begin and end time information
   * to the object if provided by the base class.
   *
   * @param uid Optional string indicating the unique identification value for object. If not 
   * provided uses the 'get_uid()' method  to retrieve the value. 
   * @param typ Optional string indicating the 'type' of the object. If not provided
   * uses the type name for the class.
   * @param parent_uid Optional string indicating the UID of the object's parent. If not provided
   * the method uses get_causal_ref() to obtain a handle to the parent and obtain a parent_uid.
   * If no causal reference found the method assumes there is no parent_uid. To cancel the
   * causal reference lookup completely the client can provide a parent_uid value of
   * `SVT_DATA_UTIL_UNSPECIFIED. If `SVT_DATA_UTIL_UNSPECIFIED is provided the method assumes
   * there is no parent_uid.
   * @param channel Optional string indicating an object channel. If not provided
   * or set to `SVT_DATA_UTIL_UNSPECIFIED the method assumes there is no channel.
   *
   * @return The 'svt_pa_object_data' required for PA header.
   */
  extern virtual function svt_pa_object_data get_pa_obj_data(string uid = "", string typ = "",
                                                           string parent_uid = "", string channel = "");

  // ---------------------------------------------------------------------------
  /**
   * This method overides the super method to set the 'active_xml_start_time' to support backward
   * compatibility and call the super class method to save the object properties.
   *
   * @param writer Object which takes care of the basic write operations.
   * @param object_block_desc String that is placed in the 'object' block created for
   * the data object. If not specified method relies on get_xml_object_block_desc() method
   * to get default description.
   * @param prefix String to be placed at the beginning of each line in the file.
   *
   * @return Indicates success (1) or failure (0) of the save.
   */
  extern virtual function bit save_prop_vals_to_xml(svt_xml_writer writer, string object_block_desc = "", string prefix = "");

  // ---------------------------------------------------------------------------
  /** Method provided to get clean time values to support XML, FSDB and other output. 
   * This method has been deprecated. Clients should override 'get_clean_realtimes' 
   * instead of 'get_clean_times'.
   */
  extern virtual function void get_clean_times(ref time start_time, ref time end_time);

  // ---------------------------------------------------------------------------
  /** Method provided to get clean real time values to support XML, FSDB and other output. */
  extern virtual function void get_clean_realtimes(ref realtime start_time, ref realtime end_time);

  // ---------------------------------------------------------------------------
  /**
   * Method provided to get the transaction status for inclusion in XML and other output.
   *
   * @param status The overall transaction status.
   * @return Indicates whether the status was available (1) or not (0) and therefore whether
   * the status field should be used.
   */
  extern virtual function bit get_xact_status(ref status_enum status);

  // ****************************************************************************
  // Command Support Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow command
   * code to retrieve the value of a single named property of a data class derived from this
   * class. If the <b>prop_name</b> argument does not match a property of the class, or if the
   * <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1', with the value of the <b>prop_val</b>
   * argument assigned to the value of the specified property. However, If the property is a
   * sub-object, a reference to it is assigned to the <b>data_obj</b> (ref) argument.
   * In that case, the <b>prop_val</b> argument is meaningless. The component will then
   * store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val A <i>ref</i> argument used to return the current value of the property,
   * expressed as a 1024 bit quantity. When returning a string value each character
   * requires 8 bits so returned strings must be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @param data_obj If the property is not a sub-object, this argument is assigned to
   * <i>null</i>. If the property is a sub-object, a reference to it is assigned to
   * this (ref) argument. In that case, the <b>prop_val</b> argument is meaningless.
   * The component will then store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   * @return A single bit representing whether or not a valid property was retrieved.
   */
  extern virtual function bit get_prop_val(string prop_name, ref bit [1023:0] prop_val, input int array_ix, ref `SVT_DATA_TYPE data_obj);

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow
   * command code to set the value of a single named property of a data class derived from
   * this class. This method cannot be used to set the value of a sub-object, since sub-object
   * consruction is taken care of automatically by the command interface. If the <b>prop_name</b>
   * argument does not match a property of the class, or it matches a sub-object of the class,
   * or if the <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1'.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val The value to assign to the property, expressed as a 1024 bit quantity.
   * When assigning a string value each character requires 8 bits so assigned strings must
   * be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @return A single bit representing whether or not a valid property was set.
   */
  extern virtual function bit set_prop_val(string prop_name, bit [1023:0] prop_val, int array_ix);

  // ---------------------------------------------------------------------------
  /**
   * Simple utility used to convert string property value representation into its
   * equivalent 'bit [1023:0]' property value representation. Extended to support
   * encoding of enum values.
   *
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort.
   *
   * @return Status indicating the success/failure of the encode.
   */
  extern virtual function bit encode_prop_val(string prop_name, string prop_val_string, ref bit [1023:0] prop_val, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * Provide string values for exception_list_opts and protocol_xacts_opts.
   * 
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort. 
   *
   * @return The enum value corresponding to the desc.
   */
  extern virtual function bit decode_prop_val(string prop_name, bit [1023:0] prop_val, ref string prop_val_string, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the primitive data fields in the object. The svt_pattern_data::name
   * is set to the corresponding field name, the svt_pattern_data::value is set
   * to 0.
   *
   * @return An svt_pattern instance containing entries for all of the data fields.
   */
  extern virtual function svt_pattern do_allocate_pattern();

`ifdef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the data fields in the object that are to be included in the object's
   * XML output.
   *
   * @return An svt_pattern instance containing entries for all of the fields
   * required for XML output of the data object.
   */
  extern virtual function svt_pattern allocate_xml_pattern();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Extension of the `SVT_TRANSACTION_OBJECT_TYPE::convert2string() method needed so that
   * extensions of this class can be used with the comparator classes.
   */
  extern virtual function string convert2string();

  // ---------------------------------------------------------------------------
  /**
   * Method used to set #comp_comparer, defining the function of the comp() compare.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  extern virtual function void set_comp_comparer(`SVT_XVM(comparer) comp_comparer);

  // ---------------------------------------------------------------------------
  /**
   * Implementation of the comp() method needed so that extensions of this class
   * can be used with the comparator classes.
   */
  extern virtual function bit comp(`SVT_TRANSACTION_TYPE to);
`endif

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
/ZYAjfT2RFNlhSnlgZXU2DC1lCgbRu+jVN8zsjwCifMYJBCLaT5XWdfdfXy8QNvf
V3qEfpl9no20Wbl6owt38xHAn4LFEBloDoNf4I0uhkFbXYb9HrZi7IPMoupxYjQH
gFu1hyAXAJBS3ofyMPR0fGX9HL8jy+ZuLTIALVUnyrGwLctVpcegHg==
//pragma protect end_key_block
//pragma protect digest_block
W1K62MLPg5tO8rgZp8jbO5fjUuc=
//pragma protect end_digest_block
//pragma protect data_block
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

//pragma protect end_data_block
//pragma protect digest_block
KdF9U6vPWs6UyoMwZOYQDxlWZbM=
//pragma protect end_digest_block
//pragma protect end_protected
  
//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
uo2oVfTowx3tUNPGVd99juHEZchCHtH0HKi+QacQGkC/1lDekff6XGLcya/ZbdHN
v/lETD1erMMlxF/Ie4HBXBhHglbI3GbWSmlKarSJyGKuzilTF0mJMedPmU5TmzXc
eT/lfW2WQTb6G9f01CU98+GeI5JEFfdBvtLBsnTuvd33M2b5oKGkOQ==
//pragma protect end_key_block
//pragma protect digest_block
UNau2U1UXAwKITf7/aptf4z8seo=
//pragma protect end_digest_block
//pragma protect data_block
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
//pragma protect end_data_block
//pragma protect digest_block
FU14+fn+Trgtnsn6t+Di8uPzyMo=
//pragma protect end_digest_block
//pragma protect end_protected

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the beginning of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_begin();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_end();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of the last transaction
   * in the implementation queue.
   */
  extern virtual task wait_end_last_implementation();

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Bridge method providing a single call to get integral recording transaction 
   * handle for this sequence.
   */
  extern virtual function int svt_get_tr_handle();
`endif

  // ---------------------------------------------------------------------------
  /** Method to get the is_internal value. */
  extern virtual function bit get_is_internal();

  // ---------------------------------------------------------------------------
  /** Method to set the is_internal value. */
  extern virtual function void set_is_internal(bit is_internal = 1);
      
  // ---------------------------------------------------------------------------
endclass

// =============================================================================

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
d62U+Ev9Z/HUxK/ASvWwau+kWy376zWy/fcVlPKcYtmtG1C6Eo4x9VYBMg3PLiAb
wTAqaOqdW28AznzZhd8eivbwYoHe682Xt7dyqyXWruHsdKVLv52OYo4j+U0AlkYd
0JLfdG3N5iCtE8fTwlEQAE/bCHp2AN3TM1HokQJPX1cuThJHHFgyhg==
//pragma protect end_key_block
//pragma protect digest_block
i9ZCIjat26G9qbRHZYV/sCnTekA=
//pragma protect end_digest_block
//pragma protect data_block
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

//pragma protect end_data_block
//pragma protect digest_block
CipOOutWnU1vdsGujtlE+zV0lTs=
//pragma protect end_digest_block
//pragma protect end_protected

//vcs_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
OK8MTfWYu5Owq8tlpztVBjOP33+NO/zoqYfpORxa/KWpGlK3YWx7nRm6lEhWdhAF
rK+STFiw7fjukVIAULCO3Ujt/17/Yk5WJstULFastvz3DfYHhjLD3JeSteTwl/nW
yDifNg8f73XIn/Pz1+VkdQL0IzjDHQar0soqbL1prfnpRp3sbIWBiA==
//pragma protect end_key_block
//pragma protect digest_block
Z6V6TPxmF6eGzJFHgpqmj0oJubw=
//pragma protect end_digest_block
//pragma protect data_block
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

//pragma protect end_data_block
//pragma protect digest_block
bgQT6nNr/IebTEuo5e+4U+ciKiw=
//pragma protect end_digest_block
//pragma protect end_protected

`endif // GUARD_SVT_TRANSACTION_SV


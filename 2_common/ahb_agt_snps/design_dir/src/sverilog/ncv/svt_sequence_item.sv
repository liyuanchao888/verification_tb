//=======================================================================
// COPYRIGHT (C) 2007-2017 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

`ifndef GUARD_SVT_TRANSACTION_SV
`define GUARD_SVT_TRANSACTION_SV

`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_cmd_defines)

`include `SVT_SOURCE_MAP_LIB_SRC_SVI(R-2020.12,svt_data_util)

`ifdef SVT_VMM_TECHNOLOGY
typedef class svt_notify;
`else
typedef class svt_non_abstract_report_object;
`endif

// The `SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING macro put in place to make
// documentation more re-usable.  It has no functional behavior.

`ifdef SVT_UVM_TECHNOLOGY
 // If using UVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 `define SVT_TRANSACTION_STARTED_NOTIFY uvm_transaction::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY uvm_transaction::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING UVM_DISABLE_AUTO_ITEM_RECORDING
 `define SVT_TRANSACTION_OBJECT_TYPE uvm_object
`elsif SVT_OVM_TECHNOLOGY
 // If using OVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 // NOTE: We add begin_event/end_event in OVM
 `define SVT_TRANSACTION_STARTED_NOTIFY svt_sequence_item::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY svt_sequence_item::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING svt_disable_auto_item_record
 `define SVT_TRANSACTION_OBJECT_TYPE ovm_object
`else
 // If using VMM technology then extend svt_data
 `define SVT_TRANSACTION_BASE_TYPE svt_data
 `define SVT_TRANSACTION_TYPE svt_transaction
 `define SVT_TRANSACTION_STARTED_NOTIFY vmm_data::STARTED
 `define SVT_TRANSACTION_ENDED_NOTIFY vmm_data::ENDED
 `define SVT_TRANSACTION_START_TIME start_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING <undefined>
 `define SVT_TRANSACTION_OBJECT_TYPE
`endif

//svt_vipdk_exclude
//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
qiROH+gP4dbud8OTa+KOr3VQCeYNrevMUDbdLbgndHYgqk12Qp56ZQjsisQ2YCHF
Dm/4ozVvZzUGEZHmaZq6AJDtIicgIBwRF/vBktxwFukVDrdTa+V1MnM+dz32ZRzV
YmSacKovtpFkDnnX2UTNyanCP6V8dtRBN8W5bMp0GwYzO7sax+xhew==
//pragma protect end_key_block
//pragma protect digest_block
CYmDJSE82dbh+IBpxztH+xePJVQ=
//pragma protect end_digest_block
//pragma protect data_block
8wypGY+UpIHiYKgm7yix7AFgpgLQelJZvkEOh9ekk11LDdKB1MhV0HpEgLyXDwtw
OR8+slDQqbFvv3SPdUPPn9TM3DryX0eaPRr7sH6aTZ1BOJhlZIjjnPGzQtzkv9g9
AN8OJnnnZaSBh48IYpgf/x+9apAm9fQShcp3RVWHUggmSXxcYfTDMIsqY7h/quSF
hZc/nXrazl/9rHMHX79s+/adYj3QIqtXHhUwByPRi6RIiFfxC0N/N+wttnyMIR8/
rNvCVAkkuqpTk+u0yWJy2/G8SWT7i67Ys0p69W7CDCRCnOtmxJUl0BqsFtSpycyO
cfeymkT5NndiysXDbK/hp8TNZ80ih5/OadttuvFo2of0fELxQ+r7qwhltwSnUEmN
NhI+MCeVjqZBBWyh7Lc83g67VpGVB9QLaVHp10W1V1LUhMHq0lSvDV25lLBizCOs
epYaQA7jIexC9e8f7wDXAuYwd0kcwxx7UFUqDMPZaK5WeBRvdUCrbNbKvEY0tprj
1iChE5XYruu4u50LStPDxOHkTsZNcRx727ZqkZAb0Ervc30lvDTsJ3ksk+BtWdod
O2sf6rbPe7i4yFOWi6jbmfp5Fu+WT2nmelF+pbzDNBjw/KiFqLCC5AUHXDwSFuh8
zIct04tLR9PQFltjX3Ba0Dd10OGcx/jMekQh4Ak7++o=
//pragma protect end_data_block
//pragma protect digest_block
ekdIVs/fFXi11wFKC2NMA28eDao=
//pragma protect end_digest_block
//pragma protect end_protected

`ifdef SVT_VMM_TECHNOLOGY
/**
 * This macro can be used to create a simple "one channel" multi-stream
 * scenario class which implements its scenario via a contained
 * atomic scenario class.
 */
`define SVT_TRANSACTION_MS_SCENARIO(class_name) \
class class_name``_ms_scenario extends svt_dynamic_ms_scenario; \
 \
  /** Properly typed scenario implementing the details of the scenario. */ \
  rand class_name``_scenario contained_scen; \
 \
  /** Name for the channel associated with this multi-stream scenario. */ \
  string chan_name = ""; \
 \
  /** Indicates whether this scenario should wait for the completion of the transactions generated by the scenario. */ \
  bit throttle = 0; \
 \
  /** Controls how many times the scenario is used. -1 indicates no limit, non-negative values define hard limits. */ \
  int execute_limit = -1; \
 \
  /** Used in conjunction with execute_limit, tracking how many times the scenario has been executed. */ \
  int execute_cnt = 0; \
 \
  /** Setup delay applied prior to initiating the transactions in the scenario. */ \
  real setup = 0.0; \
 \
  /** Minimum setup delay value used to define one end of the range for setup delays. */ \
  real setup_min = 0.0; \
 \
  /** Maximum setup delay value used to define one end of the range for setup delays. */ \
  real setup_max = 0.0; \
 \
  /** Temporary used during randomization to allow the setup delay to be randomized */ \
  rand longint unsigned setup_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_max_longint; \
 \
  /** Hold delay, in simulation time units, applied after initiating the transactions in the scenario and waiting for their completion (i.e., if #throttle set to 1). */ \
  real hold = 0.0; \
 \
  /** Minimum hold delay value used to define one end of the range for hold delays. */ \
  real hold_min = 0.0; \
 \
  /** Maximum hold delay value used to define one end of the range for hold delays. */ \
  real hold_max = 0.0; \
 \
  /** Temporary used during randomization to allow the hold delay to be randomized */ \
  rand longint unsigned hold_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_max_longint; \
 \
  /** VMM ID associated with this scenario. */ \
  int  SCENARIO_ID; \
 \
  /** Defines the weight to be applied to the delays which make up the lower sidewall of the overall delay range. */ \
  int LOWER_DELAY_wt = 1000; \
 \
  /** Defines the weight to be applied to the delays in the middle of the delay range, between the lower and upper sidewalls. */ \
  int MIDDLE_DELAY_wt = 1; \
 \
  /** Defines the weight to be applied to the delays which make up the upper sidewall of the overall delay range. */ \
  int UPPER_DELAY_wt = 100; \
 \
  /** Defines what percentage of the overall delay range which should be set aside for each of the two sidewalls, lower and upper. */ \
  int SIDEWALL_PERCENT = 10; \
 \
  constraint reasonable_scen_length { \
    this.contained_scen.length > 0; \
  } \
 \
  constraint reasonable_setup \
  { \
    this.setup_longint dist { \
      `SVT_BATHTUB_DIST(this.setup_min_longint,this.setup_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
  constraint reasonable_hold \
  { \
    this.hold_longint dist { \
      `SVT_BATHTUB_DIST(this.hold_min_longint,this.hold_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
`ifdef SVT_PRE_VMM_11 \
  function new(string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(); \
`else \
  function new(`VMM_SCENARIO parent = null, string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(parent); \
`endif \
    begin \
      string scen_tag = (contained_scen == null) ? "CONTAINED_ATOMIC_SCENARIO" : "CONTAINED_SCENARIO"; \
      if (contained_scen == null) begin \
        /* Create an atomic scenario as the default scenario */ \
        class_name``_atomic_scenario atomic_scen = new(); \
        this.contained_scen = atomic_scen; \
      end else begin \
        this.contained_scen = contained_scen; \
      end \
      if (factory != null) begin \
        this.contained_scen.using = factory; \
      end \
      this.chan_name = chan_name; \
      this.throttle = throttle; \
      SCENARIO_ID = this.define_scenario(scen_tag,1); \
      this.scenario_kind = SCENARIO_ID; \
      this.length = 1; \
      this.repeated = 0; \
      this.log.is_above(this.contained_scen.log); \
    end \
  endfunction \
 \
  local virtual function string this_class_name(); \
    begin \
      return {`SVT_DATA_UTIL_ARG_TO_STRING(class_name), "_ms_scenario"}; \
    end \
  endfunction \
 \
  virtual task execute(ref int n); \
    begin \
      class_name``_channel out_chan; \
      int unsigned n_inst; \
      bit ready_to_apply = 0; \
      bit applied = 0; \
      if (this.execute_limit_exceeded()) begin \
        `svt_verbose("execute", $sformatf("The current execute_cnt (%0d) exceeds the execute_limit (%0d). Nothing to execute.", \
                                    this.execute_cnt, this.execute_limit)); \
        n = 0; \
      end else if (!$cast(out_chan, get_channel(this.chan_name))) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) could not be found or is not of type %0s_channel. Unable to continue.", \
                                  this.chan_name, `SVT_DATA_UTIL_ARG_TO_STRING(class_name))); \
        n = 0; \
      end else if (out_chan == null) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) is null. Unable to continue.", this.chan_name)); \
        n = 0; \
      end else begin \
        `svt_verbose("execute", $sformatf("Generated scenario (%0d, %0d) directed at channel %0s", this.stream_id, this.scenario_id, this.chan_name)); \
        if (this.setup > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0f", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0t(%0f)", this.setup, this.setup)); \
`endif \
          #this.setup; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0f is complete", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0t(%0f) is complete", this.setup, this.setup)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Setup is %0f, so not delaying execution.", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Setup is %0t(%0f), so not delaying execution.", this.setup, this.setup)); \
`endif \
        end \
        fork \
          begin \
            `svt_verbose("execute", $sformatf("About to apply %0d xacts to out_chan %0s for scenario (%0d, %0d).", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            while (!ready_to_apply) begin \
              @ ready_to_apply; \
            end \
            this.contained_scen.apply(out_chan, n_inst); \
            `svt_verbose("execute", $sformatf("Applied %0d xacts to out_chan %0s for scenario (%0d, %0d)", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            applied = 1; \
          end \
          begin \
            if (this.throttle) begin \
              bit orig_tee_mode = out_chan.tee_mode(1); \
              class_name last; \
              fork begin /* disable fork block */ \
              fork \
                begin \
                  while (!applied) begin \
                    class_name next; \
                    ready_to_apply = 1; \
                    `svt_verbose("execute", $sformatf("tee'ing next transaction out of out_chan %0s", this.chan_name)); \
                    out_chan.tee(next); \
                    /* Make sure we see something before attempting to set 'last' */ \
                    last = next; \
                    `svt_verbose("execute", $sformatf("tee'ed transaction from out_chan %0s", this.chan_name)); \
                  end \
                end \
                begin \
                  `svt_verbose("execute", $sformatf("waiting for applied on out_chan %0s", this.chan_name)); \
                  @ applied; \
                  `svt_verbose("execute", $sformatf("waited for applied on out_chan %0s", this.chan_name)); \
                end \
              join_any \
              disable fork; \
              end join_any /* disable fork block */ \
              void'(out_chan.tee_mode(orig_tee_mode)); \
              if ((last != null) && (!last.notify.is_on(vmm_data::ENDED))) begin \
                `svt_verbose("execute", $sformatf("waiting for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
                last.notify.wait_for(vmm_data::ENDED); \
                `svt_verbose("execute", $sformatf("waited for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
              end \
              `svt_verbose("execute", $sformatf("throttle of out_chan %0s is complete", this.chan_name)); \
            end else begin \
              ready_to_apply = 1; \
              `svt_verbose("execute", $sformatf("scenario for out_chan %0s setup with throttle = 0", this.chan_name)); \
            end \
          end \
        join \
        `svt_verbose("execute", $sformatf("Applied %0d instances to out_chan %0s", n_inst, this.chan_name)); \
        if (this.hold > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0f", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0t(%0f)", this.hold, this.hold)); \
`endif \
          #this.hold; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0f is complete", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0t(%0f) is complete", this.hold, this.hold)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Hold is %0f, so not delaying completion.", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Hold is %0t(%0f), so not delaying completion.", this.hold, this.hold)); \
`endif \
        end \
        n += n_inst; \
        this.execute_cnt++; \
      end \
    end \
  endtask \
 \
  virtual function string psdisplay(string prefix = ""); \
    begin \
      psdisplay = { super.psdisplay(prefix), "\n" }; \
      psdisplay = { psdisplay, prefix, "chan_name = ", this.chan_name, "\n" }; \
      psdisplay = { psdisplay, prefix, $sformatf("throttle = %0b\n", throttle) }; \
      psdisplay = { psdisplay, this.contained_scen.psdisplay(prefix) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SCENARIO_ID = %0d\n", SCENARIO_ID) }; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0f\n", this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0f\n", this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0f\n", this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0f\n", this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0f\n", this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0f\n", this.hold_max) }; \
`else \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0t(%0f)\n", this.setup, this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0t(%0f)\n", this.setup_min, this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0t(%0f)\n", this.setup_max, this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0t(%0f)\n", this.hold, this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0t(%0f)\n", this.hold_min, this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0t(%0f)\n", this.hold_max, this.hold_max) }; \
`endif \
      psdisplay = { psdisplay, prefix, $sformatf("LOWER_DELAY_wt = %0d\n", LOWER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("MIDDLE_DELAY_wt = %0d\n", MIDDLE_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("UPPER_DELAY_wt = %0d\n", UPPER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SIDEWALL_PERCENT = %0d\n", SIDEWALL_PERCENT) }; \
    end \
  endfunction \
 \
  virtual function vmm_data copy(vmm_data to = null); \
    begin \
      class_name``_ms_scenario cpy = null; \
 \
      if (to == null) begin \
        cpy = new(); \
      end else if (!$cast(cpy, to)) begin \
        `svt_fatal("copy", $sformatf("Cannot copy to instance that is not of type %0s", this_class_name())); \
      end \
 \
      if (cpy != null) begin \
        void'(super.copy(cpy)); \
        if (!$cast(cpy.contained_scen,this.contained_scen.copy())) begin \
          `svt_fatal("copy", $sformatf("%0s failed attempting to copy contained scenario", this_class_name())); \
        end \
        cpy.chan_name = this.chan_name; \
        cpy.throttle = this.throttle; \
      end \
 \
      return cpy; \
    end \
  endfunction \
 \
  virtual function bit adjust_weights_per_cfg(); \
    adjust_weights_per_cfg = !execute_limit_exceeded(); \
  endfunction \
 \
  function void pre_randomize(); \
    begin \
      this.setup_longint = this.setup; \
      this.setup_min_longint = this.setup_min; \
      this.setup_max_longint = this.setup_max; \
 \
      this.hold_longint = this.hold; \
      this.hold_min_longint = this.hold_min; \
      this.hold_max_longint = this.hold_max; \
 \
      void'(adjust_weights_per_cfg()); \
 \
      /* Make sure the contained scenario info matches the scenario info */ \
      this.contained_scen.stream_id = this.stream_id; \
      this.contained_scen.scenario_id = this.scenario_id; \
      foreach (this.contained_scen.items[i]) begin \
        this.contained_scen.items[i].stream_id   = this.contained_scen.stream_id; \
        this.contained_scen.items[i].scenario_id = this.contained_scen.scenario_id; \
        this.contained_scen.items[i].data_id     = i; \
      end \
      super.pre_randomize(); \
    end \
  endfunction \
 \
  function void post_randomize(); \
    begin \
      super.post_randomize(); \
 \
      this.setup = this.setup_longint; \
      this.hold = this.hold_longint; \
    end \
  endfunction \
 \
  function bit execute_limit_exceeded(); \
    begin \
      execute_limit_exceeded = (execute_limit >= 0) && (execute_cnt >= execute_limit); \
    end \
  endfunction \
 \
endclass: class_name``_ms_scenario

`endif // ifdef SVT_VMM_TECHNOLOGY

//svt_vipdk_end_exclude
/** Add some customized logic to copy implementation and trace queues */
`define SVT_TRANSACTION_SHORTHAND_CUST_COPY \
`ifdef SVT_VMM_TECHNOLOGY \
  if (do_what == DO_COPY) begin \
    svt_transaction_copy_hook(this.__vmm_rhs); \
  end \
`endif

/** Container which automates exception generation for a transaction. */
`define SVT_TRANSACTION_EXCEPTION_LIST_INITIATOR(classname) \
/** Exception list initiator for classname transaction */ \
class classname``_exception_list_initiator extends classname; \
  rand classname``_exception_list rand_exception_list; \
 \
`ifndef SVT_VMM_TECHNOLOGY \
  /** Constructor */ \
  function new(string name=""); \
    super.new(name); \
  endfunction \
 \
  `svt_data_member_begin(classname``_exception_list_initiator) \
  `svt_data_member_end(classname``_exception_list_initiator) \
`endif \
 \
  /** pre_randomize method which can be insures rand_exception_list is non-null. */ \
  function void pre_randomize(); \
    super.pre_randomize(); \
    if (this.rand_exception_list == null) this.rand_exception_list = new(); \
    this.rand_exception_list.setup_randomized_exception(this.cfg, this); \
`ifdef SVT_MULTI_SIM_SKIPPED_PRE_RANDOMIZE \
    this.rand_exception_list.populate_exceptions(); \
`endif \
  endfunction \
 \
  /** pre_randomize method which removes the exception list if it is empty. */ \
  function void post_randomize(); \
    super.post_randomize(); \
    if ((this.rand_exception_list != null) && (this.rand_exception_list.num_exceptions > 0)) begin \
      this.exception_list = this.rand_exception_list; \
    end else begin \
      /* Clearing this.rand_exception_list can result in warning in some simulators, so leave it. */ \
      /* this.rand_exception_list = null; */ \
      this.exception_list = null; \
    end \
  endfunction \
 \
endclass

// =============================================================================
/**
 * Base class for all SVT model transaction data descriptor objects. As functionality
 * commonly needed for transactions for SVT models is defined, it will be implemented
 * (or at least prototyped) in this class.
 */
class `SVT_TRANSACTION_TYPE extends `SVT_DATA_TYPE;

  // ****************************************************************************
  // Enumerated Types
  // ****************************************************************************

//svt_vipdk_exclude
`ifndef SVT_VMM_TECHNOLOGY
  /**
   * Enum used to provide compatibility layer for supporting vmm_data notify types in UVM.
   * SHOULD ONLY BE USED IN SUITES IMPLEMENTED TO UTILIZE UVM/VMM BRIDGE TECHNOLOGIES.
   */
  typedef enum int {EXECUTE = 999_999,
                    STARTED = 999_998,
                    ENDED = 999_997
                    } notifications_e;
`endif

//svt_vipdk_end_exclude
`ifdef SVT_OVM_TECHNOLOGY
   ovm_event begin_event;
   ovm_event end_event;
`endif

  /**
   * Used to indicate status for a transaction or for a data flow within a
   * transaction. Transactions may be setup with a single status property, or they may
   * have multiple properties corresponding to the different data flows supported
   * by the transaction.
   *
   * For simple transactions or data flows where value acceptance occurs immediatly
   * upon the driving of the signal(s), the values will simply go from INITIAL->ACCEPT.
   * In simple situations which require a handshake the values would be expected to
   * go from INITIAL->ACTIVE->ACCEPT. Note that if a handshake is required, but the
   * handshake occurs immediately, the status will only go through INITIAL->ACCEPT.
   *
   * PARTIAL_ACCEPT normally comes into play if the transaction or data flow involves
   * multiple iterations (e.g., burst transactions or transactions with multiple
   * beats). In this situation the status will go to PARTIAL_ACCEPT as each iteration
   * is completed, and back to ACTIVE whenever a new iteration is begun. The status
   * will only go to ACCEPT once the final iteration is complete.
   *
   * For example a two beat burst with no handshake would be expected to go through
   * INITIAL->PARTIAL_ACCEPT->ACCEPT. A two beat burst with a handshake would be
   * expected to to through INITIAL->ACTIVE->PARTIAL_ACCEPT->ACTIVE->ACCEPT.
   *
   * A transaction might also cycle between ACTIVE and PARTIAL_ACCEPT it the protocol
   * defines several phases. For example a transaction that is made up of multiple
   * distinct packets (e.g., header, data, handshake) might go to ACTIVE as a packet
   * is being transmitted, to to PARTIAL_ACCEPT when a packet is completed, cycle
   * between ACTIVE and PARTIAL_ACCEPT as the remaining packets are exchanged, and
   * only change to ACCEPT once the final packet is complete.
   *
   * Status fields for transactions or data flows with multiple iterations or phases
   * are partnered with 'next' counters reflecting the next iteration or phase. The
   * counter is incremented when a PARTIAL_ACCEPT or ACCEPT occurs, and can be used
   * in combination with the status field to recognize where the transaction is in
   * terms of processing.
   *
   * For example a status of ACTIVE combined with a next value of 0 indicates that
   * the first beat of the transaction, beat 0, is on the bus. A status of ACTIVE
   * combined with a next value of 3 indicates that the 4th beat of the transaction,
   * beat 3, is on the bus. A status of PARTIAL_ACCEPT combined with a next value
   * of 1 indicates that there is no activity on the bus, but that the first beat,
   * beat 0, has been accepted.
   *
   * In protocols where it is possible for a transaction to be rejected, and then
   * retried by the transmitter, the RETRY status has been provided. This status
   * Corresponds for the most part to the INITIAL state, i.e., the transaction is
   * not active, but has the added recognition that the transaction was tried at
   * least once before, and that the component is waiting to re-attempt transaction
   * transmission.
   *
   * DISABLED is specified upon transaction construction if the design is configured
   * to not support a particular part of the protocol which might have been tracked. For
   * example if there are multiple data flows, and the transactions are designed
   * to track these data flows individually (e.g., via status fields for the individual
   * data flows), but one of these data flows is disabled by the configuration, then the
   * status field for that data flow would be set to DISABLED.
   *
   * For transactions and data flows which are DISABLED, the corresponding next
   * counter remains at 0 throughout the transaction.
   *
   * The CANCELLED status occurs if an iteration is queued up but not initiated on the bus,
   * and it is cancelled prior to being placed on the bus. CANCELLED should only be used if
   * the component is designed such that it can return to this transaction and resume the
   * effort to place the CANCELLED iteration on the bus. Once the component restarts this
   * iteration the status is changed to ACTIVE.
   *
   * If the component is not designed to resume cancelled transactions, and is instead
   * designed to 'drop' these transactions, then it should instead mark the transaction
   * as ABORTED. Whenever a transaction is interrupted and dropped for any reason, it
   * should be marked as ABORTED.
   */
  typedef enum {
    INITIAL         = `SVT_CMD_XACT_STATUS_INITIAL,        /**< Data object initial (inactive) state */
    RETRY           = `SVT_CMD_XACT_STATUS_RETRY  ,        /**< Data object initial (inactive) state, but as the result of a retry */
    ACTIVE          = `SVT_CMD_XACT_STATUS_ACTIVE,         /**< Transaction or Data Flow values have been driven by one end of the bus */
    PARTIAL_ACCEPT  = `SVT_CMD_XACT_STATUS_PARTIAL_ACCEPT, /**< Transaction or Data Flow has been accepted either automatically or due to handshake */
    ACCEPT          = `SVT_CMD_XACT_STATUS_ACCEPT,         /**< All iterations or phases of the Transaction or Data Flow have been accepted */
    DISABLED        = `SVT_CMD_XACT_STATUS_DISABLED,       /**< Data Flow is not supported by this system, and therefore not included in this transaction */
    CANCELLED       = `SVT_CMD_XACT_STATUS_CANCELLED,      /**< Iteration or phase was started, but cancelled for some reason */
    ABORTED         = `SVT_CMD_XACT_STATUS_ABORTED         /**< Transaction or Phase interrupted by a protocol reset or other event */
   } status_enum;


  // ****************************************************************************
  // Local Data
  // ****************************************************************************

  /**
   * Reference to the higher level transaction that produced this transaction.
   * This is assigned by calling the store_context() method.
   */
  local `SVT_TRANSACTION_TYPE causal_xact;

  /**
   * Reference to the original (same level) transaction that resulted in the
   * attempt of this transaction.
   * This is assigned by calling the store_trace() method.
   */
  local `SVT_TRANSACTION_TYPE original_xact;

//svt_vipdk_exclude
  /**
   * Transaction cache used to reuse transactions without going through destruction
   * and construction.
   */
  static local `SVT_TRANSACTION_TYPE recycled_xact[$];

  /**
   * Flag used to signify that this transaction is being recycled or already recycled.
   */
  local bit is_recycled_xact = 0;

//svt_vipdk_end_exclude
  /**
   * Flag used to verify that pre_randomize and post_randomize are not blocked by extended classes.
   */
  local bit pre_post_randomize_handshake = 0;

  /** Flag used to differentiate internally generated transactions from testbench provided transactions. */
  local bit is_internal = 0;

  // ****************************************************************************
  // Public Data
  // ****************************************************************************

  /**
   * Reference to the lower level transactions that are created as a result of
   * processing this transaction.  This is assigned by calling the store_context()
   * method.
   */
  `SVT_TRANSACTION_TYPE implementation[$];

  /** Default factory used for creation of the implementation queue. */
  `SVT_TRANSACTION_TYPE default_implementation_xact_factory = null;

  /**
   * Trace of any transactions of the same type that were created as a result of
   * processing this transaction (e.g., due to retries, etc.). If enable_trace()
   * defined to return 0, then only contains 'last' traced transaction. If
   * enable_trace() defined to return 1, then contains all traced transactions.
   * Elements are added to this list via calls to store_trace().
   */
  `SVT_TRANSACTION_TYPE trace[$];

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the exception list object is not copied or compared (NULL), the
   * reference is copied and compared (SHALLOW), or whether the object is copied and
   * compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum exception_list_opts = DEEP;

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the lower level protocol references are not copied or compared (NULL),
   * the references are copied and compared (SHALLOW), or whether the objects are
   * copied and compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum protocol_xacts_opts = NULL;

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  // Time stamps used to describe the transaction start and end cycles, as well as the
  // individual phase start and end cycles.
  // ---------------------------------------------------------------------------

  /** Time at which this transaction was started */
  real start_time = 0;
  /** Time at which this transaction was ended */
  real end_time = 0;
`endif  

  /** Time at which this transaction was started recorded as a realtime value */
  realtime svt_begin_realtime = 0;

  /** Time at which this transaction was ended recorded as a realtime value */
  realtime svt_end_realtime = 0;

  /** Time at which this transaction was accepted recorded as a realtime value */
  realtime svt_accept_realtime = 0;

  /**
   * Local 'time' stores the current active start time of the object. 
   * This is used for backwards compatibility purposes. Should be removed when all
   * clients remove the 'save_prop_vals_to_xml' implementation and move to 'save_object_begin'
   * and 'save_object_data'.
   */
  realtime active_xml_start_time = -1;

`ifndef SVT_VMM_TECHNOLOGY

  /**
   * Comparer which is used to define the function of the comp() compare if provided.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  local `SVT_XVM(comparer) comp_comparer = null;

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
83drBlLDWXIF1XrXiDr1AigN8RuPr6JDzuSBRgwqnqXrm0C/kH82kfp6RlIYlwBa
ubSSPq1hp1HMFTpX4kM5WNZ+4VMulbhzUpmCkVd0Z4+KQn41GTToh8OEIR5N/atF
9mV+cclLh59dyQ6vHZUfLG4J0fR0kBuOVx3PccOO4ImfeW/meTEGAQ==
//pragma protect end_key_block
//pragma protect digest_block
hcR4q+tFolQmQokeBJuhaLnlv3U=
//pragma protect end_digest_block
//pragma protect data_block
N8dMYIyw423mBu3fK+uLI4WANHHnsfT6zaaSN/rUlBazU4lgn2S+maKZteY1hf5i
jndC0GY3fuu3yxMOKJHzf2n48sGiNOqQNYXJQCSfEslpi3E35mmn0EGodRYM/VrA
8gEsIrbq7OwEVFEycaVrMKJvlIxlxoqD6RqtRGYfLIHlsLuVSsurigN6YAotNAZZ
h1JhCeiOlJCSvIn56xwVxBS4Wtvb/pQWWh6akTSCtnCOvdlFaoT+o0+/pggXrldI
PpyWXzetLVRptZA2T4Ih+g4Xdwlq8xHnH0F57gPrb4QQcVR4CQBI57AfA62QWCNU
HAH4udEom1jqV23zNlnqVLrFayfB48YRojBHLuH7Mh66UJr56SkRNlpJ1iq23TPa
Ya5QSX1001cjqx6enQK8HgUqXpUMjo8NssGsjlvh+QtmIX3iTaV8S1By272byO3Z
to84HWaaNVLxvIclM7PdtCjLuO9yfqkX2OFjzDscI+iJ+2kZRCGb30/b+pcUmq8C
t4S3b/FcMIwn/3icXQeLKaBxKX90HDlsd7y7CL30iMGNzUsC5hJWHJ96Hz2X66k5
T+qsQwzUJ5PAYI4l5DEh6MdRFz7I1WnY+9Th5JFUDE8nLdXCyUkSBzUUv+XjAZ5H
65U+6VQ2F4/CpY1vqd2bX9iCwyKELCsS+uMoawRKTKkifG5y/OFgbjsbP/tHtepx
AjBRRZxyb36a/rpoIIupOYOXKkoJzMnVTU1qAN0LI2i+l812vUyU9OSnFfTUG/b1
BAyNkKRVUxT4j8RX/iOv0kiatZ9bOXGwQG+ejkM5OiT5bEKS1dlzMKBsaQPwwMmL
Dn2Swg/5/U6kXdLYv1vcPN6FFrVBlJJW0jR1iijseTtahjX1cdtewrplq744iIBY
v/xT12IlosQAWG/PZIYWcHsSrziU3YepQxE6J9mvk5SRmR/M3+Uwvm/Cezc97QFz
JzeCugshRM+dNp+AQO2IoFMXpEcu01TWrAXU7whuEOG4PLw6BB/c7ozyVmfM3rUj
OhF8Oxj282nrYKRpBSqevN5dXfEJbI2BI7sEVjSl0EzI4C9ZMh0WEGeQWoE2QAVC
ra3DfNSfZiGZxVjYBpLra3/fxmLX7ZquR6wnhAgIrAlCoG6AXpxcD1IuY1Z5XSho
K+DnogX8ZIl3OlSfi7uHol9WB7TsLyPSPWAsLyh/qipiyQGzO8GRgSVlHLx1cfw0
Up1Ni8TLFUjlMn6eVg/LTd7p5N4YLWociK108miOHhsvQpDn7dX3j+BhRz0rBlDx
CHjfAlG5kibnDb5f53COCo7WV1x5lbSrlw+gYc1OdXYm8U1lRi+UX7G0Nx3Tkl3E
j4Uz47Xis/Me3E30B+u5qoOV1NAWBCPCqSVQemspmNJog0cR97RoZ99xInfxm9GF
W/ypd4ejvPIwGgipcqID9HWrnvOIjtwgsO7zHaTWF3vop/e/jC9s7RrzqAcdVtCz
RdYCr+y/q1gsLp6uLR9mpc6IMQ0FnhXR1OBv+VmLp69sdl6Gx2q3S7wV3pHT/+RI
qbsXz/z6D94MBLwp6oFQ3OiyeUTdmwP1xXm7+txHDC+fbNneFNH8vGqAHW/DVdjo
Jn0VmLnDZE/1ol+C5ZgTYq8aEk1+wxYHAuKTrWGJOTwuKg5BbDHb0tU5oevIBeHs
G9VsTaMw/wVcvNEIvDQ5790h8qnNrScZPfrqd0vb6Kf2lNIixNNL68wyYe2jpilM
cakhRLoWRpcE3BHuu60wZw==
//pragma protect end_data_block
//pragma protect digest_block
iT3SEET9N4UID+UiuTgUcGyP8Ic=
//pragma protect end_digest_block
//pragma protect end_protected

`endif

`ifdef SVT_VMM_TECHNOLOGY
  `svt_vmm_data_new(`SVT_TRANSACTION_TYPE)
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_transaction class, passing the
   * appropriate argument values to the <b>svt_data</b> parent class.
   *
   * @param log An vmm_log object reference used to replace the default internal
   * logger. The class extension that calls super.new() should pass a reference
   * to its own <i>static</i> log instance.
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(vmm_log log = null, string suite_name = "");
`else
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_sequence_item class, passing the
   * appropriate argument values to the <b>svt_sequence_item_base</b> parent class.
   *
   * @param name Intance name for this object
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(string name = "svt_transaction_inst", string suite_name = "");
`endif

  // ****************************************************************************
  //   SVT shorthand macros 
  // ****************************************************************************
  `svt_data_member_begin(`SVT_TRANSACTION_TYPE)
    `svt_field_handle(causal_xact,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(implementation, `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_handle(original_xact,        `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(trace,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `SVT_TRANSACTION_SHORTHAND_CUST_COPY
  `svt_data_member_end(`SVT_TRANSACTION_TYPE)

  // ****************************************************************************
  // Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Override pre_randomize to implement the 'pre' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void pre_randomize ();

  //----------------------------------------------------------------------------
  /**
   * Override post_randomize to implement the 'post' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void post_randomize ();

  // ****************************************************************************
  // VMM Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Copies the object implementation queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_implementation (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

  //----------------------------------------------------------------------------
  /**
   * Copies the object trace queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_trace (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /**
   * Copies the object into to, allocating if necessay.
   * 
   * @param to Destination class for the copy operation
   */
  extern virtual function `SVT_DATA_BASE_TYPE do_copy(`SVT_DATA_BASE_TYPE to = null);

  // ---------------------------------------------------------------------------
  /**
   * Compares the object with to, based on the requested compare kind. Differences are
   * placed in diff.
   *
   * @param to vmm_data object to be compared against.
   * @param diff String indicating the differences between this and to.
   * @param kind This int indicates the type of compare to be attempted. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in comparisons of the non-static
   * data members. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_compare(vmm_data to, output string diff, input int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Returns the size (in bytes) required by the byte_pack operation.
   *
   * @param kind This int indicates the type of byte_size being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in a size calculation based on the
   * non-static fields. All other kind values result in a return value of 0.
   */
  extern virtual function int unsigned byte_size ( int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Packs the object into the bytes buffer, beginning at offset, based on the
   * requested byte_pack kind.
   *
   * @param bytes Buffer that will contain the packed bytes at the end of the operation.
   * @param offset Offset into bytes where the packing is to begin.
   * @param kind This int indicates the type of byte_pack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being packed and the return of an integer indicating the number of
   * packed bytes. All other kind values result in no change to the buffer contents, and a
   * return value of 0.
   */
  extern virtual function int unsigned do_byte_pack ( ref logic [7:0] bytes[], input int unsigned offset = 0, input int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Unpacks the object from the bytes buffer, beginning at offset, based on
   * the requested byte_unpack kind.
   *
   * @param bytes Buffer containing the bytes to be unpacked.
   * @param offset Offset into bytes where the unpacking is to begin.
   * @param len Number of bytes to be unpacked.
   * @param kind This int indicates the type of byte_unpack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being unpacked and the return of an integer indicating the number of
   * unpacked bytes. All other kind values result in no change to the exception contents,
   * and a return value of 0.
   */
  extern virtual function int unsigned do_byte_unpack ( const ref logic [7:0] bytes[], input int unsigned offset = 0, input int len = -1, input int kind = -1 );

  // ---------------------------------------------------------------------------
  /**
   * Hook called by the VMM shorthand macro after performing the automated 'copy'
   * routine.
   * 
   * @param to Destination class for teh copy operation
   */
  extern function void svt_transaction_copy_hook(`SVT_DATA_BASE_TYPE to = null);

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
1qk649tZDS1yuUoFUq1GR0zzal2kNP0v3b3kmpST4Aw6YiqNqX36LadK2DqYKnou
GoO1Blg6EZhlyDOpzENR6DVGDaNrbRHKC1g9WrxqRzG1X7TBYV3mM+pS/6gtHDoK
Do0Amui2cPAOHWwF/0Vl6p3+SMItMnaCPAWP8jc0yCn1Osu1b7hnug==
//pragma protect end_key_block
//pragma protect digest_block
fQlYvB4yiSMYtWdVtEcdITE0OZg=
//pragma protect end_digest_block
//pragma protect data_block
bOY+f/MptaSwexaMC8h+3Hrjbc0n69ePNEQd0y3DugbqNjt36de48GgWdHoYaj+T
TPpmDHk7opP5d/ARn3ez84FOzmMTtM6XaJ9kaAT/02ocLacn1OxR92OesVTEq7Bw
AINtQnpSqCwMTO/QxgHDegHVdPYFTMw3H3A3muMNJO631sCoA6bE8XCpAMoVcJ2p
qLRZSdq0gjMcTQ07gV5VUlUKDcDpy7tFbVQZ/bkeaWmc1uZa1eA99PMhApUoVmkq
KKRB64+bKzFlxLhMl6gS/jEU87MM0g0M656kJYfD0AJjlKRzwqHftcrV9ZkGw3G6
ODDKSMVxtsGYduDMWHY/FrvRlE4NPqgbRjUs/9XjtI8mXZkHg/Ba7H8SIK8UX76t
A4+568sM0f3DeCPTtXCSS4M+RluUtROUVD4jd0F+PT29KFKh4nRMUOmycedvX2bu
i4IHUXkY2C5EoPWEUIC2UWAnjKwF5aKv3p29lE2HnoSTDXycOdC3YMn59NKKjbLM
adKxou0Zu2T/prsKfT3twrOKxAqrVZAXy8mGwpAD/gFPZvM1NkY7ITopBGY2xZti
PL1dZMdV8VI5E417NrH/vHGDMQioS0NRg4k6UVOEHz3BQCQRywsW6fWCV9UuI6WM
vtOgS+AhkeryhomFFQ4nl1JXZHn6hKjC8KufSrnVCkk/Z8XHxyw/fxj9vsb3vyEd
Ws3LpDRo/qseBYocSGEurI46NnlK6iBfBSCQmP++8mTAAVHD4ljLZQ7ldtxCr84S
jZMf2+AR+OEjNuN/9Zdkc8KELECJsrBWlcrYjEl/3xoH/uWpN143Jtufy0UxyvDs
HJOLrmOkKwIwHi47u6NCs2pdDaWlB4HRNzH57cRkwCb0In9uc8kJlF3T9naAgnNC
8KbmD/CQVMX1iGx3wznmyMUGpalNidpJLrhCW69Bb6eHqICb1eiGTtCDIuoPnpmU
SQXi/ds+MP4xlWN0znvJcNEjR5xot4O4gpFV7i3Zc/mMGWQNlHpzuW4Yj5V6CcKA
YKp0JaKYDyhk6fzHHR1ZrdJiRekO0Dv/1VxrAfY1wSVGBezk/HhBTU88sMylf3FP
ALSmQXUzfreowdQSD9Rqmsfj/D2GqAke3eAeasKFXyWn3yDujJg/r+hLGuyP+pp0
Skpu1CK/xKaFNTMi8/HxpoPEhXKrnWOnq334Yxg28JZsJE2yuKRTb93YZA3ZWrVF
3iGnlPg9h7s5YkSp7C7hhJuAbgb/mWTgIxhGXKFQ++qposlPJtPvrG+U9AN0hbjr
sWiLeESvsVJQCDC1gN2qPK1k7VveXJWOWmpLtkzH9fZJ0LOdUhMPXTf1CkrgIwGG
+YAFoYctvW7MtdAlO7cnJcxoY+aQ6+1DvsH2KYPZUt8nXFSI6RN5YBcWv1JNWWqe
SUpP/ox7gwRCweL7NBmIKtwFI0v/OsCDtWwBxdb1yEpi7Huy5sHEiwth36cndDKJ
DtQqhloKht/Bnw1MRPAVaw==
//pragma protect end_data_block
//pragma protect digest_block
rhws14JT+gWnwUB8d4HTe1NMYzM=
//pragma protect end_digest_block
//pragma protect end_protected

`else

  // ---------------------------------------------------------------------------
  /** Override the 'do_copy' method to copy fields directly. */
  extern virtual function void do_copy(`SVT_XVM(object) rhs);

  // ---------------------------------------------------------------------------
  /** Override the 'do_compare' method to compare fields directly. */
  extern virtual function bit do_compare(`SVT_XVM(object) rhs, `SVT_XVM(comparer) comparer);

  // ---------------------------------------------------------------------------
  /**
   * Pack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_pack(`SVT_XVM(packer) packer);

  // ---------------------------------------------------------------------------
  /**
   * Unpack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_unpack(`SVT_XVM(packer) packer);

`endif

  // ---------------------------------------------------------------------------
  /**
   * Checks to see that the data field values are valid.
   *
   * @param silent bit indicating whether failures should result in warning messages.
   * @param kind This int indicates the type of is_avalid check to attempt. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in verification that the non-static
   * data members are all valid. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_is_valid(bit silent = 1, int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Clears the contents of the transaction so that it can safely be reused.
   */
  extern virtual function void clear();

  //----------------------------------------------------------------------------
  /**
   * Displays the meta information to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.  Extends class flexibility in choosing what
   * meta information should be displayed.
   */
  extern virtual function string psdisplay_meta_info ( string prefix = "" );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short_via_pattern( svt_pattern pttrn, string prefix = "", bit hdr_only = 0 );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short( string prefix = "", bit hdr_only = 0);

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet
   * generally necessary to uniquely identify that packet. This method
   * basically consists of two calls to psdisplay_short(), with hdr_only = 1 and
   * hdr_only = 0, to create the header and body information for the transaction.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   */
  extern virtual function string psdisplay_short_hdr_body(string prefix = "");

  //----------------------------------------------------------------------------
  /**
   * Returns a concise string (32 characters or less) that gives a concise
   * description of the data transaction. Can be used to represent the currently
   * processed data transaction via a signal.
   */
  extern virtual function string psdisplay_concise();

  //----------------------------------------------------------------------------
  /**
   * Displays the implementation list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_impl_elem_display Optional int used to control whether the method does
   * a full or partial display of the implementation queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_implementation ( string prefix = "", int max_impl_elem_display = -1 );

  //----------------------------------------------------------------------------
  /**
   * Displays the trace list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_trace_elem_display Optional int used to control whether the method does
   * a full or partial display of the trace queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_trace ( string prefix = "", int max_trace_elem_display = -1 );

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
73dM1q5tpo/WLJfaM1ecP4ZrQXILKP39o2d1DLHh+J66+WX/UXXZeR92XyxWU2WM
JTe4L8ZpDCGmQpOasdgZVkN/MnoTkXwJ8Kt7yru0YQYvLudzG2tlL3nYxhSSgCnN
u6KGnBjI4xcOI2ZL/4tBcLtb51RwxC2ZyFLWKnSPhTw+s6tGBFRGzw==
//pragma protect end_key_block
//pragma protect digest_block
kxhVXMyhozyE1CSbFS0EHSC/pZM=
//pragma protect end_digest_block
//pragma protect data_block
V+xXUJUa9SHnWqQBdeRqt+bQDW0zXNfP4xecatSdmGpZC8AUtrAhPAN8BOCBP1DY
IUEiCJPC4iy8igBOosySzQJ9Nll+JdyW3EEG77Ybkue+AvZ7yebGApZLxIUe1cqg
C9qxetn39DSiFWmgzbQ3K5/1D8WBArkSBHnhr3d0zrcUBxU1qcO0YFGHNQf14E21
Y5SZZfYNSfrUFcL1Vs/o5at7/wpBQyi7rvS8aPQhETK5OP0VwEvPoY2BjnMeL9gu
NpJA3+Qg+ScOL+BDkiFoohrtWbt8R0oNoo/uJNUkyXMAbYIYmkcT31J/3OOcyKIg
785tMdSlDb9ePkj81Sw6ShoD7d1qDJ3IkqcGL9kx7Un9N+ALDvxJTvhBDkSSvF/F
5tlxxxyf8Vf3kxiTlZSvqUHjjbCCwtxtAVeb/06zz1b9f8ql5/Yt21AoicL6Onvh
A9/2061M2I5o+QvYbahm9jLWnnu7lFFW7NG4pEgDug4oVaq1lw0HqZ+mDFAgje7A
F5gwdkHh1FEea38kuG4jESLKaM7OiHhgrRv+Ehlr+OT+m5PihaRvQau6tsAsh+4s
VeQa9JXyXF7SCyTIz+BswRM97rbTRSx7ea3AZXVBT/9B+ko0vmsmcs+sFUWzz1cb
KeW7rolKdSQTdOxR5Z31nlkp358FZdTKzy3vSnz7Ssf1HhVC5UJ4KFHM9imDEI5q
TSYVcAIwNYw/C4toq3Ix3mkkcOQ4AOp1PgzjCX8JIxUVvHwvb9if9kX1JQ5xr+bx
YWH+kafAQmTHt2wg/yQzpkIY67pnX4yDNiCPXf+GNds3gJJrW842/pWVV/+Lz75S
bHzEcIx08y76vcsEpnyMTUf5AA/HY+ViAyNhQeKoDFidQWBO3g148p63AXl0uKMJ
PyubtVW8D1uNn0TMFbqc7ZJvDARlYyp2A3dPTXqp2/EFMwgI8mo3vuLqLY7CULU0
wy3apvARxxru14Ih8KXFHRbd/lN/Dt+XfPRldTn+B8yR2M3DLZgnoHc+W80m6tyt
2H5tTXgwNPLJLt1WMZJifDp9DJB6o0pVh5gLXcICiFc=
//pragma protect end_data_block
//pragma protect digest_block
RC69OGur1YrxPVlpC5wBvmH7IKo=
//pragma protect end_digest_block
//pragma protect end_protected

`ifndef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /** Method which filters out any accept time values of -1. */
  extern virtual function time get_safe_accept_time();
`endif

  //----------------------------------------------------------------------------
  /** Method which filters out any begin time values of -1. */
  extern virtual function time get_safe_begin_time();

  //----------------------------------------------------------------------------
  /** Method which filters out any end time values of -1. */
  extern virtual function time get_safe_end_time();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the begin event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_begin_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the end event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_end_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the accept event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_accept_realtime();

  // ****************************************************************************
  // Transaction Specific Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * Method to allocate a new data converter. Extended classes with additional
   * converter capabilities should overload this method to allocate an extended
   * data converter supporting these additional capabilities.
   */
  extern virtual function svt_data_converter allocate_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to return the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to provide access
   * to the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function svt_data_converter get_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to set the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to store away
   * the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function void set_data_converter(svt_data_converter new_converter);

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the 8b10b lookup tables.
   *
   * @param force_load Forces the 8b10b tables to be re-initialized.
   */
  extern virtual function void initialize_8b10b( bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Encodes an eight bit data value into its ten bit representation. The function
   * returns 0 and the output is unpredictable if Xs and Zs are passed in via the
   * argument.
   * 
   * @param data_in Eight bit value to be encoded.
   * @param data_k Flag that determines when the eight bit data represents a 
   * control character.
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected. If the encode operation fails then the value remains unchanged.
   * @param data_out Ten bit encoded data.
   */
  extern function bit encode_8b10b_data( input bit[7:0] data_in, input bit data_k, ref bit running_disparity, output bit[9:0] data_out );

  //----------------------------------------------------------------------------
  /**
   * Decodes a ten bit data value into its eight bit representation. The function
   * returns 0 and the output is unpredictable.
   * 
   * @param data_in Ten bit value to be decoded
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected.  If the encode operation fails then the value remains unchanged.
   * @param data_k Flag that determines when the Ten bit data represents a 
   * control character.
   * @param data_out Eight bit decoded data.
   */
  extern function bit decode_8b10b_data( input bit[9:0] data_in, ref bit running_disparity, output bit data_k, output bit[7:0] data_out );

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the scrambling seed.
   */
  extern function void initialize_scrambling();

  //----------------------------------------------------------------------------
  /**
   * Function is used for scrambling a byte of data. Following 
   * rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) All D-codes and K-codes are scrambled.
   * 3) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array that contains data to be scrambled.
   * @param lfsr Sixteen bit value with which the function encodes the data.
   * It is up to the entity calling this function to keep track of the 
   * lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array constaing the scrambled data.
   */
  extern function void scramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

  //----------------------------------------------------------------------------
  /**
   * Function is used for unscrambling a byte of data. The function returns 0 and
   * the output is unpredictable if Xs and Zs are passed in via the argument. 
   * Following rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array whose elements need to be unscrambled.
   * @param lfsr Is the Sixteen bit value with which the function decodes 
   * the data. It is up to the entity calling this function to keep track of 
   * the lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array containing unscrambled data.
   */
  extern function void unscramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

//svt_vipdk_exclude
  // ---------------------------------------------------------------------------
  /**
   * This method initializes the CRC lookup table, saves the CRC width, and the initial
   * CRC value.
   * 
   * @param poly Polynomial used to initialize the CRC lookup table
   * @param width Width of the CRC lookup table that is generated
   * @param init The CRC value is initialized to this value
   * @param force_load Forces the CRC algorithm to be re-initialized
   */
  extern virtual function void initialize_crc(bit[31:0] poly, int width, bit[31:0] init, bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the CRC initial value.
   *
   * @return The CRC initial value.
   */
  extern virtual function bit[31:0] get_crc_initial_value();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC initial value.
   *
   * @param init The new CRC initial value.
   */
  extern virtual function void set_crc_initial_value(bit[31:0] init);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the crc polynomial value.
   *
   * @return The CRC polynomial value.
   */
  extern virtual function bit[31:0] get_crc_polynomial();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC polynomial value.
   *
   * @param poly The new CRC polynomial value.
   */
  extern virtual function void set_crc_polynomial(bit[31:0] poly);

  // ---------------------------------------------------------------------------
  /**
   * This methods applies a byte to the CRC algorithm.
   * 
   * @param value Value to be applied to the CRC algorithm
   * @param init Optional argument that signifies that the CRC value should be initialied
   *        before the value is applied.
   */
  extern virtual function void apply_byte_to_crc(bit[7:0] value, bit init = 0);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the calculated CRC value.
   */
  extern virtual function bit[31:0] get_crc();

//svt_vipdk_end_exclude
  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #implementation property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #implementation transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_implementation_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #implementation property.
   */
  extern function `SVT_TRANSACTION_TYPE get_implementation(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method first sets up the causal reference for the implementation_xact
   * and then saves the implementation_xact in the #implementation transaction
   * list.
   */
  extern virtual function void store_context(`SVT_TRANSACTION_TYPE implementation_xact);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #causal_xact reference to point to the
   * causal transaction.
   */
  extern virtual function void store_causal_ref(`SVT_TRANSACTION_TYPE causal);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #causal_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null.
   */
  extern virtual task wait_for_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null, but only for the indicated number of time units.
   * It gives up if the value isn't updated within the specificied number of
   * time units.
   *
   * @param wait_time The number of time units to wait before giving up.
   */
  extern virtual task wait_for_causal_ref_thru_time_unit(int wait_time = 1);

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #implementation transaction list, as well as any
   * causal references which may have been setup.
   */
  extern function void clear_implementation();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method is used to enable/disable the trace capability. The base
   * class implementation always returns 0, indicating that this feature is
   * disabled. Extended classes wishing to support this feature must
   * consider whether this feature should always be enabled, be enabled for
   * all instances of the extended class, or enabled on a per instance basis.
   * This method, and any supporting data fields, etc., in the extended class
   * should be implemented in accordance with these decisions.
   */
  extern virtual function bit enable_trace();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #trace property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #trace transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_trace_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #trace property.
   */
  extern function `SVT_TRANSACTION_TYPE get_trace(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method is used to add trace_xact to the #trace transaction list
   * associated with this transaction. It first sets up our transaction as the
   * #original_xact reference for the trace_xact transaction, and then saves the 
   * trace_xact transaction in the #trace transaction list.
   * @param trace_xact The transaction to be added to the #trace transaction list.
   * @param copy Bit indicating whether the trace_xact or a copy should be stored.
   * @param copy_depth If copy set to 1, indicates whether the copy should be done
   * with a DEEP or SHALLOW copy, thereby including or excluding objects such as
   * #implementation.
   */
  extern virtual function void store_trace(`SVT_TRANSACTION_TYPE trace_xact, bit copy = 1, recursive_op_enum copy_depth = SHALLOW);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #original_xact reference to point to the
   * original transaction.
   */
  extern virtual function void store_original_ref(`SVT_TRANSACTION_TYPE original);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #original_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_original_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #trace transaction list, as well as any
   * original references which may have been setup.
   */
  extern function void clear_trace();

  // ---------------------------------------------------------------------------
  /**
   * Determines if this transaction can reasonably be expected to function correctly
   * on the supplied cfg object.
   * 
   * @param cfg The svt_configuration to examine for supportability.
   * @param silent Indicates whether issues with the configuration should be reported.
   *
   * @return Returns '1' if sequence is supported by the configuration, '0' otherwise.
   */
  extern virtual function bit is_supported(svt_configuration cfg, bit silent = 0);

`ifdef SVT_UVM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to return a do_not_randomize value for the transaction.
   *
   * @return Always returns '0'.
   */
  extern virtual function bit get_do_not_randomize();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to start a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_start(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);

  // ---------------------------------------------------------------------------
  /**
   * Utility method used to finish a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_finish(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);
`endif

  // ---------------------------------------------------------------------------
  /**
   * Method to add this transaction to #recycled_xact, which is a queue of
   * recycled transactions. Transactions should only be recycled if the client
   * is sure that the transaction is no longer in use.
   */
  extern virtual function void recycle_me();

  // ---------------------------------------------------------------------------
  /**
   * Method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern virtual function `SVT_TRANSACTION_TYPE get_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * Static method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern static function `SVT_TRANSACTION_TYPE find_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * This method create/update the 'svt_pa_object_data' object data for use in the XML/FSDB which provides
   * basic information about the object. The transaction extension adds begin and end time information
   * to the object if provided by the base class.
   *
   * @param uid Optional string indicating the unique identification value for object. If not 
   * provided uses the 'get_uid()' method  to retrieve the value. 
   * @param typ Optional string indicating the 'type' of the object. If not provided
   * uses the type name for the class.
   * @param parent_uid Optional string indicating the UID of the object's parent. If not provided
   * the method uses get_causal_ref() to obtain a handle to the parent and obtain a parent_uid.
   * If no causal reference found the method assumes there is no parent_uid. To cancel the
   * causal reference lookup completely the client can provide a parent_uid value of
   * `SVT_DATA_UTIL_UNSPECIFIED. If `SVT_DATA_UTIL_UNSPECIFIED is provided the method assumes
   * there is no parent_uid.
   * @param channel Optional string indicating an object channel. If not provided
   * or set to `SVT_DATA_UTIL_UNSPECIFIED the method assumes there is no channel.
   *
   * @return The 'svt_pa_object_data' required for PA header.
   */
  extern virtual function svt_pa_object_data get_pa_obj_data(string uid = "", string typ = "",
                                                           string parent_uid = "", string channel = "");

  // ---------------------------------------------------------------------------
  /**
   * This method overides the super method to set the 'active_xml_start_time' to support backward
   * compatibility and call the super class method to save the object properties.
   *
   * @param writer Object which takes care of the basic write operations.
   * @param object_block_desc String that is placed in the 'object' block created for
   * the data object. If not specified method relies on get_xml_object_block_desc() method
   * to get default description.
   * @param prefix String to be placed at the beginning of each line in the file.
   *
   * @return Indicates success (1) or failure (0) of the save.
   */
  extern virtual function bit save_prop_vals_to_xml(svt_xml_writer writer, string object_block_desc = "", string prefix = "");

  // ---------------------------------------------------------------------------
  /** Method provided to get clean time values to support XML, FSDB and other output. 
   * This method has been deprecated. Clients should override 'get_clean_realtimes' 
   * instead of 'get_clean_times'.
   */
  extern virtual function void get_clean_times(ref time start_time, ref time end_time);

  // ---------------------------------------------------------------------------
  /** Method provided to get clean real time values to support XML, FSDB and other output. */
  extern virtual function void get_clean_realtimes(ref realtime start_time, ref realtime end_time);

  // ---------------------------------------------------------------------------
  /**
   * Method provided to get the transaction status for inclusion in XML and other output.
   *
   * @param status The overall transaction status.
   * @return Indicates whether the status was available (1) or not (0) and therefore whether
   * the status field should be used.
   */
  extern virtual function bit get_xact_status(ref status_enum status);

  // ****************************************************************************
  // Command Support Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow command
   * code to retrieve the value of a single named property of a data class derived from this
   * class. If the <b>prop_name</b> argument does not match a property of the class, or if the
   * <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1', with the value of the <b>prop_val</b>
   * argument assigned to the value of the specified property. However, If the property is a
   * sub-object, a reference to it is assigned to the <b>data_obj</b> (ref) argument.
   * In that case, the <b>prop_val</b> argument is meaningless. The component will then
   * store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val A <i>ref</i> argument used to return the current value of the property,
   * expressed as a 1024 bit quantity. When returning a string value each character
   * requires 8 bits so returned strings must be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @param data_obj If the property is not a sub-object, this argument is assigned to
   * <i>null</i>. If the property is a sub-object, a reference to it is assigned to
   * this (ref) argument. In that case, the <b>prop_val</b> argument is meaningless.
   * The component will then store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   * @return A single bit representing whether or not a valid property was retrieved.
   */
  extern virtual function bit get_prop_val(string prop_name, ref bit [1023:0] prop_val, input int array_ix, ref `SVT_DATA_TYPE data_obj);

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow
   * command code to set the value of a single named property of a data class derived from
   * this class. This method cannot be used to set the value of a sub-object, since sub-object
   * consruction is taken care of automatically by the command interface. If the <b>prop_name</b>
   * argument does not match a property of the class, or it matches a sub-object of the class,
   * or if the <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1'.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val The value to assign to the property, expressed as a 1024 bit quantity.
   * When assigning a string value each character requires 8 bits so assigned strings must
   * be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @return A single bit representing whether or not a valid property was set.
   */
  extern virtual function bit set_prop_val(string prop_name, bit [1023:0] prop_val, int array_ix);

  // ---------------------------------------------------------------------------
  /**
   * Simple utility used to convert string property value representation into its
   * equivalent 'bit [1023:0]' property value representation. Extended to support
   * encoding of enum values.
   *
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort.
   *
   * @return Status indicating the success/failure of the encode.
   */
  extern virtual function bit encode_prop_val(string prop_name, string prop_val_string, ref bit [1023:0] prop_val, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * Provide string values for exception_list_opts and protocol_xacts_opts.
   * 
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort. 
   *
   * @return The enum value corresponding to the desc.
   */
  extern virtual function bit decode_prop_val(string prop_name, bit [1023:0] prop_val, ref string prop_val_string, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the primitive data fields in the object. The svt_pattern_data::name
   * is set to the corresponding field name, the svt_pattern_data::value is set
   * to 0.
   *
   * @return An svt_pattern instance containing entries for all of the data fields.
   */
  extern virtual function svt_pattern do_allocate_pattern();

`ifdef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the data fields in the object that are to be included in the object's
   * XML output.
   *
   * @return An svt_pattern instance containing entries for all of the fields
   * required for XML output of the data object.
   */
  extern virtual function svt_pattern allocate_xml_pattern();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Extension of the `SVT_TRANSACTION_OBJECT_TYPE::convert2string() method needed so that
   * extensions of this class can be used with the comparator classes.
   */
  extern virtual function string convert2string();

  // ---------------------------------------------------------------------------
  /**
   * Method used to set #comp_comparer, defining the function of the comp() compare.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  extern virtual function void set_comp_comparer(`SVT_XVM(comparer) comp_comparer);

  // ---------------------------------------------------------------------------
  /**
   * Implementation of the comp() method needed so that extensions of this class
   * can be used with the comparator classes.
   */
  extern virtual function bit comp(`SVT_TRANSACTION_TYPE to);
`endif

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
WHNSBvq7hpvFlBBXAqJBAEgrCe5wkzbPubfntrmOszM9fB08tzx24fxwWrmTbllp
bOas50mgV8Md+46cyFjqpNJ+Tzc8lKjvWbJbA311JCdi5ENc2gGRjIBqBTxlmx36
0RWwU1bfKG4/ZGzgUckfbrFYQKWwUYQ/emw8T2OK3B8pQz/eVzUURA==
//pragma protect end_key_block
//pragma protect digest_block
EF8dWH0NnfCQNnUxt12bd490GcI=
//pragma protect end_digest_block
//pragma protect data_block
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

//pragma protect end_data_block
//pragma protect digest_block
w3okRCID9tXBmGrzLCbhzS907tA=
//pragma protect end_digest_block
//pragma protect end_protected
  
//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
3fPff8AleC7eTBi1PixjbMYfg6iZasndLPLg28kUz05pd5te/Rj+Dngmpx6PJPe2
NVWgO4J3u4XHy2GHxXvY//cpTbizY+CYT7CWWR41GU0eqKxP6ro+LIowysWX+YEF
7L8gtkRyF7ChwCIO6g9t+vhtEcweWX5g08yxdwMpX397d1JUbmZCCA==
//pragma protect end_key_block
//pragma protect digest_block
2VZM2oFyJO1JffHdvO7EWdpHPyI=
//pragma protect end_digest_block
//pragma protect data_block
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
//pragma protect end_data_block
//pragma protect digest_block
4Ak804SF9UDYLp58UUw9GcaA1gU=
//pragma protect end_digest_block
//pragma protect end_protected

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the beginning of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_begin();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_end();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of the last transaction
   * in the implementation queue.
   */
  extern virtual task wait_end_last_implementation();

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Bridge method providing a single call to get integral recording transaction 
   * handle for this sequence.
   */
  extern virtual function int svt_get_tr_handle();
`endif

  // ---------------------------------------------------------------------------
  /** Method to get the is_internal value. */
  extern virtual function bit get_is_internal();

  // ---------------------------------------------------------------------------
  /** Method to set the is_internal value. */
  extern virtual function void set_is_internal(bit is_internal = 1);
      
  // ---------------------------------------------------------------------------
endclass

// =============================================================================

//svt_vcs_lic_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
75vThAYiT30ID1WH4R+auwKCADE9RFGogu0j0czI08/jpmnHIFhsepeYx5mcXtkB
8ud6H7Uve67VwMoDWH7niY1askrfp0FGLA8q+PAwc+F223MXrdFq+yst6CpENr5s
hyMu0pQ072HtePzrrC28kmNol1hbnRA0rBltDoWxYSHRctjAWtJXVw==
//pragma protect end_key_block
//pragma protect digest_block
Cdm3bQXUxW+5Y8TosDjvC/mbsWQ=
//pragma protect end_digest_block
//pragma protect data_block
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

//pragma protect end_data_block
//pragma protect digest_block
fDQfSfo92xzzkhv655+A5KRsh6s=
//pragma protect end_digest_block
//pragma protect end_protected

//vcs_vip_protect
//pragma protect begin_protected
//pragma protect key_keyowner=Cadence Design Systems.
//pragma protect key_keyname=CDS_KEY
//pragma protect key_method=RC5
//pragma protect key_block
l+MUbr4Jb1dLyggfv5tr+IpP1ZXKeLA5NcfB2Xy6vqkquY77Kvj5+cAQYMA8zIqj
b1UeIa0XGB9ocrV+JXKNB7MTtKJS9EN+5mNdCwbaMGJir2gY+yXGEE5uovL4qFFW
YZJ3MieyDehHeGdjOzvQejA83CbCA0LeyOhtXiT2kHGyR74HeyGFUQ==
//pragma protect end_key_block
//pragma protect digest_block
OTS6JNNHpPjNkt4yPKZsChdUKtw=
//pragma protect end_digest_block
//pragma protect data_block
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

//pragma protect end_data_block
//pragma protect digest_block
yrAB2igfKa6Wknc924qKhbLuarI=
//pragma protect end_digest_block
//pragma protect end_protected

`endif // GUARD_SVT_TRANSACTION_SV


//=======================================================================
// COPYRIGHT (C) 2007-2017 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

`ifndef GUARD_SVT_TRANSACTION_SV
`define GUARD_SVT_TRANSACTION_SV

`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_cmd_defines)

`include `SVT_SOURCE_MAP_LIB_SRC_SVI(R-2020.12,svt_data_util)

`ifdef SVT_VMM_TECHNOLOGY
typedef class svt_notify;
`else
typedef class svt_non_abstract_report_object;
`endif

// The `SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING macro put in place to make
// documentation more re-usable.  It has no functional behavior.

`ifdef SVT_UVM_TECHNOLOGY
 // If using UVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 `define SVT_TRANSACTION_STARTED_NOTIFY uvm_transaction::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY uvm_transaction::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING UVM_DISABLE_AUTO_ITEM_RECORDING
 `define SVT_TRANSACTION_OBJECT_TYPE uvm_object
`elsif SVT_OVM_TECHNOLOGY
 // If using OVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 // NOTE: We add begin_event/end_event in OVM
 `define SVT_TRANSACTION_STARTED_NOTIFY svt_sequence_item::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY svt_sequence_item::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING svt_disable_auto_item_record
 `define SVT_TRANSACTION_OBJECT_TYPE ovm_object
`else
 // If using VMM technology then extend svt_data
 `define SVT_TRANSACTION_BASE_TYPE svt_data
 `define SVT_TRANSACTION_TYPE svt_transaction
 `define SVT_TRANSACTION_STARTED_NOTIFY vmm_data::STARTED
 `define SVT_TRANSACTION_ENDED_NOTIFY vmm_data::ENDED
 `define SVT_TRANSACTION_START_TIME start_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING <undefined>
 `define SVT_TRANSACTION_OBJECT_TYPE
`endif

//svt_vipdk_exclude
//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
TJoDdUZLkRt8a8IcXfMrnxfmLsgciBgTxQBVqHZ53lboKXb/tbu1md29bNuksbkR
AHoPmIlLIWki5+bru9MuYsLWmK+96jVUiYWAaubgjbDaQwY5tSfiusqSejNKNnaM
joJ/McEDjgD+WPvNqsx/QEsaq2RQG5Htw4g9oOlZnRw=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 334       )
4CkxFtz+UXsc9eeOk7EhyYzSgRt54WjSQlP7NgJHb+iV9mNI4SpM0cv/XIAe21RS
W4ShoWCw8Hn1q4FCWCeh6FeznHNk1ibv2Ei/4Bl8Ahj9qlqHU886EYu/T4CCuDjU
RsVcLKtWmyTGsV+arc4hFvebZjNht+lp4Cp5btuJhdLmAibCxcc0PJVoZLsipmAZ
FaK/NavoaMEkO8pkyCBX5Dn3RNOT9tz3HTvJ74KI8ubeE2/5tcv2dYATJfkZcTMz
i5PKmP0EVXwgKUMmhLLRiErftlxtwU0maAGuqlCtWQmN1LjyXyydrUUYyD8QSwkf
S3g8ILqfdhf/W9Nf3/fYWbW+SqTNMuXd4/pt15OqwukJ11utyXmwHAv0ZMSFhE3d
hXKY2L3FzAUmoXZQV40YlryVjm6PVIBLAbgz8IF0BLbe97DawQUNU/kAsOCxBCim
`pragma protect end_protected

`ifdef SVT_VMM_TECHNOLOGY
/**
 * This macro can be used to create a simple "one channel" multi-stream
 * scenario class which implements its scenario via a contained
 * atomic scenario class.
 */
`define SVT_TRANSACTION_MS_SCENARIO(class_name) \
class class_name``_ms_scenario extends svt_dynamic_ms_scenario; \
 \
  /** Properly typed scenario implementing the details of the scenario. */ \
  rand class_name``_scenario contained_scen; \
 \
  /** Name for the channel associated with this multi-stream scenario. */ \
  string chan_name = ""; \
 \
  /** Indicates whether this scenario should wait for the completion of the transactions generated by the scenario. */ \
  bit throttle = 0; \
 \
  /** Controls how many times the scenario is used. -1 indicates no limit, non-negative values define hard limits. */ \
  int execute_limit = -1; \
 \
  /** Used in conjunction with execute_limit, tracking how many times the scenario has been executed. */ \
  int execute_cnt = 0; \
 \
  /** Setup delay applied prior to initiating the transactions in the scenario. */ \
  real setup = 0.0; \
 \
  /** Minimum setup delay value used to define one end of the range for setup delays. */ \
  real setup_min = 0.0; \
 \
  /** Maximum setup delay value used to define one end of the range for setup delays. */ \
  real setup_max = 0.0; \
 \
  /** Temporary used during randomization to allow the setup delay to be randomized */ \
  rand longint unsigned setup_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_max_longint; \
 \
  /** Hold delay, in simulation time units, applied after initiating the transactions in the scenario and waiting for their completion (i.e., if #throttle set to 1). */ \
  real hold = 0.0; \
 \
  /** Minimum hold delay value used to define one end of the range for hold delays. */ \
  real hold_min = 0.0; \
 \
  /** Maximum hold delay value used to define one end of the range for hold delays. */ \
  real hold_max = 0.0; \
 \
  /** Temporary used during randomization to allow the hold delay to be randomized */ \
  rand longint unsigned hold_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_max_longint; \
 \
  /** VMM ID associated with this scenario. */ \
  int  SCENARIO_ID; \
 \
  /** Defines the weight to be applied to the delays which make up the lower sidewall of the overall delay range. */ \
  int LOWER_DELAY_wt = 1000; \
 \
  /** Defines the weight to be applied to the delays in the middle of the delay range, between the lower and upper sidewalls. */ \
  int MIDDLE_DELAY_wt = 1; \
 \
  /** Defines the weight to be applied to the delays which make up the upper sidewall of the overall delay range. */ \
  int UPPER_DELAY_wt = 100; \
 \
  /** Defines what percentage of the overall delay range which should be set aside for each of the two sidewalls, lower and upper. */ \
  int SIDEWALL_PERCENT = 10; \
 \
  constraint reasonable_scen_length { \
    this.contained_scen.length > 0; \
  } \
 \
  constraint reasonable_setup \
  { \
    this.setup_longint dist { \
      `SVT_BATHTUB_DIST(this.setup_min_longint,this.setup_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
  constraint reasonable_hold \
  { \
    this.hold_longint dist { \
      `SVT_BATHTUB_DIST(this.hold_min_longint,this.hold_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
`ifdef SVT_PRE_VMM_11 \
  function new(string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(); \
`else \
  function new(`VMM_SCENARIO parent = null, string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(parent); \
`endif \
    begin \
      string scen_tag = (contained_scen == null) ? "CONTAINED_ATOMIC_SCENARIO" : "CONTAINED_SCENARIO"; \
      if (contained_scen == null) begin \
        /* Create an atomic scenario as the default scenario */ \
        class_name``_atomic_scenario atomic_scen = new(); \
        this.contained_scen = atomic_scen; \
      end else begin \
        this.contained_scen = contained_scen; \
      end \
      if (factory != null) begin \
        this.contained_scen.using = factory; \
      end \
      this.chan_name = chan_name; \
      this.throttle = throttle; \
      SCENARIO_ID = this.define_scenario(scen_tag,1); \
      this.scenario_kind = SCENARIO_ID; \
      this.length = 1; \
      this.repeated = 0; \
      this.log.is_above(this.contained_scen.log); \
    end \
  endfunction \
 \
  local virtual function string this_class_name(); \
    begin \
      return {`SVT_DATA_UTIL_ARG_TO_STRING(class_name), "_ms_scenario"}; \
    end \
  endfunction \
 \
  virtual task execute(ref int n); \
    begin \
      class_name``_channel out_chan; \
      int unsigned n_inst; \
      bit ready_to_apply = 0; \
      bit applied = 0; \
      if (this.execute_limit_exceeded()) begin \
        `svt_verbose("execute", $sformatf("The current execute_cnt (%0d) exceeds the execute_limit (%0d). Nothing to execute.", \
                                    this.execute_cnt, this.execute_limit)); \
        n = 0; \
      end else if (!$cast(out_chan, get_channel(this.chan_name))) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) could not be found or is not of type %0s_channel. Unable to continue.", \
                                  this.chan_name, `SVT_DATA_UTIL_ARG_TO_STRING(class_name))); \
        n = 0; \
      end else if (out_chan == null) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) is null. Unable to continue.", this.chan_name)); \
        n = 0; \
      end else begin \
        `svt_verbose("execute", $sformatf("Generated scenario (%0d, %0d) directed at channel %0s", this.stream_id, this.scenario_id, this.chan_name)); \
        if (this.setup > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0f", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0t(%0f)", this.setup, this.setup)); \
`endif \
          #this.setup; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0f is complete", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0t(%0f) is complete", this.setup, this.setup)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Setup is %0f, so not delaying execution.", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Setup is %0t(%0f), so not delaying execution.", this.setup, this.setup)); \
`endif \
        end \
        fork \
          begin \
            `svt_verbose("execute", $sformatf("About to apply %0d xacts to out_chan %0s for scenario (%0d, %0d).", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            while (!ready_to_apply) begin \
              @ ready_to_apply; \
            end \
            this.contained_scen.apply(out_chan, n_inst); \
            `svt_verbose("execute", $sformatf("Applied %0d xacts to out_chan %0s for scenario (%0d, %0d)", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            applied = 1; \
          end \
          begin \
            if (this.throttle) begin \
              bit orig_tee_mode = out_chan.tee_mode(1); \
              class_name last; \
              fork begin /* disable fork block */ \
              fork \
                begin \
                  while (!applied) begin \
                    class_name next; \
                    ready_to_apply = 1; \
                    `svt_verbose("execute", $sformatf("tee'ing next transaction out of out_chan %0s", this.chan_name)); \
                    out_chan.tee(next); \
                    /* Make sure we see something before attempting to set 'last' */ \
                    last = next; \
                    `svt_verbose("execute", $sformatf("tee'ed transaction from out_chan %0s", this.chan_name)); \
                  end \
                end \
                begin \
                  `svt_verbose("execute", $sformatf("waiting for applied on out_chan %0s", this.chan_name)); \
                  @ applied; \
                  `svt_verbose("execute", $sformatf("waited for applied on out_chan %0s", this.chan_name)); \
                end \
              join_any \
              disable fork; \
              end join_any /* disable fork block */ \
              void'(out_chan.tee_mode(orig_tee_mode)); \
              if ((last != null) && (!last.notify.is_on(vmm_data::ENDED))) begin \
                `svt_verbose("execute", $sformatf("waiting for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
                last.notify.wait_for(vmm_data::ENDED); \
                `svt_verbose("execute", $sformatf("waited for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
              end \
              `svt_verbose("execute", $sformatf("throttle of out_chan %0s is complete", this.chan_name)); \
            end else begin \
              ready_to_apply = 1; \
              `svt_verbose("execute", $sformatf("scenario for out_chan %0s setup with throttle = 0", this.chan_name)); \
            end \
          end \
        join \
        `svt_verbose("execute", $sformatf("Applied %0d instances to out_chan %0s", n_inst, this.chan_name)); \
        if (this.hold > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0f", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0t(%0f)", this.hold, this.hold)); \
`endif \
          #this.hold; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0f is complete", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0t(%0f) is complete", this.hold, this.hold)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Hold is %0f, so not delaying completion.", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Hold is %0t(%0f), so not delaying completion.", this.hold, this.hold)); \
`endif \
        end \
        n += n_inst; \
        this.execute_cnt++; \
      end \
    end \
  endtask \
 \
  virtual function string psdisplay(string prefix = ""); \
    begin \
      psdisplay = { super.psdisplay(prefix), "\n" }; \
      psdisplay = { psdisplay, prefix, "chan_name = ", this.chan_name, "\n" }; \
      psdisplay = { psdisplay, prefix, $sformatf("throttle = %0b\n", throttle) }; \
      psdisplay = { psdisplay, this.contained_scen.psdisplay(prefix) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SCENARIO_ID = %0d\n", SCENARIO_ID) }; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0f\n", this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0f\n", this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0f\n", this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0f\n", this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0f\n", this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0f\n", this.hold_max) }; \
`else \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0t(%0f)\n", this.setup, this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0t(%0f)\n", this.setup_min, this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0t(%0f)\n", this.setup_max, this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0t(%0f)\n", this.hold, this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0t(%0f)\n", this.hold_min, this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0t(%0f)\n", this.hold_max, this.hold_max) }; \
`endif \
      psdisplay = { psdisplay, prefix, $sformatf("LOWER_DELAY_wt = %0d\n", LOWER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("MIDDLE_DELAY_wt = %0d\n", MIDDLE_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("UPPER_DELAY_wt = %0d\n", UPPER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SIDEWALL_PERCENT = %0d\n", SIDEWALL_PERCENT) }; \
    end \
  endfunction \
 \
  virtual function vmm_data copy(vmm_data to = null); \
    begin \
      class_name``_ms_scenario cpy = null; \
 \
      if (to == null) begin \
        cpy = new(); \
      end else if (!$cast(cpy, to)) begin \
        `svt_fatal("copy", $sformatf("Cannot copy to instance that is not of type %0s", this_class_name())); \
      end \
 \
      if (cpy != null) begin \
        void'(super.copy(cpy)); \
        if (!$cast(cpy.contained_scen,this.contained_scen.copy())) begin \
          `svt_fatal("copy", $sformatf("%0s failed attempting to copy contained scenario", this_class_name())); \
        end \
        cpy.chan_name = this.chan_name; \
        cpy.throttle = this.throttle; \
      end \
 \
      return cpy; \
    end \
  endfunction \
 \
  virtual function bit adjust_weights_per_cfg(); \
    adjust_weights_per_cfg = !execute_limit_exceeded(); \
  endfunction \
 \
  function void pre_randomize(); \
    begin \
      this.setup_longint = this.setup; \
      this.setup_min_longint = this.setup_min; \
      this.setup_max_longint = this.setup_max; \
 \
      this.hold_longint = this.hold; \
      this.hold_min_longint = this.hold_min; \
      this.hold_max_longint = this.hold_max; \
 \
      void'(adjust_weights_per_cfg()); \
 \
      /* Make sure the contained scenario info matches the scenario info */ \
      this.contained_scen.stream_id = this.stream_id; \
      this.contained_scen.scenario_id = this.scenario_id; \
      foreach (this.contained_scen.items[i]) begin \
        this.contained_scen.items[i].stream_id   = this.contained_scen.stream_id; \
        this.contained_scen.items[i].scenario_id = this.contained_scen.scenario_id; \
        this.contained_scen.items[i].data_id     = i; \
      end \
      super.pre_randomize(); \
    end \
  endfunction \
 \
  function void post_randomize(); \
    begin \
      super.post_randomize(); \
 \
      this.setup = this.setup_longint; \
      this.hold = this.hold_longint; \
    end \
  endfunction \
 \
  function bit execute_limit_exceeded(); \
    begin \
      execute_limit_exceeded = (execute_limit >= 0) && (execute_cnt >= execute_limit); \
    end \
  endfunction \
 \
endclass: class_name``_ms_scenario

`endif // ifdef SVT_VMM_TECHNOLOGY

//svt_vipdk_end_exclude
/** Add some customized logic to copy implementation and trace queues */
`define SVT_TRANSACTION_SHORTHAND_CUST_COPY \
`ifdef SVT_VMM_TECHNOLOGY \
  if (do_what == DO_COPY) begin \
    svt_transaction_copy_hook(this.__vmm_rhs); \
  end \
`endif

/** Container which automates exception generation for a transaction. */
`define SVT_TRANSACTION_EXCEPTION_LIST_INITIATOR(classname) \
/** Exception list initiator for classname transaction */ \
class classname``_exception_list_initiator extends classname; \
  rand classname``_exception_list rand_exception_list; \
 \
`ifndef SVT_VMM_TECHNOLOGY \
  /** Constructor */ \
  function new(string name=""); \
    super.new(name); \
  endfunction \
 \
  `svt_data_member_begin(classname``_exception_list_initiator) \
  `svt_data_member_end(classname``_exception_list_initiator) \
`endif \
 \
  /** pre_randomize method which can be insures rand_exception_list is non-null. */ \
  function void pre_randomize(); \
    super.pre_randomize(); \
    if (this.rand_exception_list == null) this.rand_exception_list = new(); \
    this.rand_exception_list.setup_randomized_exception(this.cfg, this); \
`ifdef SVT_MULTI_SIM_SKIPPED_PRE_RANDOMIZE \
    this.rand_exception_list.populate_exceptions(); \
`endif \
  endfunction \
 \
  /** pre_randomize method which removes the exception list if it is empty. */ \
  function void post_randomize(); \
    super.post_randomize(); \
    if ((this.rand_exception_list != null) && (this.rand_exception_list.num_exceptions > 0)) begin \
      this.exception_list = this.rand_exception_list; \
    end else begin \
      /* Clearing this.rand_exception_list can result in warning in some simulators, so leave it. */ \
      /* this.rand_exception_list = null; */ \
      this.exception_list = null; \
    end \
  endfunction \
 \
endclass

// =============================================================================
/**
 * Base class for all SVT model transaction data descriptor objects. As functionality
 * commonly needed for transactions for SVT models is defined, it will be implemented
 * (or at least prototyped) in this class.
 */
class `SVT_TRANSACTION_TYPE extends `SVT_DATA_TYPE;

  // ****************************************************************************
  // Enumerated Types
  // ****************************************************************************

//svt_vipdk_exclude
`ifndef SVT_VMM_TECHNOLOGY
  /**
   * Enum used to provide compatibility layer for supporting vmm_data notify types in UVM.
   * SHOULD ONLY BE USED IN SUITES IMPLEMENTED TO UTILIZE UVM/VMM BRIDGE TECHNOLOGIES.
   */
  typedef enum int {EXECUTE = 999_999,
                    STARTED = 999_998,
                    ENDED = 999_997
                    } notifications_e;
`endif

//svt_vipdk_end_exclude
`ifdef SVT_OVM_TECHNOLOGY
   ovm_event begin_event;
   ovm_event end_event;
`endif

  /**
   * Used to indicate status for a transaction or for a data flow within a
   * transaction. Transactions may be setup with a single status property, or they may
   * have multiple properties corresponding to the different data flows supported
   * by the transaction.
   *
   * For simple transactions or data flows where value acceptance occurs immediatly
   * upon the driving of the signal(s), the values will simply go from INITIAL->ACCEPT.
   * In simple situations which require a handshake the values would be expected to
   * go from INITIAL->ACTIVE->ACCEPT. Note that if a handshake is required, but the
   * handshake occurs immediately, the status will only go through INITIAL->ACCEPT.
   *
   * PARTIAL_ACCEPT normally comes into play if the transaction or data flow involves
   * multiple iterations (e.g., burst transactions or transactions with multiple
   * beats). In this situation the status will go to PARTIAL_ACCEPT as each iteration
   * is completed, and back to ACTIVE whenever a new iteration is begun. The status
   * will only go to ACCEPT once the final iteration is complete.
   *
   * For example a two beat burst with no handshake would be expected to go through
   * INITIAL->PARTIAL_ACCEPT->ACCEPT. A two beat burst with a handshake would be
   * expected to to through INITIAL->ACTIVE->PARTIAL_ACCEPT->ACTIVE->ACCEPT.
   *
   * A transaction might also cycle between ACTIVE and PARTIAL_ACCEPT it the protocol
   * defines several phases. For example a transaction that is made up of multiple
   * distinct packets (e.g., header, data, handshake) might go to ACTIVE as a packet
   * is being transmitted, to to PARTIAL_ACCEPT when a packet is completed, cycle
   * between ACTIVE and PARTIAL_ACCEPT as the remaining packets are exchanged, and
   * only change to ACCEPT once the final packet is complete.
   *
   * Status fields for transactions or data flows with multiple iterations or phases
   * are partnered with 'next' counters reflecting the next iteration or phase. The
   * counter is incremented when a PARTIAL_ACCEPT or ACCEPT occurs, and can be used
   * in combination with the status field to recognize where the transaction is in
   * terms of processing.
   *
   * For example a status of ACTIVE combined with a next value of 0 indicates that
   * the first beat of the transaction, beat 0, is on the bus. A status of ACTIVE
   * combined with a next value of 3 indicates that the 4th beat of the transaction,
   * beat 3, is on the bus. A status of PARTIAL_ACCEPT combined with a next value
   * of 1 indicates that there is no activity on the bus, but that the first beat,
   * beat 0, has been accepted.
   *
   * In protocols where it is possible for a transaction to be rejected, and then
   * retried by the transmitter, the RETRY status has been provided. This status
   * Corresponds for the most part to the INITIAL state, i.e., the transaction is
   * not active, but has the added recognition that the transaction was tried at
   * least once before, and that the component is waiting to re-attempt transaction
   * transmission.
   *
   * DISABLED is specified upon transaction construction if the design is configured
   * to not support a particular part of the protocol which might have been tracked. For
   * example if there are multiple data flows, and the transactions are designed
   * to track these data flows individually (e.g., via status fields for the individual
   * data flows), but one of these data flows is disabled by the configuration, then the
   * status field for that data flow would be set to DISABLED.
   *
   * For transactions and data flows which are DISABLED, the corresponding next
   * counter remains at 0 throughout the transaction.
   *
   * The CANCELLED status occurs if an iteration is queued up but not initiated on the bus,
   * and it is cancelled prior to being placed on the bus. CANCELLED should only be used if
   * the component is designed such that it can return to this transaction and resume the
   * effort to place the CANCELLED iteration on the bus. Once the component restarts this
   * iteration the status is changed to ACTIVE.
   *
   * If the component is not designed to resume cancelled transactions, and is instead
   * designed to 'drop' these transactions, then it should instead mark the transaction
   * as ABORTED. Whenever a transaction is interrupted and dropped for any reason, it
   * should be marked as ABORTED.
   */
  typedef enum {
    INITIAL         = `SVT_CMD_XACT_STATUS_INITIAL,        /**< Data object initial (inactive) state */
    RETRY           = `SVT_CMD_XACT_STATUS_RETRY  ,        /**< Data object initial (inactive) state, but as the result of a retry */
    ACTIVE          = `SVT_CMD_XACT_STATUS_ACTIVE,         /**< Transaction or Data Flow values have been driven by one end of the bus */
    PARTIAL_ACCEPT  = `SVT_CMD_XACT_STATUS_PARTIAL_ACCEPT, /**< Transaction or Data Flow has been accepted either automatically or due to handshake */
    ACCEPT          = `SVT_CMD_XACT_STATUS_ACCEPT,         /**< All iterations or phases of the Transaction or Data Flow have been accepted */
    DISABLED        = `SVT_CMD_XACT_STATUS_DISABLED,       /**< Data Flow is not supported by this system, and therefore not included in this transaction */
    CANCELLED       = `SVT_CMD_XACT_STATUS_CANCELLED,      /**< Iteration or phase was started, but cancelled for some reason */
    ABORTED         = `SVT_CMD_XACT_STATUS_ABORTED         /**< Transaction or Phase interrupted by a protocol reset or other event */
   } status_enum;


  // ****************************************************************************
  // Local Data
  // ****************************************************************************

  /**
   * Reference to the higher level transaction that produced this transaction.
   * This is assigned by calling the store_context() method.
   */
  local `SVT_TRANSACTION_TYPE causal_xact;

  /**
   * Reference to the original (same level) transaction that resulted in the
   * attempt of this transaction.
   * This is assigned by calling the store_trace() method.
   */
  local `SVT_TRANSACTION_TYPE original_xact;

//svt_vipdk_exclude
  /**
   * Transaction cache used to reuse transactions without going through destruction
   * and construction.
   */
  static local `SVT_TRANSACTION_TYPE recycled_xact[$];

  /**
   * Flag used to signify that this transaction is being recycled or already recycled.
   */
  local bit is_recycled_xact = 0;

//svt_vipdk_end_exclude
  /**
   * Flag used to verify that pre_randomize and post_randomize are not blocked by extended classes.
   */
  local bit pre_post_randomize_handshake = 0;

  /** Flag used to differentiate internally generated transactions from testbench provided transactions. */
  local bit is_internal = 0;

  // ****************************************************************************
  // Public Data
  // ****************************************************************************

  /**
   * Reference to the lower level transactions that are created as a result of
   * processing this transaction.  This is assigned by calling the store_context()
   * method.
   */
  `SVT_TRANSACTION_TYPE implementation[$];

  /** Default factory used for creation of the implementation queue. */
  `SVT_TRANSACTION_TYPE default_implementation_xact_factory = null;

  /**
   * Trace of any transactions of the same type that were created as a result of
   * processing this transaction (e.g., due to retries, etc.). If enable_trace()
   * defined to return 0, then only contains 'last' traced transaction. If
   * enable_trace() defined to return 1, then contains all traced transactions.
   * Elements are added to this list via calls to store_trace().
   */
  `SVT_TRANSACTION_TYPE trace[$];

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the exception list object is not copied or compared (NULL), the
   * reference is copied and compared (SHALLOW), or whether the object is copied and
   * compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum exception_list_opts = DEEP;

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the lower level protocol references are not copied or compared (NULL),
   * the references are copied and compared (SHALLOW), or whether the objects are
   * copied and compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum protocol_xacts_opts = NULL;

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  // Time stamps used to describe the transaction start and end cycles, as well as the
  // individual phase start and end cycles.
  // ---------------------------------------------------------------------------

  /** Time at which this transaction was started */
  real start_time = 0;
  /** Time at which this transaction was ended */
  real end_time = 0;
`endif  

  /** Time at which this transaction was started recorded as a realtime value */
  realtime svt_begin_realtime = 0;

  /** Time at which this transaction was ended recorded as a realtime value */
  realtime svt_end_realtime = 0;

  /** Time at which this transaction was accepted recorded as a realtime value */
  realtime svt_accept_realtime = 0;

  /**
   * Local 'time' stores the current active start time of the object. 
   * This is used for backwards compatibility purposes. Should be removed when all
   * clients remove the 'save_prop_vals_to_xml' implementation and move to 'save_object_begin'
   * and 'save_object_data'.
   */
  realtime active_xml_start_time = -1;

`ifndef SVT_VMM_TECHNOLOGY

  /**
   * Comparer which is used to define the function of the comp() compare if provided.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  local `SVT_XVM(comparer) comp_comparer = null;

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
NPUKWMaQI8l+/fW0t9ucmoy4fWMWvQ3F1JnHRfT1MOKvwZsCECgogYp9gBQ9pseG
VVztwDbRhNGPs3jearNLpdW1TIVOcCyacBv3M1HDYMmBfA0TUq3WirJkMal/ZaWO
5Ot7XPME6LHj28mdeRAZR1C5JpLaKxM8uGrTJuekxzY=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 1473      )
SUANzN1rNHPdonPEhyBv2Ho7KEyj52QP4qDLWA/x9U7HCxTPaD5LX/hHlSOHy49e
V3SHZwJfhRMUQR8Ofk9hZORm/EvyIo/OlOhUjrEpMtLy5YkqRXNnmRMDD9zvISuk
AU6gd4p3bQzVpXIGZNTvifx2tLRwU+h4HUAvMujLMJvkR7gXEmqk9JDeVbhkVlkH
nHCgqJI2Wm9o4Ti8Od11IkH9H4JzdkZZ1WTP4IJHzuWefFpN/KyF3GLCtBm7VOHm
ooJDJYDwq/diNTGUtp4o8SY2TtSwowjFDCx/VSLAZpa2YoP1Xt8kMJiKpMMFlu5/
bbJEI5LTfgDvS4VdWPylIE8LXF9YA9XGaHbmwXijI0OVtCI9VkpL7LnefrQMHMR+
GihHhJwNyCxfLgR6fdeiUUJ5DGxQzl897Qr0d85Bsr71pIXo+G5r40SUluY0WpxM
IOz9Ge3l8YiciZx8xdleTJZAJZ2y9u/+YcxCcV4wqIpMgPYow1Y+ZAXE+mJ1NWF/
4RSrEk63o6JGi7CGTf5lf3vxQ48MeXmkRrNc4LXnWj6tQOTgId3+si/dlZfjXu+A
8ODQFZ/HFCafTB7NGuUDJ2eZyne57/qJvWP3uUsI5RtQK+0d9lroEMQEZYypJpb9
W/0qCMw5m5RLHcOxUZcdjMrl2AeO8FwEEopWzdnGpx2ug3WS6kYK/ZEqrG7skj2+
KyqajRmBvdHqZVjiX+9tqBZAef+OLJtkSWKSU+pjRJet1cAjaUVmOhcvUo3UGhYo
AGlwwzqBCibj4kgUogKGrgfbNb0VSKtxDLGFQfmQXye8sXVmyy35WUxrgWIcQlrg
cg3C6wgF8ha813HpuraA4u/rgGi2v2ja/ekNI8pcaAJF3YB9xv06tbyCHXGqshv8
0tSagMbaJobwlbPxnI91oEpBD6bEB8TnFxa1icTLwEOByMEbkBCPo6+dk73+yNvv
1kV2gFDjdyLJbCi2e8IREA/BETeo+jM0Pz5WgNEB7Ij6t/1yanwIk6Y256kKmyMw
1ex8aqR2z79DwpKvxeZQ2Jl8zhqoHbfKKMKiPTaM2+w25gHXu+FGZyto4RLUYYLr
3zdkKwMqjZ7XX1Rziei+wIHGFWDTRJIezUElwAs5ERi4i0KEA0QaRS5Ca9KbPNR0
Jsij4XUtgVwwa0T97BO6N+XFLDLwrAyG3M7jZyW/ywIYe+4DMHomHEEQqkiDG81t
GgJ2nt3nBTXlppEiONGJ2sXc+Y2aUeMXPM8AJF1ofm0yVg3eHuIeDFFrRKk1caKJ
PUP+fKAP85Nqzg+PMyhMAq0Neywa1oANbZ+OI/lxJLt5oAo689tkh2dO8DappFTQ
mwZSh4zPmyPdmQb9tuCLlYmBaGCMkL/RFuJdMaYZbYlMVKLo4G7S6k8TQtHJE6wi
MmBC5gW8vElI0hbOKe6xEyB64k0zYPSwpA2vkj+XuiXmTAbLKiQ/6xPIu+K3UfkL
KvuSjVe2+umtbF1n3TBVvWeU81QKVzdJSRKx/xvTVYDzLOf95RXoOo0AjHiaiyob
`pragma protect end_protected

`endif

`ifdef SVT_VMM_TECHNOLOGY
  `svt_vmm_data_new(`SVT_TRANSACTION_TYPE)
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_transaction class, passing the
   * appropriate argument values to the <b>svt_data</b> parent class.
   *
   * @param log An vmm_log object reference used to replace the default internal
   * logger. The class extension that calls super.new() should pass a reference
   * to its own <i>static</i> log instance.
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(vmm_log log = null, string suite_name = "");
`else
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_sequence_item class, passing the
   * appropriate argument values to the <b>svt_sequence_item_base</b> parent class.
   *
   * @param name Intance name for this object
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(string name = "svt_transaction_inst", string suite_name = "");
`endif

  // ****************************************************************************
  //   SVT shorthand macros 
  // ****************************************************************************
  `svt_data_member_begin(`SVT_TRANSACTION_TYPE)
    `svt_field_handle(causal_xact,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(implementation, `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_handle(original_xact,        `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(trace,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `SVT_TRANSACTION_SHORTHAND_CUST_COPY
  `svt_data_member_end(`SVT_TRANSACTION_TYPE)

  // ****************************************************************************
  // Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Override pre_randomize to implement the 'pre' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void pre_randomize ();

  //----------------------------------------------------------------------------
  /**
   * Override post_randomize to implement the 'post' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void post_randomize ();

  // ****************************************************************************
  // VMM Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Copies the object implementation queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_implementation (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

  //----------------------------------------------------------------------------
  /**
   * Copies the object trace queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_trace (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /**
   * Copies the object into to, allocating if necessay.
   * 
   * @param to Destination class for the copy operation
   */
  extern virtual function `SVT_DATA_BASE_TYPE do_copy(`SVT_DATA_BASE_TYPE to = null);

  // ---------------------------------------------------------------------------
  /**
   * Compares the object with to, based on the requested compare kind. Differences are
   * placed in diff.
   *
   * @param to vmm_data object to be compared against.
   * @param diff String indicating the differences between this and to.
   * @param kind This int indicates the type of compare to be attempted. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in comparisons of the non-static
   * data members. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_compare(vmm_data to, output string diff, input int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Returns the size (in bytes) required by the byte_pack operation.
   *
   * @param kind This int indicates the type of byte_size being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in a size calculation based on the
   * non-static fields. All other kind values result in a return value of 0.
   */
  extern virtual function int unsigned byte_size ( int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Packs the object into the bytes buffer, beginning at offset, based on the
   * requested byte_pack kind.
   *
   * @param bytes Buffer that will contain the packed bytes at the end of the operation.
   * @param offset Offset into bytes where the packing is to begin.
   * @param kind This int indicates the type of byte_pack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being packed and the return of an integer indicating the number of
   * packed bytes. All other kind values result in no change to the buffer contents, and a
   * return value of 0.
   */
  extern virtual function int unsigned do_byte_pack ( ref logic [7:0] bytes[], input int unsigned offset = 0, input int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Unpacks the object from the bytes buffer, beginning at offset, based on
   * the requested byte_unpack kind.
   *
   * @param bytes Buffer containing the bytes to be unpacked.
   * @param offset Offset into bytes where the unpacking is to begin.
   * @param len Number of bytes to be unpacked.
   * @param kind This int indicates the type of byte_unpack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being unpacked and the return of an integer indicating the number of
   * unpacked bytes. All other kind values result in no change to the exception contents,
   * and a return value of 0.
   */
  extern virtual function int unsigned do_byte_unpack ( const ref logic [7:0] bytes[], input int unsigned offset = 0, input int len = -1, input int kind = -1 );

  // ---------------------------------------------------------------------------
  /**
   * Hook called by the VMM shorthand macro after performing the automated 'copy'
   * routine.
   * 
   * @param to Destination class for teh copy operation
   */
  extern function void svt_transaction_copy_hook(`SVT_DATA_BASE_TYPE to = null);

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
FVmMzfGliPbybPG06t73geTbVjCQ4AJhMbX5UZeKeTAmtBw4sasafb0/LG1gJTkE
E89qfNL4pKP28scOnXLzdLVVSMlKDvD2yh7IGomYE8qsuaHA93sO8rXGUXm+wKc6
qi9GqEUN1ZfMsFL6TTAu0Xnoat63Yix54HtVM1vhTqU=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 2418      )
La3xCxJeJe8gQCnJqI4k8/oV1VSfWtjm0cK5Djlyb8lbVaqt/0llHwegLY+MY7dB
xPyh9RKtDCOct8hy+a8DYGtwXZoHEItQrbBoUQbj+Wq5NWFdVPdbblq89hzyuty1
xA5dVe3gwLqsbrbbxt2hbwOf3BkFr6f/zpYOxp2eoRqjHJfFaN724oMxGW5IEVQJ
UfNIwC32SYbu3CuDlAAg3aTlyoQCx2RnY3FvJOZH7tkrM9+DcrpArF6xB7cTiKMb
P+qxhj/sE1UPVnXEoMsm6pE8jfxKeZP2vgG0k2YVXrQ/BFgLltNAGbfeTdIxeTE9
54jqF11aTTl6BtSM9z9MP9H58Jzqi2gbgBInXPBj/xq1Fd6sC6diF3rbZZu3U2pv
RxtVE9DgnlY8Na2XKXLDHRg2AKpvnVDGjD5GxfxXTzakhTOnk81kt3JQdf6tucC4
RIXMG/FKmivR6/YrRQZdGtKJbYZxQxnLClEb4kIe0T82wsdzNRCzvELcsaouu3SY
FEvOr8QqOEcNNtBUgzcyHABOJq2jgY+/O0za5JD0gxTcK24j0fYhiDt7k72nAGhJ
JEpHvey/FGZyol4sR5aKLbiBsA3+18rx2OHjB3LbSvRy0X5cQT+sLt/HiM0q3n7K
XkMEIUq+ciz/Rt0iLITh+r8UavgSfy0RPO9t8VBEw+SsaMRJ/60Vjk7xicAN3nRM
WWugTN0N8i3TSXHRPC0q5sBYzVplA5dSVPq09veoIEpHHTKJ0fOdVe7sPevV2kE9
PNzS+uR0fgi4hS9kJHx/6Jp7yp2pakyd+CsOPDM/w7kaCArxVSlEZWGoMv9DVSGC
UrF6oC+mJ8Ctqj4dXh8kKEATITp1aodmEViXtBlckCLmnv2rzKymasexiwvazxyG
x3X+ezEoaW6+7u6RJbIGhN9VZV75Q9PvyAKCo+47DkyEEuGWhQMRKYbta7Ejxm1b
3x39MxkF3IKSn4ZLqMYb1kSL8/aDqYFyMynpxn9tcz2Ern6C0nhBxezlhsxIGoD8
DQ1ofKTQQWhMGrVXm43xeBtTEkJkdp3tOgbPUapNKxYDKIXPprWT2m7nMzWpT8sI
mh680I9zPiOD9RMpoT+dknk5+VR001xsd4UcdbvXNCGuZR+4tcqqFbKq59fho/oP
2M6Yk/sRUhi+7oKy4YteMuIUdhzxdxkx0j6wuZmIA8grZPKXRkb3OxuvGy/fKSGT
n9fo+o3F/S542E263KGglNWD1mcjazypWX99B653BGbF6MJGKNQ+l9DLEYtb49uA
`pragma protect end_protected 

`else

  // ---------------------------------------------------------------------------
  /** Override the 'do_copy' method to copy fields directly. */
  extern virtual function void do_copy(`SVT_XVM(object) rhs);

  // ---------------------------------------------------------------------------
  /** Override the 'do_compare' method to compare fields directly. */
  extern virtual function bit do_compare(`SVT_XVM(object) rhs, `SVT_XVM(comparer) comparer);

  // ---------------------------------------------------------------------------
  /**
   * Pack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_pack(`SVT_XVM(packer) packer);

  // ---------------------------------------------------------------------------
  /**
   * Unpack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_unpack(`SVT_XVM(packer) packer);

`endif

  // ---------------------------------------------------------------------------
  /**
   * Checks to see that the data field values are valid.
   *
   * @param silent bit indicating whether failures should result in warning messages.
   * @param kind This int indicates the type of is_avalid check to attempt. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in verification that the non-static
   * data members are all valid. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_is_valid(bit silent = 1, int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Clears the contents of the transaction so that it can safely be reused.
   */
  extern virtual function void clear();

  //----------------------------------------------------------------------------
  /**
   * Displays the meta information to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.  Extends class flexibility in choosing what
   * meta information should be displayed.
   */
  extern virtual function string psdisplay_meta_info ( string prefix = "" );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short_via_pattern( svt_pattern pttrn, string prefix = "", bit hdr_only = 0 );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short( string prefix = "", bit hdr_only = 0);

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet
   * generally necessary to uniquely identify that packet. This method
   * basically consists of two calls to psdisplay_short(), with hdr_only = 1 and
   * hdr_only = 0, to create the header and body information for the transaction.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   */
  extern virtual function string psdisplay_short_hdr_body(string prefix = "");

  //----------------------------------------------------------------------------
  /**
   * Returns a concise string (32 characters or less) that gives a concise
   * description of the data transaction. Can be used to represent the currently
   * processed data transaction via a signal.
   */
  extern virtual function string psdisplay_concise();

  //----------------------------------------------------------------------------
  /**
   * Displays the implementation list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_impl_elem_display Optional int used to control whether the method does
   * a full or partial display of the implementation queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_implementation ( string prefix = "", int max_impl_elem_display = -1 );

  //----------------------------------------------------------------------------
  /**
   * Displays the trace list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_trace_elem_display Optional int used to control whether the method does
   * a full or partial display of the trace queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_trace ( string prefix = "", int max_trace_elem_display = -1 );

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
el0LPgNmwzpL34Hy4epmRN52ATCEj9R2yrcvkdPDQmn9xEvYOm7gaoAesCSyxCjJ
u31A7qukjOvmluIgqNjQv2VOi1GOyHgqvgLOQ+hg0eEOVZoDeQ/A1ZrhabNLS9P7
2xQ2E7K3Y1t6Lbi55jPjvI2v4Iy0H0I26OsA2jMI114=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 3041      )
p69OroxEzA9Q/wg6vpUxW2PlPpJWpOqhHmsL/gbNwN07f65TaedUy9CjQoAiIcOC
MHptGhGwbDcHcuH9bBJD3Ft5UHjD+BGstAAC2qRmzw8R2WTwb9GrC+D+a3su3fFU
AYkoiI/4IAkO8EYBMg3SdsL4P6raeAMlK6k9H++oXGyRDKM2shz0oiz4T4T10yLF
+cUcGlZF5/TLdbIKzcePXiOYdWxvcDyb5TXYRUpMbqhgVXfEQEBCaWAeddfJRcMu
JZcdxA2x6/JdJmTpa8ytyBVdMJlnmtfzg7SAGFhozU5i1yvzrtps5Aj2AYCahFxI
s6FdoZgZr9IC5/1O37qgP3WoCmypxqGlkkZt42aTxE0iWFxDFQW27e+lzB//X0Ds
npyEPrIG5pnL9kAWsoSODOylRzTlAzl8tiNG6ItUd21mj8iJF2jIlJhU7ah+YGkq
qGZf+KdnIGPqj775x8xIocATjiVKPs8HkgBlIYkxrD6xbIqJQ15+TGzh2YtTbRGb
LCWRxMPpApAO40VvkmsCqZ688/atwIrUcnUBDM+Sc65cGt3uzTzAjX5Nj9G58Zsa
j3kKssq7/pdJb+RjSSSacYRNGKJVbP/upc3QZ8wDjXHNib6VoAcaHze9JS4MjOyi
7678EHOJT1nEnN4UF9nWzvXQeJUqDAJy7jIplTyUvnMhvFudgTUgThEICEy2AxXk
VJXHkgkiQb0JQbDmb9df6dvjld6Yapl7BunDXfM1d7cAHtE94wlIqp4BU015O0dx
ylWJgjAHvitwdfjQpohkC5dn1g0T8OTZ1jEcXmAv1AIjaR6bcpa6LrZkWR3JxbED
`pragma protect end_protected 

`ifndef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /** Method which filters out any accept time values of -1. */
  extern virtual function time get_safe_accept_time();
`endif

  //----------------------------------------------------------------------------
  /** Method which filters out any begin time values of -1. */
  extern virtual function time get_safe_begin_time();

  //----------------------------------------------------------------------------
  /** Method which filters out any end time values of -1. */
  extern virtual function time get_safe_end_time();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the begin event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_begin_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the end event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_end_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the accept event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_accept_realtime();

  // ****************************************************************************
  // Transaction Specific Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * Method to allocate a new data converter. Extended classes with additional
   * converter capabilities should overload this method to allocate an extended
   * data converter supporting these additional capabilities.
   */
  extern virtual function svt_data_converter allocate_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to return the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to provide access
   * to the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function svt_data_converter get_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to set the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to store away
   * the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function void set_data_converter(svt_data_converter new_converter);

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the 8b10b lookup tables.
   *
   * @param force_load Forces the 8b10b tables to be re-initialized.
   */
  extern virtual function void initialize_8b10b( bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Encodes an eight bit data value into its ten bit representation. The function
   * returns 0 and the output is unpredictable if Xs and Zs are passed in via the
   * argument.
   * 
   * @param data_in Eight bit value to be encoded.
   * @param data_k Flag that determines when the eight bit data represents a 
   * control character.
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected. If the encode operation fails then the value remains unchanged.
   * @param data_out Ten bit encoded data.
   */
  extern function bit encode_8b10b_data( input bit[7:0] data_in, input bit data_k, ref bit running_disparity, output bit[9:0] data_out );

  //----------------------------------------------------------------------------
  /**
   * Decodes a ten bit data value into its eight bit representation. The function
   * returns 0 and the output is unpredictable.
   * 
   * @param data_in Ten bit value to be decoded
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected.  If the encode operation fails then the value remains unchanged.
   * @param data_k Flag that determines when the Ten bit data represents a 
   * control character.
   * @param data_out Eight bit decoded data.
   */
  extern function bit decode_8b10b_data( input bit[9:0] data_in, ref bit running_disparity, output bit data_k, output bit[7:0] data_out );

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the scrambling seed.
   */
  extern function void initialize_scrambling();

  //----------------------------------------------------------------------------
  /**
   * Function is used for scrambling a byte of data. Following 
   * rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) All D-codes and K-codes are scrambled.
   * 3) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array that contains data to be scrambled.
   * @param lfsr Sixteen bit value with which the function encodes the data.
   * It is up to the entity calling this function to keep track of the 
   * lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array constaing the scrambled data.
   */
  extern function void scramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

  //----------------------------------------------------------------------------
  /**
   * Function is used for unscrambling a byte of data. The function returns 0 and
   * the output is unpredictable if Xs and Zs are passed in via the argument. 
   * Following rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array whose elements need to be unscrambled.
   * @param lfsr Is the Sixteen bit value with which the function decodes 
   * the data. It is up to the entity calling this function to keep track of 
   * the lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array containing unscrambled data.
   */
  extern function void unscramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

//svt_vipdk_exclude
  // ---------------------------------------------------------------------------
  /**
   * This method initializes the CRC lookup table, saves the CRC width, and the initial
   * CRC value.
   * 
   * @param poly Polynomial used to initialize the CRC lookup table
   * @param width Width of the CRC lookup table that is generated
   * @param init The CRC value is initialized to this value
   * @param force_load Forces the CRC algorithm to be re-initialized
   */
  extern virtual function void initialize_crc(bit[31:0] poly, int width, bit[31:0] init, bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the CRC initial value.
   *
   * @return The CRC initial value.
   */
  extern virtual function bit[31:0] get_crc_initial_value();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC initial value.
   *
   * @param init The new CRC initial value.
   */
  extern virtual function void set_crc_initial_value(bit[31:0] init);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the crc polynomial value.
   *
   * @return The CRC polynomial value.
   */
  extern virtual function bit[31:0] get_crc_polynomial();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC polynomial value.
   *
   * @param poly The new CRC polynomial value.
   */
  extern virtual function void set_crc_polynomial(bit[31:0] poly);

  // ---------------------------------------------------------------------------
  /**
   * This methods applies a byte to the CRC algorithm.
   * 
   * @param value Value to be applied to the CRC algorithm
   * @param init Optional argument that signifies that the CRC value should be initialied
   *        before the value is applied.
   */
  extern virtual function void apply_byte_to_crc(bit[7:0] value, bit init = 0);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the calculated CRC value.
   */
  extern virtual function bit[31:0] get_crc();

//svt_vipdk_end_exclude
  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #implementation property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #implementation transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_implementation_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #implementation property.
   */
  extern function `SVT_TRANSACTION_TYPE get_implementation(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method first sets up the causal reference for the implementation_xact
   * and then saves the implementation_xact in the #implementation transaction
   * list.
   */
  extern virtual function void store_context(`SVT_TRANSACTION_TYPE implementation_xact);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #causal_xact reference to point to the
   * causal transaction.
   */
  extern virtual function void store_causal_ref(`SVT_TRANSACTION_TYPE causal);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #causal_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null.
   */
  extern virtual task wait_for_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null, but only for the indicated number of time units.
   * It gives up if the value isn't updated within the specificied number of
   * time units.
   *
   * @param wait_time The number of time units to wait before giving up.
   */
  extern virtual task wait_for_causal_ref_thru_time_unit(int wait_time = 1);

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #implementation transaction list, as well as any
   * causal references which may have been setup.
   */
  extern function void clear_implementation();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method is used to enable/disable the trace capability. The base
   * class implementation always returns 0, indicating that this feature is
   * disabled. Extended classes wishing to support this feature must
   * consider whether this feature should always be enabled, be enabled for
   * all instances of the extended class, or enabled on a per instance basis.
   * This method, and any supporting data fields, etc., in the extended class
   * should be implemented in accordance with these decisions.
   */
  extern virtual function bit enable_trace();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #trace property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #trace transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_trace_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #trace property.
   */
  extern function `SVT_TRANSACTION_TYPE get_trace(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method is used to add trace_xact to the #trace transaction list
   * associated with this transaction. It first sets up our transaction as the
   * #original_xact reference for the trace_xact transaction, and then saves the 
   * trace_xact transaction in the #trace transaction list.
   * @param trace_xact The transaction to be added to the #trace transaction list.
   * @param copy Bit indicating whether the trace_xact or a copy should be stored.
   * @param copy_depth If copy set to 1, indicates whether the copy should be done
   * with a DEEP or SHALLOW copy, thereby including or excluding objects such as
   * #implementation.
   */
  extern virtual function void store_trace(`SVT_TRANSACTION_TYPE trace_xact, bit copy = 1, recursive_op_enum copy_depth = SHALLOW);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #original_xact reference to point to the
   * original transaction.
   */
  extern virtual function void store_original_ref(`SVT_TRANSACTION_TYPE original);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #original_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_original_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #trace transaction list, as well as any
   * original references which may have been setup.
   */
  extern function void clear_trace();

  // ---------------------------------------------------------------------------
  /**
   * Determines if this transaction can reasonably be expected to function correctly
   * on the supplied cfg object.
   * 
   * @param cfg The svt_configuration to examine for supportability.
   * @param silent Indicates whether issues with the configuration should be reported.
   *
   * @return Returns '1' if sequence is supported by the configuration, '0' otherwise.
   */
  extern virtual function bit is_supported(svt_configuration cfg, bit silent = 0);

`ifdef SVT_UVM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to return a do_not_randomize value for the transaction.
   *
   * @return Always returns '0'.
   */
  extern virtual function bit get_do_not_randomize();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to start a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_start(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);

  // ---------------------------------------------------------------------------
  /**
   * Utility method used to finish a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_finish(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);
`endif

  // ---------------------------------------------------------------------------
  /**
   * Method to add this transaction to #recycled_xact, which is a queue of
   * recycled transactions. Transactions should only be recycled if the client
   * is sure that the transaction is no longer in use.
   */
  extern virtual function void recycle_me();

  // ---------------------------------------------------------------------------
  /**
   * Method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern virtual function `SVT_TRANSACTION_TYPE get_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * Static method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern static function `SVT_TRANSACTION_TYPE find_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * This method create/update the 'svt_pa_object_data' object data for use in the XML/FSDB which provides
   * basic information about the object. The transaction extension adds begin and end time information
   * to the object if provided by the base class.
   *
   * @param uid Optional string indicating the unique identification value for object. If not 
   * provided uses the 'get_uid()' method  to retrieve the value. 
   * @param typ Optional string indicating the 'type' of the object. If not provided
   * uses the type name for the class.
   * @param parent_uid Optional string indicating the UID of the object's parent. If not provided
   * the method uses get_causal_ref() to obtain a handle to the parent and obtain a parent_uid.
   * If no causal reference found the method assumes there is no parent_uid. To cancel the
   * causal reference lookup completely the client can provide a parent_uid value of
   * `SVT_DATA_UTIL_UNSPECIFIED. If `SVT_DATA_UTIL_UNSPECIFIED is provided the method assumes
   * there is no parent_uid.
   * @param channel Optional string indicating an object channel. If not provided
   * or set to `SVT_DATA_UTIL_UNSPECIFIED the method assumes there is no channel.
   *
   * @return The 'svt_pa_object_data' required for PA header.
   */
  extern virtual function svt_pa_object_data get_pa_obj_data(string uid = "", string typ = "",
                                                           string parent_uid = "", string channel = "");

  // ---------------------------------------------------------------------------
  /**
   * This method overides the super method to set the 'active_xml_start_time' to support backward
   * compatibility and call the super class method to save the object properties.
   *
   * @param writer Object which takes care of the basic write operations.
   * @param object_block_desc String that is placed in the 'object' block created for
   * the data object. If not specified method relies on get_xml_object_block_desc() method
   * to get default description.
   * @param prefix String to be placed at the beginning of each line in the file.
   *
   * @return Indicates success (1) or failure (0) of the save.
   */
  extern virtual function bit save_prop_vals_to_xml(svt_xml_writer writer, string object_block_desc = "", string prefix = "");

  // ---------------------------------------------------------------------------
  /** Method provided to get clean time values to support XML, FSDB and other output. 
   * This method has been deprecated. Clients should override 'get_clean_realtimes' 
   * instead of 'get_clean_times'.
   */
  extern virtual function void get_clean_times(ref time start_time, ref time end_time);

  // ---------------------------------------------------------------------------
  /** Method provided to get clean real time values to support XML, FSDB and other output. */
  extern virtual function void get_clean_realtimes(ref realtime start_time, ref realtime end_time);

  // ---------------------------------------------------------------------------
  /**
   * Method provided to get the transaction status for inclusion in XML and other output.
   *
   * @param status The overall transaction status.
   * @return Indicates whether the status was available (1) or not (0) and therefore whether
   * the status field should be used.
   */
  extern virtual function bit get_xact_status(ref status_enum status);

  // ****************************************************************************
  // Command Support Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow command
   * code to retrieve the value of a single named property of a data class derived from this
   * class. If the <b>prop_name</b> argument does not match a property of the class, or if the
   * <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1', with the value of the <b>prop_val</b>
   * argument assigned to the value of the specified property. However, If the property is a
   * sub-object, a reference to it is assigned to the <b>data_obj</b> (ref) argument.
   * In that case, the <b>prop_val</b> argument is meaningless. The component will then
   * store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val A <i>ref</i> argument used to return the current value of the property,
   * expressed as a 1024 bit quantity. When returning a string value each character
   * requires 8 bits so returned strings must be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @param data_obj If the property is not a sub-object, this argument is assigned to
   * <i>null</i>. If the property is a sub-object, a reference to it is assigned to
   * this (ref) argument. In that case, the <b>prop_val</b> argument is meaningless.
   * The component will then store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   * @return A single bit representing whether or not a valid property was retrieved.
   */
  extern virtual function bit get_prop_val(string prop_name, ref bit [1023:0] prop_val, input int array_ix, ref `SVT_DATA_TYPE data_obj);

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow
   * command code to set the value of a single named property of a data class derived from
   * this class. This method cannot be used to set the value of a sub-object, since sub-object
   * consruction is taken care of automatically by the command interface. If the <b>prop_name</b>
   * argument does not match a property of the class, or it matches a sub-object of the class,
   * or if the <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1'.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val The value to assign to the property, expressed as a 1024 bit quantity.
   * When assigning a string value each character requires 8 bits so assigned strings must
   * be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @return A single bit representing whether or not a valid property was set.
   */
  extern virtual function bit set_prop_val(string prop_name, bit [1023:0] prop_val, int array_ix);

  // ---------------------------------------------------------------------------
  /**
   * Simple utility used to convert string property value representation into its
   * equivalent 'bit [1023:0]' property value representation. Extended to support
   * encoding of enum values.
   *
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort.
   *
   * @return Status indicating the success/failure of the encode.
   */
  extern virtual function bit encode_prop_val(string prop_name, string prop_val_string, ref bit [1023:0] prop_val, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * Provide string values for exception_list_opts and protocol_xacts_opts.
   * 
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort. 
   *
   * @return The enum value corresponding to the desc.
   */
  extern virtual function bit decode_prop_val(string prop_name, bit [1023:0] prop_val, ref string prop_val_string, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the primitive data fields in the object. The svt_pattern_data::name
   * is set to the corresponding field name, the svt_pattern_data::value is set
   * to 0.
   *
   * @return An svt_pattern instance containing entries for all of the data fields.
   */
  extern virtual function svt_pattern do_allocate_pattern();

`ifdef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the data fields in the object that are to be included in the object's
   * XML output.
   *
   * @return An svt_pattern instance containing entries for all of the fields
   * required for XML output of the data object.
   */
  extern virtual function svt_pattern allocate_xml_pattern();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Extension of the `SVT_TRANSACTION_OBJECT_TYPE::convert2string() method needed so that
   * extensions of this class can be used with the comparator classes.
   */
  extern virtual function string convert2string();

  // ---------------------------------------------------------------------------
  /**
   * Method used to set #comp_comparer, defining the function of the comp() compare.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  extern virtual function void set_comp_comparer(`SVT_XVM(comparer) comp_comparer);

  // ---------------------------------------------------------------------------
  /**
   * Implementation of the comp() method needed so that extensions of this class
   * can be used with the comparator classes.
   */
  extern virtual function bit comp(`SVT_TRANSACTION_TYPE to);
`endif

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
BFJSi2+gEmHZ9TGrk+BcBq2PwE9d9kgk6zsWk6tyWp+46YNum1TjAmiHn/qin8Gv
mbKYW9Elj79DhHjdtiX13pn9zuN/csnP8sCuk0CQ0PRfBlLRT3Q5ZrgJrAH/TT3n
RRHGAziTNGW7rQX8br+f7GpAjGOIGb8/ZZhNvZOrbkg=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 13145     )
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
`pragma protect end_protected
  
//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
TG0XDz7/49UbDgH0l+Lhpliqq9ef991VZOgsFEycdN1tEK9ldazmHV1GRp5iQlAW
Shz82VqCFBcoHf3Y6UjaiL/a5QFwZvG4q7SLcqehOSOztmwpnjRNTWxMaSgz/9nM
2FuQGC+N3HOlu/OyZY6eJIblk1jSFSs2haMhdCwJf2A=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 16800     )
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
43vzDSF4f6qcsG5pwU5uwJfuLBCzwean9AFGKDU5j1PYCmb15WhGIzH4m3uuhn1T
SvUusno3EAQUigft4P7Uti/6eWBYkdiY8CM7X/aUBm5H4lytkE2uzCoMXs+spDgB
TANxhmnei8wIUGo7PRM80oDFuH3x9UiUbLwl1WH9Sycpy4kvOpLz3rctHeMP4yLt
DxD12DGiwvk/8bEy5WmSHQnj8SVQQsxUHsBgF7lSLLlLRxZB0ZTby554pIUcqsdC
5/EhSBLqFAPm0cDOAFx6GNGo/NrnQoosDgDeEZfoAeHQpGNHBQ7QBf/y6G5XqvH4
cbQPq/pi55wPC7QqdmijCMphnv75qeE9eLid7yFIB862vmaeI+zZoAuAdPVClmT5
F1gFvtq8S8k4d+Mml4j6O/0TCc6yf3DfGfLmsvbfMglHe9mtKE8jA3uCCRK7LDrP
EdXNWGVwUFoQ/401dEuPIYn8ohUog9eMVk8a69Z16qyCjDNfpofJbNM1+XA906SN
Zlkt23t3VMI2zbLFBiDHn3ysgzaX7UKb/Z9i/kJpOxbbt5Y9zNZyDoiAyCSs+qOo
T5nl7MwZML42cC/OiaYtZB/hJTtME2TpNPPJP6NeZEWfbvrgdRCzR3+DO+m3axk9
7hFX0p52sBBpAklwZ/iZW36hLmapmXaF6j/4VwXj+yeav42YwAZbAan82ppyhcHa
IcuX54A0fuHifUZ1MTBrjCcYySdV8CVeyeWoJ90gKJATuac6eaqBIZwV1pGlZuUl
hX9ZYiJrfwFlNaCniCWfi9pJ/fbpAxC9/H4lO1r1RVZJi3a93MtvwVFIIdw2CF6q
wqQCIozaEgwl52aH9LayqiGP6iAjL7pw1tyQ0wht5cPM9wY7Lg9I7DFYRORdZNeJ
KkFDrO8pMY9TsPz9ooo36OFPaC53gARn1Jrw6teLUVoeT8CK2YuUnl5dHEUlzy7C
+9LbDcLVNoVcVA38HNJ0m2wCI1qendS6xPheImNpJdUN/rcSf1vc38QK1fyn77+o
hin3ANIihk6EqpiIq6htudvkXudva+AYiG+dktixIRjuiE07IgV7k+xd8f7gHVIc
HghDb1pedsqpfEoMgDxDJlXfL8assM6hrjjAhGcnz0k1LjM65qs+m+tRT8v+2GJR
cRX+YJW1fTz03Qg+hKvjUZvWZvTfnoeHOrJB4nMikbkjTB8vMMdBZHHF7+9LBi4T
skYg8idoOh3KSs099R/o0ibCDlMbNPRG7fjlNd37M3dDdJXUdL3hm5qeH3Ohd8BN
nIlOgDsj24QGLeXCzmJJTeEefKjw5HgHL5x6f82IBILMOG7fNUzL2+LJXBZAlD8o
fPFJs7/jGYPhN6K4MPKGUMzih66ZYUQ1fRUJ08FD3saHc/VYlbuhEMsH0a1kgbDp
G7S+SKgrxcQuInr0+sDASdG1IpauUiczC4zNLXVAvCwf1W+Zv60r6kFdlk8g+BXH
flSC3fX/n0hAyYl6PY6qZH08167RmjTlmEB1jCGrEk58GKURxSRpLIXxzeabJLDh
i8uVwHxYE/b9X8EHwxiwotWopMOtjH5H1V+1Qmn1d3OfbHANYzexyFfFxDqu787H
WS/fQLrtlD8eHx60U1tCPpubn+d8R/aUn2HNtzuZnQuxZRtLfhOcLZaFnVZk12st
ejZ0+I51gU/ylHswBI8RcxRX2CSp1aO/0bKh2HmpBJmBmwWyagjoBtpF+nvwd+Jf
cUNFAYGTGvGSCYWYqx6wIcEu5q5Ny+VGa5priPPwrJPCYh2PaOYz0m+T13aV5DTT
eFk0khw0uFYBCKwDi82aZs95ft+t9QkrblIU3hVJfX6JFHnueXUQE26/GhADrMn0
rFycFY3aN5zKFSrvaPWMiJgTULAayo+F4t+lIU8nBU+nszR6mqaQ34WzCD6LiSYQ
ZUM1U4C/ohKGuH5Bv8YNXc8HCyEJYhHJPqwfGG+/mf4CVaEeVZrjnTJxiscgJULs
wEkD4OTLA0Kcc1UsWuRJwlyspBpovwGdjVQNoRZex3B/oqj/BkPy9mXhAr8Mct7L
3dFfw5x/o1s61aDra/W0cpcjq2njRRrRkpXHQXFwQltQrdXc9vKT8xSxLyUz4mnn
Nej1YkVPb3h06lkpflMm7ALnyji3P0NqNiLqZBZ7FAstNZBIpfsQHH0mOL3eolsp
T/pFoiw1562yLn/VZw7FAiHDH20Jz5GiTtaXW0kKTxcqXIjatUaLV57Zkp/BtoDF
xFz8Pxb/X3OYpuzk1UW6agdV4BwM6rOi/q/Degq6SIhMZ4QwyQvWAbOBOT/iJ43u
ilMl33WIlBDvKqFP30AsbdES8D0UZD7V4E5WIE8bGDYPaQAhPoqlRYBHDqUPoscB
dACB+BTjhWdvhmhip6WGsu30yYLxTXR/3vB6QCfSNvmtHmStsSCZQwTIphna+Vuq
e+IF04HzA3JwqJAHf8K0CQ==
`pragma protect end_protected

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the beginning of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_begin();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_end();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of the last transaction
   * in the implementation queue.
   */
  extern virtual task wait_end_last_implementation();

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Bridge method providing a single call to get integral recording transaction 
   * handle for this sequence.
   */
  extern virtual function int svt_get_tr_handle();
`endif

  // ---------------------------------------------------------------------------
  /** Method to get the is_internal value. */
  extern virtual function bit get_is_internal();

  // ---------------------------------------------------------------------------
  /** Method to set the is_internal value. */
  extern virtual function void set_is_internal(bit is_internal = 1);
      
  // ---------------------------------------------------------------------------
endclass

// =============================================================================

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
VxygAApGQ0C6hKY4H01jOhWzi2b3LsCtViUKI+bnxLlDRVzY79X6/bQNcCjvwTQF
HltEs6XTgLZRaP71JTsmJ40Nc8mDMzAihMvJwBzjrfdwQZYpUEMr5HXbWAXLSzeC
FAevwDSDWIGact3RKNfr5+8KUUJmbKS4LC67e+kQfqI=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 18252     )
e4CaF9ASv/89NVzL9bUDEBRC/LZ47bIc4+WtTWf1duHKbLJN9P3TquyvvXpVovyH
kPKJewDizlvlEVwLWz2vZNkpN5p1MdX6ArpttHfQkkhe0WUnRgMG7lEemAiJgCYF
3x8rQR5AZ1mhORBLOMIAjTMUSAb1CckRaVk/mTiLG3KcycXCYttQfy4PBUwHT46F
lacu0QPnkHKStTr9oXja60OWzJAQbTG78+kp9JEMsS5Wv2F4uYRnEsBHhz6p6kj9
IST0TCR3XcvZGgXfRaod++ZDiVgiW3PZ9ZK6VohnIqTLFDKZtKCWZXMOZY6umRob
1RQStgXqhJsqzDOwjr4VeQzyc4lJBbI9xrrEdT77BcZGoSSsL+TfPxnVZ16PCRTE
ycYYJlC0k0Gto62dkpL+UPUoMlnB9ifBPckwvVcnfn1nkI9RPrr87wDvBhl/GhXZ
yxbwzrWZvYuXSooX9J4rkxj85RUA/UUsuHBOoevngjod9Os9JYCHBVLwwyjFQ3CF
39xSDJx7jN0ZOQJvjM5oV1DR8seu+aFPMUCccjcZ0lmBP2r0IGM6xgDIbkH8i8X1
KrvX0vKt4C/RAy3OgcyXrFNpf71hgBKnleiaSys3dBsxOXoLYh3uo4aHLZxca+HD
Go/1u6gIgVrYdafY1+xj9JhOue6yVmLn8wF6LQQ8Ek+Sex4rlU+9Od8xOwC4bcnv
q/jdvrbssx64r3P9aO9ibmtJirUHHKt40S3BfD3O4OOBIbQgcG85zKT66Y3EwDUM
31ffx8fd1SsPD4lDhsRSeDwu2TBjF9t0QNJAlioPv1oymrDEqwS98TmH0udxbpN8
I8efjQck9BktLvpXu+nNv9f1OAj2QCsceax/0GISQ5t1cIFSvvayHJmwG/YgV2Om
2aBuVPfZxA+ZVMuadt8kOGR459xh+oM0rpaHm5NBb54yvy7p2OxKlKUW30xQRzdm
ZOrVrY6n/sUOaUNozWexm8fzGBUunELIy3Gh4Hz7vT8weze1390ijlQXE+uFJVFj
9mLoXll0SSQGRaIaFwYcQ46NVDQctPc+bj4gjTA3+KCzGm546vRoVq3V6woaqpv2
OwaqQ5arYt94VMIbBqdjs0DgSb3IPijDAHq/+rTmDlV1qzV1SoSAPBfuXc1wd3k1
yGvSvkVa1vEnAN24ic/+oskt0+b1knfosKL6+yqglDvRKzWS7DuDWMpGOH15b+Vi
QNJjGjW1FrypjGyuRfh2FOkDi9TVgAp4/bwUTd9fO9H1onxC+ThacIQVq40KODIC
J31lNQAoR8OT5CyvXvxqN6tgrSlM12zD+SAysLgcTKApeGArozB6eqGNcav/gKlR
YcwUJW2oqRimKghlqjk7tngd/sNp+6Ix4V2/DtssrYSb0VEtN418JIRoAEQbIFhi
AEFHP4A6AQZgdLf9scElOa04SvN++5g8NTDr8o5aW6HWGUx9acYjHAEFSinzP0ta
UTnAnbzXC+bkDL1mCHVAtCq/D6AJWbcePFr0y7HWiRDDD2ZhjyAFt2XhMDCySmsF
tHnw4p29WFZUuUfjb+JBkH1nqvxlHnecjxuO7U5bgn1Yza/TptzqYAxLlGht89uT
WvIXiff7xc69Zm83TrVw6QCsZaHCaohf2KZmyehv7Ap5LCstcrXAR2uGSNLQ/d/R
GQA04v6nhYBio5qwuGFWTapUfROjadPuYqy9rO22+CDi83x+NUDv3sUlWyxkiX3o
yp6PRqi/3oMXLw1g2rMwUsauov8s28EEzNwjSK1gfDwIuX4+4mGMlyMkvBQlQthJ
SIe5yRTyqGDUQEhAMxX4DY2UL74U9AkaHjy5zwA3JZUlAbVdqz5/FbEYrVTKvNe5
R/oYIzRKItiRCfV6a7VvxVnwb7XNJXR68TlUBr8LjPwlbXQ3sYw4+0JzMB2mkW5m
kyLXqZVYE4MPrmJdgsocJQ==
`pragma protect end_protected

//vcs_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
FCI829Fb5ecZAFIE1SEJ+JeB5D/mbeNMGbgGYASmO6N8QmazWbY4pd71ZcEC/Bjs
yqOZLvYiqjwljJoKhumALBjDEziyg+9b6SE6vxDnT+9gMoD3Q9gkLfkkPqSdAYdi
vj/wcyDpagSYz1fZuuODhh5fYjk7NW8pg815Hjk9/5w=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 103754    )
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
aY2MkMsHkpCvekhuijsX6Q==
`pragma protect end_protected

`endif // GUARD_SVT_TRANSACTION_SV

`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
johSE2rGFrUeUyMgGNv5awIb3SCkrbo9ilZeFFfMQXZy7XazKKaI4alDESaisqLu
vNXo/KUwvwIiEAWfu0hSU6rupGjfw9THCrvePPC6CCPWj4JtCqXmA9To/5iHIxvD
+9qcx6r8/KJT7C9Njc8vNVN72j47Jn7kHR99k0uO1fM=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 103837    )
PP0FtDAQ06wezPhg/scjduG1wDU3z03iZ6kZ5Lnn+VKpO6j2mFvyBBvcd9czj2Cw
4iwAOYaf77YQspLBeckGUQmR+TqhYucUEC9FhxLJIxU5G8qhP9K/KJZOrLpHbdQl
`pragma protect end_protected

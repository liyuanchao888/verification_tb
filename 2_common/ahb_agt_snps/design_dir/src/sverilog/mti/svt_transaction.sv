//=======================================================================
// COPYRIGHT (C) 2007-2017 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

`ifndef GUARD_SVT_TRANSACTION_SV
`define GUARD_SVT_TRANSACTION_SV

`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_cmd_defines)

`include `SVT_SOURCE_MAP_LIB_SRC_SVI(R-2020.12,svt_data_util)

`ifdef SVT_VMM_TECHNOLOGY
typedef class svt_notify;
`else
typedef class svt_non_abstract_report_object;
`endif

// The `SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING macro put in place to make
// documentation more re-usable.  It has no functional behavior.

`ifdef SVT_UVM_TECHNOLOGY
 // If using UVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 `define SVT_TRANSACTION_STARTED_NOTIFY uvm_transaction::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY uvm_transaction::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING UVM_DISABLE_AUTO_ITEM_RECORDING
 `define SVT_TRANSACTION_OBJECT_TYPE uvm_object
`elsif SVT_OVM_TECHNOLOGY
 // If using OVM technology then extend svt_sequence_item_base
 `define SVT_TRANSACTION_BASE_TYPE svt_sequence_item_base
 `define SVT_TRANSACTION_TYPE svt_sequence_item
 // NOTE: We add begin_event/end_event in OVM
 `define SVT_TRANSACTION_STARTED_NOTIFY svt_sequence_item::begin_event
 `define SVT_TRANSACTION_ENDED_NOTIFY svt_sequence_item::end_event
 `define SVT_TRANSACTION_START_TIME begin_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING svt_disable_auto_item_record
 `define SVT_TRANSACTION_OBJECT_TYPE ovm_object
`else
 // If using VMM technology then extend svt_data
 `define SVT_TRANSACTION_BASE_TYPE svt_data
 `define SVT_TRANSACTION_TYPE svt_transaction
 `define SVT_TRANSACTION_STARTED_NOTIFY vmm_data::STARTED
 `define SVT_TRANSACTION_ENDED_NOTIFY vmm_data::ENDED
 `define SVT_TRANSACTION_START_TIME start_time
 `define SVT_TRANSACTION_END_TIME end_time
 `define SVT_TRANSACTION_UVM_DISABLE_AUTO_ITEM_RECORDING <undefined>
 `define SVT_TRANSACTION_OBJECT_TYPE
`endif

//svt_vipdk_exclude
//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
WNe7l+08a/QKqNKab9v3T25Te94VyYzEBNWQNVGGwRfGh6kdWA9V1wA/vmb0Sw5H
Bwn9pkVaBLZi1l7wFjMb3Rd+k+NsGOPmUCBImcIhgC3ZBhhNKfryk9tQKAsQOXhJ
Ua7gitIJ495OekH5JTQPo6M1S/Kgo12PcoVAbQ9eZp8=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 334       )
00J1mnvQi+/r/JonC+l+qPu54q1DIre/tnZOmzxAgv6zZAW4oDnmqHsUhQZ9P1IG
3tE4N2bE0GUq+VP/DpXvZBu3Hu6b0OhYbuMwSEkp3gVggOgClGH+18rMVrYjQoeo
xE/XrXTmkVtLmQlLmaHrFx0uSQEeuBpF4XJCmhQj6SFXa9nAotLaNDAxb+AGI/Bg
bT0QwBfQ/u4p5OHUu129QUSmVAZpNnWBogf1CyUNqM7qo4xF2vd+6xwTpMtpDfV4
lhR+sUYV4maBk6FZyg5oNkTgX7oUuBPkIUL2e1NsjjVLFpCJf1NjgtgOb16BNaza
4KcaKr+FOrJeKRzaYtW/y4V1CaasMI5y/UqzlSMhmha6NPE0/KvCza4AjVD5aPWZ
JTpx1kccGSD5s7rGXjnBflVxcev25cWxDo4TApyMHUlmlkPdejNgiaqTdphJjMJv
`pragma protect end_protected

`ifdef SVT_VMM_TECHNOLOGY
/**
 * This macro can be used to create a simple "one channel" multi-stream
 * scenario class which implements its scenario via a contained
 * atomic scenario class.
 */
`define SVT_TRANSACTION_MS_SCENARIO(class_name) \
class class_name``_ms_scenario extends svt_dynamic_ms_scenario; \
 \
  /** Properly typed scenario implementing the details of the scenario. */ \
  rand class_name``_scenario contained_scen; \
 \
  /** Name for the channel associated with this multi-stream scenario. */ \
  string chan_name = ""; \
 \
  /** Indicates whether this scenario should wait for the completion of the transactions generated by the scenario. */ \
  bit throttle = 0; \
 \
  /** Controls how many times the scenario is used. -1 indicates no limit, non-negative values define hard limits. */ \
  int execute_limit = -1; \
 \
  /** Used in conjunction with execute_limit, tracking how many times the scenario has been executed. */ \
  int execute_cnt = 0; \
 \
  /** Setup delay applied prior to initiating the transactions in the scenario. */ \
  real setup = 0.0; \
 \
  /** Minimum setup delay value used to define one end of the range for setup delays. */ \
  real setup_min = 0.0; \
 \
  /** Maximum setup delay value used to define one end of the range for setup delays. */ \
  real setup_max = 0.0; \
 \
  /** Temporary used during randomization to allow the setup delay to be randomized */ \
  rand longint unsigned setup_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum setup delay. */ \
  longint unsigned setup_max_longint; \
 \
  /** Hold delay, in simulation time units, applied after initiating the transactions in the scenario and waiting for their completion (i.e., if #throttle set to 1). */ \
  real hold = 0.0; \
 \
  /** Minimum hold delay value used to define one end of the range for hold delays. */ \
  real hold_min = 0.0; \
 \
  /** Maximum hold delay value used to define one end of the range for hold delays. */ \
  real hold_max = 0.0; \
 \
  /** Temporary used during randomization to allow the hold delay to be randomized */ \
  rand longint unsigned hold_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_min_longint; \
 \
  /** Temporary used ruring randomization to defined the Maximum hold delay. */ \
  longint unsigned hold_max_longint; \
 \
  /** VMM ID associated with this scenario. */ \
  int  SCENARIO_ID; \
 \
  /** Defines the weight to be applied to the delays which make up the lower sidewall of the overall delay range. */ \
  int LOWER_DELAY_wt = 1000; \
 \
  /** Defines the weight to be applied to the delays in the middle of the delay range, between the lower and upper sidewalls. */ \
  int MIDDLE_DELAY_wt = 1; \
 \
  /** Defines the weight to be applied to the delays which make up the upper sidewall of the overall delay range. */ \
  int UPPER_DELAY_wt = 100; \
 \
  /** Defines what percentage of the overall delay range which should be set aside for each of the two sidewalls, lower and upper. */ \
  int SIDEWALL_PERCENT = 10; \
 \
  constraint reasonable_scen_length { \
    this.contained_scen.length > 0; \
  } \
 \
  constraint reasonable_setup \
  { \
    this.setup_longint dist { \
      `SVT_BATHTUB_DIST(this.setup_min_longint,this.setup_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
  constraint reasonable_hold \
  { \
    this.hold_longint dist { \
      `SVT_BATHTUB_DIST(this.hold_min_longint,this.hold_max_longint,LOWER_DELAY_wt,MIDDLE_DELAY_wt,UPPER_DELAY_wt,SIDEWALL_PERCENT) \
    }; \
  } \
 \
`ifdef SVT_PRE_VMM_11 \
  function new(string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(); \
`else \
  function new(`VMM_SCENARIO parent = null, string chan_name = "", class_name factory = null, class_name``_scenario contained_scen = null, bit throttle = 0);  \
    super.new(parent); \
`endif \
    begin \
      string scen_tag = (contained_scen == null) ? "CONTAINED_ATOMIC_SCENARIO" : "CONTAINED_SCENARIO"; \
      if (contained_scen == null) begin \
        /* Create an atomic scenario as the default scenario */ \
        class_name``_atomic_scenario atomic_scen = new(); \
        this.contained_scen = atomic_scen; \
      end else begin \
        this.contained_scen = contained_scen; \
      end \
      if (factory != null) begin \
        this.contained_scen.using = factory; \
      end \
      this.chan_name = chan_name; \
      this.throttle = throttle; \
      SCENARIO_ID = this.define_scenario(scen_tag,1); \
      this.scenario_kind = SCENARIO_ID; \
      this.length = 1; \
      this.repeated = 0; \
      this.log.is_above(this.contained_scen.log); \
    end \
  endfunction \
 \
  local virtual function string this_class_name(); \
    begin \
      return {`SVT_DATA_UTIL_ARG_TO_STRING(class_name), "_ms_scenario"}; \
    end \
  endfunction \
 \
  virtual task execute(ref int n); \
    begin \
      class_name``_channel out_chan; \
      int unsigned n_inst; \
      bit ready_to_apply = 0; \
      bit applied = 0; \
      if (this.execute_limit_exceeded()) begin \
        `svt_verbose("execute", $sformatf("The current execute_cnt (%0d) exceeds the execute_limit (%0d). Nothing to execute.", \
                                    this.execute_cnt, this.execute_limit)); \
        n = 0; \
      end else if (!$cast(out_chan, get_channel(this.chan_name))) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) could not be found or is not of type %0s_channel. Unable to continue.", \
                                  this.chan_name, `SVT_DATA_UTIL_ARG_TO_STRING(class_name))); \
        n = 0; \
      end else if (out_chan == null) begin \
        `svt_fatal("execute", $sformatf("The indicated channel (%0s) is null. Unable to continue.", this.chan_name)); \
        n = 0; \
      end else begin \
        `svt_verbose("execute", $sformatf("Generated scenario (%0d, %0d) directed at channel %0s", this.stream_id, this.scenario_id, this.chan_name)); \
        if (this.setup > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0f", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying execution based on setup value of %0t(%0f)", this.setup, this.setup)); \
`endif \
          #this.setup; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0f is complete", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Execution delay based on setup value of %0t(%0f) is complete", this.setup, this.setup)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Setup is %0f, so not delaying execution.", this.setup)); \
`else \
          `svt_verbose("execute", $sformatf("Setup is %0t(%0f), so not delaying execution.", this.setup, this.setup)); \
`endif \
        end \
        fork \
          begin \
            `svt_verbose("execute", $sformatf("About to apply %0d xacts to out_chan %0s for scenario (%0d, %0d).", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            while (!ready_to_apply) begin \
              @ ready_to_apply; \
            end \
            this.contained_scen.apply(out_chan, n_inst); \
            `svt_verbose("execute", $sformatf("Applied %0d xacts to out_chan %0s for scenario (%0d, %0d)", this.contained_scen.length, this.chan_name, this.stream_id, this.scenario_id)); \
            applied = 1; \
          end \
          begin \
            if (this.throttle) begin \
              bit orig_tee_mode = out_chan.tee_mode(1); \
              class_name last; \
              fork begin /* disable fork block */ \
              fork \
                begin \
                  while (!applied) begin \
                    class_name next; \
                    ready_to_apply = 1; \
                    `svt_verbose("execute", $sformatf("tee'ing next transaction out of out_chan %0s", this.chan_name)); \
                    out_chan.tee(next); \
                    /* Make sure we see something before attempting to set 'last' */ \
                    last = next; \
                    `svt_verbose("execute", $sformatf("tee'ed transaction from out_chan %0s", this.chan_name)); \
                  end \
                end \
                begin \
                  `svt_verbose("execute", $sformatf("waiting for applied on out_chan %0s", this.chan_name)); \
                  @ applied; \
                  `svt_verbose("execute", $sformatf("waited for applied on out_chan %0s", this.chan_name)); \
                end \
              join_any \
              disable fork; \
              end join_any /* disable fork block */ \
              void'(out_chan.tee_mode(orig_tee_mode)); \
              if ((last != null) && (!last.notify.is_on(vmm_data::ENDED))) begin \
                `svt_verbose("execute", $sformatf("waiting for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
                last.notify.wait_for(vmm_data::ENDED); \
                `svt_verbose("execute", $sformatf("waited for ENDED on last transaction extracted from out_chan %0s", this.chan_name)); \
              end \
              `svt_verbose("execute", $sformatf("throttle of out_chan %0s is complete", this.chan_name)); \
            end else begin \
              ready_to_apply = 1; \
              `svt_verbose("execute", $sformatf("scenario for out_chan %0s setup with throttle = 0", this.chan_name)); \
            end \
          end \
        join \
        `svt_verbose("execute", $sformatf("Applied %0d instances to out_chan %0s", n_inst, this.chan_name)); \
        if (this.hold > 0) begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0f", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Delaying completion based on hold value of %0t(%0f)", this.hold, this.hold)); \
`endif \
          #this.hold; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0f is complete", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Completion delay based on hold value of %0t(%0f) is complete", this.hold, this.hold)); \
`endif \
        end else begin \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
          `svt_verbose("execute", $sformatf("Hold is %0f, so not delaying completion.", this.hold)); \
`else \
          `svt_verbose("execute", $sformatf("Hold is %0t(%0f), so not delaying completion.", this.hold, this.hold)); \
`endif \
        end \
        n += n_inst; \
        this.execute_cnt++; \
      end \
    end \
  endtask \
 \
  virtual function string psdisplay(string prefix = ""); \
    begin \
      psdisplay = { super.psdisplay(prefix), "\n" }; \
      psdisplay = { psdisplay, prefix, "chan_name = ", this.chan_name, "\n" }; \
      psdisplay = { psdisplay, prefix, $sformatf("throttle = %0b\n", throttle) }; \
      psdisplay = { psdisplay, this.contained_scen.psdisplay(prefix) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SCENARIO_ID = %0d\n", SCENARIO_ID) }; \
`ifdef SVT_MULTI_SIM_DISPLAY_REAL_AS_TIME \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0f\n", this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0f\n", this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0f\n", this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0f\n", this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0f\n", this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0f\n", this.hold_max) }; \
`else \
      psdisplay = { psdisplay, prefix, $sformatf("setup = %0t(%0f)\n", this.setup, this.setup) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_min = %0t(%0f)\n", this.setup_min, this.setup_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("setup_max = %0t(%0f)\n", this.setup_max, this.setup_max) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold = %0t(%0f)\n", this.hold, this.hold) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_min = %0t(%0f)\n", this.hold_min, this.hold_min) }; \
      psdisplay = { psdisplay, prefix, $sformatf("hold_max = %0t(%0f)\n", this.hold_max, this.hold_max) }; \
`endif \
      psdisplay = { psdisplay, prefix, $sformatf("LOWER_DELAY_wt = %0d\n", LOWER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("MIDDLE_DELAY_wt = %0d\n", MIDDLE_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("UPPER_DELAY_wt = %0d\n", UPPER_DELAY_wt) }; \
      psdisplay = { psdisplay, prefix, $sformatf("SIDEWALL_PERCENT = %0d\n", SIDEWALL_PERCENT) }; \
    end \
  endfunction \
 \
  virtual function vmm_data copy(vmm_data to = null); \
    begin \
      class_name``_ms_scenario cpy = null; \
 \
      if (to == null) begin \
        cpy = new(); \
      end else if (!$cast(cpy, to)) begin \
        `svt_fatal("copy", $sformatf("Cannot copy to instance that is not of type %0s", this_class_name())); \
      end \
 \
      if (cpy != null) begin \
        void'(super.copy(cpy)); \
        if (!$cast(cpy.contained_scen,this.contained_scen.copy())) begin \
          `svt_fatal("copy", $sformatf("%0s failed attempting to copy contained scenario", this_class_name())); \
        end \
        cpy.chan_name = this.chan_name; \
        cpy.throttle = this.throttle; \
      end \
 \
      return cpy; \
    end \
  endfunction \
 \
  virtual function bit adjust_weights_per_cfg(); \
    adjust_weights_per_cfg = !execute_limit_exceeded(); \
  endfunction \
 \
  function void pre_randomize(); \
    begin \
      this.setup_longint = this.setup; \
      this.setup_min_longint = this.setup_min; \
      this.setup_max_longint = this.setup_max; \
 \
      this.hold_longint = this.hold; \
      this.hold_min_longint = this.hold_min; \
      this.hold_max_longint = this.hold_max; \
 \
      void'(adjust_weights_per_cfg()); \
 \
      /* Make sure the contained scenario info matches the scenario info */ \
      this.contained_scen.stream_id = this.stream_id; \
      this.contained_scen.scenario_id = this.scenario_id; \
      foreach (this.contained_scen.items[i]) begin \
        this.contained_scen.items[i].stream_id   = this.contained_scen.stream_id; \
        this.contained_scen.items[i].scenario_id = this.contained_scen.scenario_id; \
        this.contained_scen.items[i].data_id     = i; \
      end \
      super.pre_randomize(); \
    end \
  endfunction \
 \
  function void post_randomize(); \
    begin \
      super.post_randomize(); \
 \
      this.setup = this.setup_longint; \
      this.hold = this.hold_longint; \
    end \
  endfunction \
 \
  function bit execute_limit_exceeded(); \
    begin \
      execute_limit_exceeded = (execute_limit >= 0) && (execute_cnt >= execute_limit); \
    end \
  endfunction \
 \
endclass: class_name``_ms_scenario

`endif // ifdef SVT_VMM_TECHNOLOGY

//svt_vipdk_end_exclude
/** Add some customized logic to copy implementation and trace queues */
`define SVT_TRANSACTION_SHORTHAND_CUST_COPY \
`ifdef SVT_VMM_TECHNOLOGY \
  if (do_what == DO_COPY) begin \
    svt_transaction_copy_hook(this.__vmm_rhs); \
  end \
`endif

/** Container which automates exception generation for a transaction. */
`define SVT_TRANSACTION_EXCEPTION_LIST_INITIATOR(classname) \
/** Exception list initiator for classname transaction */ \
class classname``_exception_list_initiator extends classname; \
  rand classname``_exception_list rand_exception_list; \
 \
`ifndef SVT_VMM_TECHNOLOGY \
  /** Constructor */ \
  function new(string name=""); \
    super.new(name); \
  endfunction \
 \
  `svt_data_member_begin(classname``_exception_list_initiator) \
  `svt_data_member_end(classname``_exception_list_initiator) \
`endif \
 \
  /** pre_randomize method which can be insures rand_exception_list is non-null. */ \
  function void pre_randomize(); \
    super.pre_randomize(); \
    if (this.rand_exception_list == null) this.rand_exception_list = new(); \
    this.rand_exception_list.setup_randomized_exception(this.cfg, this); \
`ifdef SVT_MULTI_SIM_SKIPPED_PRE_RANDOMIZE \
    this.rand_exception_list.populate_exceptions(); \
`endif \
  endfunction \
 \
  /** pre_randomize method which removes the exception list if it is empty. */ \
  function void post_randomize(); \
    super.post_randomize(); \
    if ((this.rand_exception_list != null) && (this.rand_exception_list.num_exceptions > 0)) begin \
      this.exception_list = this.rand_exception_list; \
    end else begin \
      /* Clearing this.rand_exception_list can result in warning in some simulators, so leave it. */ \
      /* this.rand_exception_list = null; */ \
      this.exception_list = null; \
    end \
  endfunction \
 \
endclass

// =============================================================================
/**
 * Base class for all SVT model transaction data descriptor objects. As functionality
 * commonly needed for transactions for SVT models is defined, it will be implemented
 * (or at least prototyped) in this class.
 */
class `SVT_TRANSACTION_TYPE extends `SVT_DATA_TYPE;

  // ****************************************************************************
  // Enumerated Types
  // ****************************************************************************

//svt_vipdk_exclude
`ifndef SVT_VMM_TECHNOLOGY
  /**
   * Enum used to provide compatibility layer for supporting vmm_data notify types in UVM.
   * SHOULD ONLY BE USED IN SUITES IMPLEMENTED TO UTILIZE UVM/VMM BRIDGE TECHNOLOGIES.
   */
  typedef enum int {EXECUTE = 999_999,
                    STARTED = 999_998,
                    ENDED = 999_997
                    } notifications_e;
`endif

//svt_vipdk_end_exclude
`ifdef SVT_OVM_TECHNOLOGY
   ovm_event begin_event;
   ovm_event end_event;
`endif

  /**
   * Used to indicate status for a transaction or for a data flow within a
   * transaction. Transactions may be setup with a single status property, or they may
   * have multiple properties corresponding to the different data flows supported
   * by the transaction.
   *
   * For simple transactions or data flows where value acceptance occurs immediatly
   * upon the driving of the signal(s), the values will simply go from INITIAL->ACCEPT.
   * In simple situations which require a handshake the values would be expected to
   * go from INITIAL->ACTIVE->ACCEPT. Note that if a handshake is required, but the
   * handshake occurs immediately, the status will only go through INITIAL->ACCEPT.
   *
   * PARTIAL_ACCEPT normally comes into play if the transaction or data flow involves
   * multiple iterations (e.g., burst transactions or transactions with multiple
   * beats). In this situation the status will go to PARTIAL_ACCEPT as each iteration
   * is completed, and back to ACTIVE whenever a new iteration is begun. The status
   * will only go to ACCEPT once the final iteration is complete.
   *
   * For example a two beat burst with no handshake would be expected to go through
   * INITIAL->PARTIAL_ACCEPT->ACCEPT. A two beat burst with a handshake would be
   * expected to to through INITIAL->ACTIVE->PARTIAL_ACCEPT->ACTIVE->ACCEPT.
   *
   * A transaction might also cycle between ACTIVE and PARTIAL_ACCEPT it the protocol
   * defines several phases. For example a transaction that is made up of multiple
   * distinct packets (e.g., header, data, handshake) might go to ACTIVE as a packet
   * is being transmitted, to to PARTIAL_ACCEPT when a packet is completed, cycle
   * between ACTIVE and PARTIAL_ACCEPT as the remaining packets are exchanged, and
   * only change to ACCEPT once the final packet is complete.
   *
   * Status fields for transactions or data flows with multiple iterations or phases
   * are partnered with 'next' counters reflecting the next iteration or phase. The
   * counter is incremented when a PARTIAL_ACCEPT or ACCEPT occurs, and can be used
   * in combination with the status field to recognize where the transaction is in
   * terms of processing.
   *
   * For example a status of ACTIVE combined with a next value of 0 indicates that
   * the first beat of the transaction, beat 0, is on the bus. A status of ACTIVE
   * combined with a next value of 3 indicates that the 4th beat of the transaction,
   * beat 3, is on the bus. A status of PARTIAL_ACCEPT combined with a next value
   * of 1 indicates that there is no activity on the bus, but that the first beat,
   * beat 0, has been accepted.
   *
   * In protocols where it is possible for a transaction to be rejected, and then
   * retried by the transmitter, the RETRY status has been provided. This status
   * Corresponds for the most part to the INITIAL state, i.e., the transaction is
   * not active, but has the added recognition that the transaction was tried at
   * least once before, and that the component is waiting to re-attempt transaction
   * transmission.
   *
   * DISABLED is specified upon transaction construction if the design is configured
   * to not support a particular part of the protocol which might have been tracked. For
   * example if there are multiple data flows, and the transactions are designed
   * to track these data flows individually (e.g., via status fields for the individual
   * data flows), but one of these data flows is disabled by the configuration, then the
   * status field for that data flow would be set to DISABLED.
   *
   * For transactions and data flows which are DISABLED, the corresponding next
   * counter remains at 0 throughout the transaction.
   *
   * The CANCELLED status occurs if an iteration is queued up but not initiated on the bus,
   * and it is cancelled prior to being placed on the bus. CANCELLED should only be used if
   * the component is designed such that it can return to this transaction and resume the
   * effort to place the CANCELLED iteration on the bus. Once the component restarts this
   * iteration the status is changed to ACTIVE.
   *
   * If the component is not designed to resume cancelled transactions, and is instead
   * designed to 'drop' these transactions, then it should instead mark the transaction
   * as ABORTED. Whenever a transaction is interrupted and dropped for any reason, it
   * should be marked as ABORTED.
   */
  typedef enum {
    INITIAL         = `SVT_CMD_XACT_STATUS_INITIAL,        /**< Data object initial (inactive) state */
    RETRY           = `SVT_CMD_XACT_STATUS_RETRY  ,        /**< Data object initial (inactive) state, but as the result of a retry */
    ACTIVE          = `SVT_CMD_XACT_STATUS_ACTIVE,         /**< Transaction or Data Flow values have been driven by one end of the bus */
    PARTIAL_ACCEPT  = `SVT_CMD_XACT_STATUS_PARTIAL_ACCEPT, /**< Transaction or Data Flow has been accepted either automatically or due to handshake */
    ACCEPT          = `SVT_CMD_XACT_STATUS_ACCEPT,         /**< All iterations or phases of the Transaction or Data Flow have been accepted */
    DISABLED        = `SVT_CMD_XACT_STATUS_DISABLED,       /**< Data Flow is not supported by this system, and therefore not included in this transaction */
    CANCELLED       = `SVT_CMD_XACT_STATUS_CANCELLED,      /**< Iteration or phase was started, but cancelled for some reason */
    ABORTED         = `SVT_CMD_XACT_STATUS_ABORTED         /**< Transaction or Phase interrupted by a protocol reset or other event */
   } status_enum;


  // ****************************************************************************
  // Local Data
  // ****************************************************************************

  /**
   * Reference to the higher level transaction that produced this transaction.
   * This is assigned by calling the store_context() method.
   */
  local `SVT_TRANSACTION_TYPE causal_xact;

  /**
   * Reference to the original (same level) transaction that resulted in the
   * attempt of this transaction.
   * This is assigned by calling the store_trace() method.
   */
  local `SVT_TRANSACTION_TYPE original_xact;

//svt_vipdk_exclude
  /**
   * Transaction cache used to reuse transactions without going through destruction
   * and construction.
   */
  static local `SVT_TRANSACTION_TYPE recycled_xact[$];

  /**
   * Flag used to signify that this transaction is being recycled or already recycled.
   */
  local bit is_recycled_xact = 0;

//svt_vipdk_end_exclude
  /**
   * Flag used to verify that pre_randomize and post_randomize are not blocked by extended classes.
   */
  local bit pre_post_randomize_handshake = 0;

  /** Flag used to differentiate internally generated transactions from testbench provided transactions. */
  local bit is_internal = 0;

  // ****************************************************************************
  // Public Data
  // ****************************************************************************

  /**
   * Reference to the lower level transactions that are created as a result of
   * processing this transaction.  This is assigned by calling the store_context()
   * method.
   */
  `SVT_TRANSACTION_TYPE implementation[$];

  /** Default factory used for creation of the implementation queue. */
  `SVT_TRANSACTION_TYPE default_implementation_xact_factory = null;

  /**
   * Trace of any transactions of the same type that were created as a result of
   * processing this transaction (e.g., due to retries, etc.). If enable_trace()
   * defined to return 0, then only contains 'last' traced transaction. If
   * enable_trace() defined to return 1, then contains all traced transactions.
   * Elements are added to this list via calls to store_trace().
   */
  `SVT_TRANSACTION_TYPE trace[$];

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the exception list object is not copied or compared (NULL), the
   * reference is copied and compared (SHALLOW), or whether the object is copied and
   * compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum exception_list_opts = DEEP;

  /**
   * Used by all svt_transaction derived 'copy' and 'compare' methods to determine
   * whether the lower level protocol references are not copied or compared (NULL),
   * the references are copied and compared (SHALLOW), or whether the objects are
   * copied and compared (DEEP).
   * Since not owned by an individual instance, not copied, compared, etc.,
   * like other svt_transaction properties.
   */
  static recursive_op_enum protocol_xacts_opts = NULL;

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  // Time stamps used to describe the transaction start and end cycles, as well as the
  // individual phase start and end cycles.
  // ---------------------------------------------------------------------------

  /** Time at which this transaction was started */
  real start_time = 0;
  /** Time at which this transaction was ended */
  real end_time = 0;
`endif  

  /** Time at which this transaction was started recorded as a realtime value */
  realtime svt_begin_realtime = 0;

  /** Time at which this transaction was ended recorded as a realtime value */
  realtime svt_end_realtime = 0;

  /** Time at which this transaction was accepted recorded as a realtime value */
  realtime svt_accept_realtime = 0;

  /**
   * Local 'time' stores the current active start time of the object. 
   * This is used for backwards compatibility purposes. Should be removed when all
   * clients remove the 'save_prop_vals_to_xml' implementation and move to 'save_object_begin'
   * and 'save_object_data'.
   */
  realtime active_xml_start_time = -1;

`ifndef SVT_VMM_TECHNOLOGY

  /**
   * Comparer which is used to define the function of the comp() compare if provided.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  local `SVT_XVM(comparer) comp_comparer = null;

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
ZsdPWqRHqY4B9AgceviJgCEVyHWpAYc8z+Q5NvyUI8ulrz99mpb7s11Eaa+PrAP2
yC8EenV5id8+tSpj37EIJhd8Ujy9V2Wo3S1tMdrXK9xdp8uSDxNNjaoRVEAuM+fa
bhaAVn13u4WbSVldS6Yv3uM3FIoRO4+pmJQbh4h4xD0=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 1473      )
Me6uBZq3fmM06HZswmIElXf9WmuiLAWC6iKoWxTIn2AEai3NJKxeBzGoAUM4wKrl
quXWPzseugnYvZo+o9VgSVHW3Y2a2x9xS199ZBSrt6t7HHXEq90C7slxdi82GHDt
GAVbJ94mgI+qcU/p06X+z4lzqFQCubihxRNlyHdWiw+hbo9J5rOyS3ASxEdyOYTX
RJUKiGbdnckn/MAKKtnh7WZ2hEz+GoRrhGlBx+r5qZ1ZiYEjhgyeHlbhzuldc4Kd
jRbO2WSF2uQkOL1oKRBz7SdDNHlzwhx8t/s17rZceu6UAjPwTMK/T9O4wO/7X7qN
SYxIFBZvMiK7zBJ3y+5ylVwzgIU4m7oAU09wh0Jihz1Fqf7MfHNbayLSFCjKWsQK
ePzy7r/kJ4EupPcxHnL8uD1l1kRi23pB4FmIzMY5j9WQKABwFs9YtwmUvZ8CSJc0
GOn9XzTgDlE07G/uzJ++5VMzXXuqK+FM5MgWA+X8VfCHosor8ORriVYFczh7/HXM
4jfK84NTZ4ij0RQD+hvZ1tOAEeKoHuVkMVr8pXAPOUWctKyzFeB6a4O1Nr1ouuz7
bzMJcmtiM1DRazfe95GXRtQCXOwFYmpP5EM6oOamHPjYz1jG665svzVhT+QHhTY9
qyPCJQxeyR2wiKpn4xxdbfgym24j7yDx0AR3WfUBlsEJmOr6W6qC9+ZYsWjQ/zKy
HmPjlpXwdOSz4aHCPMoXuUrA3LqOAVpq90fLx+SydZVeoZ++lFPrgdbu0DqkSAci
Xo17vcTgjVMz+FWm0gX0BZC0es8HhW5aHz5e/3G/aoWXpsses/8vdENEMsuzmpH1
s3LOffOw8l/ee1XKzqnuIy5/FUq1bUTHbfOefPioSHmMdPTF1cD/cFIQ0b4/kar2
5Qh+/4gIdXZ2/4pQ828G9XEJ4w2fvGDKmJeyYrBxn+vTvVhQfO9wVuNmjkXOSXp0
G+ia8zbAc9IWwwQLN4TUr6ZHlBvNBVAlXQPCGOU/o/nzFYg+aH93GJAG7kzm/Lyo
+34IPMr0xB0ZikW72n1uZfeyU00Q4HkgvVBJimDt1kSCIHVZLEZgsYnqaUTTQUw9
LkOSs6Xni546KWkQ8Fe9/l7AWmRS4mVv26hu1VKoEZehEd30bjxhlFsNvQmIlLub
azsFa2iC+YVSOQN0+1ytjnaGaNiYdGE7pF/WNljB1ljDtjCcTQrPpSj2CFKdjLRm
j4WosR3irS4QG68/1oHlU4jaP5wHmUcBfh3zZIDXZJ3Bg5yk47Kwt5J8tZ+0kiaO
sJntRgBdcQjvbMqNXSIjPDtV1zvCh2MAYWSJ/To7TZkuGUldPb4MnDhYuimDRQbv
BMVTixIt3YDyOm3SAb2xD3oUJEA0fb1extoX29iM1hsxviax+0Uo2SeBqhaGC0Ly
soADbhw8ZS11CLjNz/9nNl+bcecGGTHckrh8sAuu3Ok2J319yjuRJPkh9i7hME2n
Q3fX107N3aFS/OmuibzEjYJhXNz6/TsiRdM1uCjj/nwRn6m7H4JaqFfLH94qytJR
`pragma protect end_protected

`endif

`ifdef SVT_VMM_TECHNOLOGY
  `svt_vmm_data_new(`SVT_TRANSACTION_TYPE)
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_transaction class, passing the
   * appropriate argument values to the <b>svt_data</b> parent class.
   *
   * @param log An vmm_log object reference used to replace the default internal
   * logger. The class extension that calls super.new() should pass a reference
   * to its own <i>static</i> log instance.
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(vmm_log log = null, string suite_name = "");
`else
  // ---------------------------------------------------------------------------
  /**
   * CONSTRUCTOR: Creates a new instance of the svt_sequence_item class, passing the
   * appropriate argument values to the <b>svt_sequence_item_base</b> parent class.
   *
   * @param name Intance name for this object
   * 
   * @param suite_name A String that identifies the product suite to which the
   * transaction object belongs.
   */
  extern function new(string name = "svt_transaction_inst", string suite_name = "");
`endif

  // ****************************************************************************
  //   SVT shorthand macros 
  // ****************************************************************************
  `svt_data_member_begin(`SVT_TRANSACTION_TYPE)
    `svt_field_handle(causal_xact,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(implementation, `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_handle(original_xact,        `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `svt_field_queue_handle(trace,          `SVT_ALL_ON|`SVT_NOPACK|`SVT_NOCOMPARE|`SVT_NOCOPY|`SVT_NORECORD)
    `SVT_TRANSACTION_SHORTHAND_CUST_COPY
  `svt_data_member_end(`SVT_TRANSACTION_TYPE)

  // ****************************************************************************
  // Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Override pre_randomize to implement the 'pre' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void pre_randomize ();

  //----------------------------------------------------------------------------
  /**
   * Override post_randomize to implement the 'post' half of a pre_randomize/post_randomize
   * handshake, designed to insure that pre_randomize and post_randomize are not blocked
   * by extended classes.
   */
  extern function void post_randomize ();

  // ****************************************************************************
  // VMM Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  /**
   * Copies the object implementation queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_implementation (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

  //----------------------------------------------------------------------------
  /**
   * Copies the object trace queue into to.
   *
   * @param to vmm_data object is the destination of the copy.
   */
  extern virtual function void copy_trace (`SVT_DATA_BASE_TYPE to, recursive_op_enum impl_trace_op = DEEP);

`ifdef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /**
   * Copies the object into to, allocating if necessay.
   * 
   * @param to Destination class for the copy operation
   */
  extern virtual function `SVT_DATA_BASE_TYPE do_copy(`SVT_DATA_BASE_TYPE to = null);

  // ---------------------------------------------------------------------------
  /**
   * Compares the object with to, based on the requested compare kind. Differences are
   * placed in diff.
   *
   * @param to vmm_data object to be compared against.
   * @param diff String indicating the differences between this and to.
   * @param kind This int indicates the type of compare to be attempted. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in comparisons of the non-static
   * data members. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_compare(vmm_data to, output string diff, input int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Returns the size (in bytes) required by the byte_pack operation.
   *
   * @param kind This int indicates the type of byte_size being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in a size calculation based on the
   * non-static fields. All other kind values result in a return value of 0.
   */
  extern virtual function int unsigned byte_size ( int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Packs the object into the bytes buffer, beginning at offset, based on the
   * requested byte_pack kind.
   *
   * @param bytes Buffer that will contain the packed bytes at the end of the operation.
   * @param offset Offset into bytes where the packing is to begin.
   * @param kind This int indicates the type of byte_pack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being packed and the return of an integer indicating the number of
   * packed bytes. All other kind values result in no change to the buffer contents, and a
   * return value of 0.
   */
  extern virtual function int unsigned do_byte_pack ( ref logic [7:0] bytes[], input int unsigned offset = 0, input int kind = -1 );

  //----------------------------------------------------------------------------
  /**
   * Unpacks the object from the bytes buffer, beginning at offset, based on
   * the requested byte_unpack kind.
   *
   * @param bytes Buffer containing the bytes to be unpacked.
   * @param offset Offset into bytes where the unpacking is to begin.
   * @param len Number of bytes to be unpacked.
   * @param kind This int indicates the type of byte_unpack being requested. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in all of the
   * non-static fields being unpacked and the return of an integer indicating the number of
   * unpacked bytes. All other kind values result in no change to the exception contents,
   * and a return value of 0.
   */
  extern virtual function int unsigned do_byte_unpack ( const ref logic [7:0] bytes[], input int unsigned offset = 0, input int len = -1, input int kind = -1 );

  // ---------------------------------------------------------------------------
  /**
   * Hook called by the VMM shorthand macro after performing the automated 'copy'
   * routine.
   * 
   * @param to Destination class for teh copy operation
   */
  extern function void svt_transaction_copy_hook(`SVT_DATA_BASE_TYPE to = null);

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
dOzLt4S7tuXwUkMoFTGj81z1qGq8FbvuZub9PMshnZS34wT4w+rx3uOA7qGPGszj
QRSimdr/Mrpwd5TITM+lu5W8TQFMKUSzZSxsvRxVAbPENdA+MhwOkCNXpPg7XPdD
8QTWorkxBpBXOOcW1QwxhR7lT9z1IM/2yTjH1W/uflo=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 2418      )
AgMTy+kBEWH9HEBexdJdwDg8EO1p8VYBC0T6508CvIDw71LF6vvdicbaoHrZuof7
e+UTg1S+yQPWN7iY4TEwW2we7/iCQbktz0Lr/6sz5ePBmMVH0KyXCuJrkoHzbUaO
lb5t+gq/cTzKCzhKZk7SUdnhMeXICJ3vobUG+YrR1iesj9Hfddc1suMlmdMLAaPo
oSikdE1ctl79QAUcxHWAJTWS0pwg6mAGyhFewviqDbZCTBOg91/cI+6Q61Tryz1G
zZ/BaFTRxi5scpXadENt4nGpdSep3uEqqDTlfRvestD4me0eg80M5p0j1+6na4jR
mMxa7mB0PQYHl6HgXgjcLnzKkbmogzBdgHXPyAWGRvMkraFTjbPyAvBZ3q0FF389
5D1YOsGJcm6n5zLd+73QfCjwoRLnijLxOsUsQ+OfxR0lNxyPVPEh4/VXhO6+zbwH
aSax8Lei7tM1P31Okc0K1Ctp9CsCdsO17Sei6yympm0rYTeFQTDY+JbH6B4LFF8T
pYIpYDCbzLXpk696Na9uHYV9GN3cijNhY1iu2BJ5amvTg9iUAHjU20HneXQ2g6tI
gMeyzN5jYuIqn60SGvyIzo3+34cqqaFyQWTrJU29C5Zf3CU+74FLRkg6C9Pyuh0h
n9/md3ABlyFguc2+Zs6zsWsEy+BOB+K6DklOm58WnWJi7LhzTXAFXObMOvmp/qsH
6rvJT8NqlxAb2UEmp1+VgNVypv0yJOOxLpUZA9gF7JIFZ2ofhoM+64THcF5Fs00O
Qj6nqrkQ2/cWxVwmkyYY0MXjTbiRrfK+nTIpNtQTvz3URe4BCwywVgiw42i9vLNU
JgimhLhwdypxNMcqYLHqpAFz7+kKknZRHtFAwNMqXDwcUGX5Yu6i/6r7EzsaZee6
FEnpqIFEgtz1ahU450iC+8GgOOTZgIlPiYs/vo37BK503XDXMBM3v61M8XNjMzcJ
LCLqGo0hmEUOKu2QLnxD8j92pR0iSLExicELfwOay7CtM41tWyKZMoDFUqNV4ifY
/sm0UaemBWjMZxhvefKkw8lImNpaCyKQLHHzCgte+UGZOLVqJR3SYkDCnwoZIs1w
7ZwJMEpzPVZVQ9Q0g+5ujCwYtsMeqxsvTZZIUI1U2RavOhvWeJsR7LikXwFGC0Km
ItqeL5QNArPlfv/dbbPJxJ5AfEAKAJsFrOA+E23k7rA1TSOVac4MnE/IpeS/RGBI
3bi6p0vybKpG4T9fc7roWrmeCmmWKzeftciGPADx1A81gFXcyTyf6AS+O1v+q4Zq
`pragma protect end_protected 

`else

  // ---------------------------------------------------------------------------
  /** Override the 'do_copy' method to copy fields directly. */
  extern virtual function void do_copy(`SVT_XVM(object) rhs);

  // ---------------------------------------------------------------------------
  /** Override the 'do_compare' method to compare fields directly. */
  extern virtual function bit do_compare(`SVT_XVM(object) rhs, `SVT_XVM(comparer) comparer);

  // ---------------------------------------------------------------------------
  /**
   * Pack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_pack(`SVT_XVM(packer) packer);

  // ---------------------------------------------------------------------------
  /**
   * Unpack the fields in the `SVT_TRANSACTION_TYPE class.
   * 
   * @param packer Policy class
   */
  extern virtual function void do_unpack(`SVT_XVM(packer) packer);

`endif

  // ---------------------------------------------------------------------------
  /**
   * Checks to see that the data field values are valid.
   *
   * @param silent bit indicating whether failures should result in warning messages.
   * @param kind This int indicates the type of is_avalid check to attempt. Only supported
   * kind value is `SVT_TRANSACTION_BASE_TYPE::COMPLETE, which results in verification that the non-static
   * data members are all valid. All other kind values result in a return value of 1.
   */
  extern virtual function bit do_is_valid(bit silent = 1, int kind = -1);

  //----------------------------------------------------------------------------
  /**
   * Clears the contents of the transaction so that it can safely be reused.
   */
  extern virtual function void clear();

  //----------------------------------------------------------------------------
  /**
   * Displays the meta information to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.  Extends class flexibility in choosing what
   * meta information should be displayed.
   */
  extern virtual function string psdisplay_meta_info ( string prefix = "" );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short_via_pattern( svt_pattern pttrn, string prefix = "", bit hdr_only = 0 );

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet generally
   * necessary to uniquely identify that packet.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   * @param hdr_only (Optional: default = 0) If this argument is supplied, and
   * is '1', the function returns a 3-line table header string, which indicates
   * which packet data appears in the subsequent columns. If this argument is
   * '1', the <b>prefix</b> argument becomes the column label for the first header
   * column (still subject to the 8 character limit).
   */
  extern virtual function string psdisplay_short( string prefix = "", bit hdr_only = 0);

  //----------------------------------------------------------------------------
  /**
   * Returns a string that reports the essential contents of the packet
   * generally necessary to uniquely identify that packet. This method
   * basically consists of two calls to psdisplay_short(), with hdr_only = 1 and
   * hdr_only = 0, to create the header and body information for the transaction.
   *
   * @param prefix (Optional: default = "") The string given in this argument
   * becomes the first item listed in the value returned. It is intended to be
   * used to identify the component (or other source) that requested this string.
   * This argument should be limited to 8 characters or less (to accommodate the
   * fixed column widths in the returned string). If more than 8 characters are
   * supplied, only the first 8 characters are used.
   */
  extern virtual function string psdisplay_short_hdr_body(string prefix = "");

  //----------------------------------------------------------------------------
  /**
   * Returns a concise string (32 characters or less) that gives a concise
   * description of the data transaction. Can be used to represent the currently
   * processed data transaction via a signal.
   */
  extern virtual function string psdisplay_concise();

  //----------------------------------------------------------------------------
  /**
   * Displays the implementation list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_impl_elem_display Optional int used to control whether the method does
   * a full or partial display of the implementation queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_implementation ( string prefix = "", int max_impl_elem_display = -1 );

  //----------------------------------------------------------------------------
  /**
   * Displays the trace list to a string. Each line of the generated output
   * is preceded by <i>prefix</i>.
   *
   * @param prefix String which precedes each line in the display output.
   * @param max_trace_elem_display Optional int used to control whether the method does
   * a full or partial display of the trace queue. A value of -1 indicates
   * that the display rules controlled by `SVT_TRANSACTION_BASE_TYPE::max_array_elem_display should
   * simply be applied.
   */
  extern virtual function string psdisplay_trace ( string prefix = "", int max_trace_elem_display = -1 );

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
dv3ptJKzfSacaHbg2Y47fXQlxpsl5NMb+HSuqlzvTgt8urm2C3ndBK5Osflmajpa
TfB9XvurB2OVPnqKBn0bZZazTq1ELLuKIk6P8tVVM5dPDi4Ys9io5p6n+sNyEQTt
ta/DbASJYtD+CVu5+6U9dBvPvVRENR2VCl3R5BVElX0=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 3041      )
w2RhnR8Uxlm9dytYiYmoeUtQ4v00+9DgssC0nXt8fjYwA6mYTfWgViNi8IfnfXol
+P3udDRSXsrg/TEWh2KXdrtp4WVWPf/fI8V0wLX2mbbnG6rtKpZCDfDr877WFJEu
CYVmOvSOTDFKAqWLNYmtOu7RZOMMpz82UibjX0/OQBMLk3UlZcCLdMlqFy5bMDUr
GHCUqvwmXN7lhVOjus5K4x8oaj8vaU5EMAlr8xYXINPCKXUDh9eoYQaDbUzbc6gH
BYf56jiMAGrTyLTGFLWHuX2pegQASEAzbHJ/6LuUYKEgmTfhN9IglSnU6EgeRxJ+
p/U+mC9coYvwMxR8yeZ2aaaaPuwEqxlOjc0fEygSnRFDH/VElcUSBJ1cskor88CR
CmNcJXVKCMeZ55KfxUeGeVtnNOjjS3fmhAO9RSQfMrE5HK2Xk3FP9O8K1U5zyVVl
lutU5DNalJEMZQMl9bK6bSppJO9SCRW2sN+J5vvBHCJ8qiuuWcmO9EOQoC7mN5hx
bfzsZO5MYOSgvU7dOLfJALzGY74Y234UEKHCDT7RnJ0Q4AlleI5SbSjNQAU5piNo
pU7+lze5bwgR/NaSYXqGaYy5p7Z2TuUKMp0PIucYc59DWIA0dsayrbIGDsFVK/hI
ptRo9sSm5cpHshsip2rArg+m7lMfKtuXGBmWzbSAuDrD05YWCz8EKKtE961GI9eE
iKIM2s5UU/sgFe1CfxnKYCTIJvABfyyBx4Ln+ezt22zY9fEhQB8m8ww2bWpLz4se
qG2tNzmLFdKWQvbEAhLu7F3zIfSJSxG8Uh2JUahv3Hq9ktja5xxAg+/g1Jq1qNtD
`pragma protect end_protected 

`ifndef SVT_VMM_TECHNOLOGY
  //----------------------------------------------------------------------------
  /** Method which filters out any accept time values of -1. */
  extern virtual function time get_safe_accept_time();
`endif

  //----------------------------------------------------------------------------
  /** Method which filters out any begin time values of -1. */
  extern virtual function time get_safe_begin_time();

  //----------------------------------------------------------------------------
  /** Method which filters out any end time values of -1. */
  extern virtual function time get_safe_end_time();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the begin event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_begin_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the end event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_end_realtime();

  //----------------------------------------------------------------------------
  /**
   * Accessor method which returns the time at which the accept event was triggered as
   * a realtime value.
   */
  extern virtual function realtime get_accept_realtime();

  // ****************************************************************************
  // Transaction Specific Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * Method to allocate a new data converter. Extended classes with additional
   * converter capabilities should overload this method to allocate an extended
   * data converter supporting these additional capabilities.
   */
  extern virtual function svt_data_converter allocate_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to return the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to provide access
   * to the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function svt_data_converter get_data_converter();

  // ---------------------------------------------------------------------------
  /**
   * Method to set the current data converter. Extended classes which provide
   * data converter capabilities should overload this method to store away
   * the current data converter, typically shared as a static member of the
   * suite specific transaction object.
   */
  extern virtual function void set_data_converter(svt_data_converter new_converter);

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the 8b10b lookup tables.
   *
   * @param force_load Forces the 8b10b tables to be re-initialized.
   */
  extern virtual function void initialize_8b10b( bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Encodes an eight bit data value into its ten bit representation. The function
   * returns 0 and the output is unpredictable if Xs and Zs are passed in via the
   * argument.
   * 
   * @param data_in Eight bit value to be encoded.
   * @param data_k Flag that determines when the eight bit data represents a 
   * control character.
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected. If the encode operation fails then the value remains unchanged.
   * @param data_out Ten bit encoded data.
   */
  extern function bit encode_8b10b_data( input bit[7:0] data_in, input bit data_k, ref bit running_disparity, output bit[9:0] data_out );

  //----------------------------------------------------------------------------
  /**
   * Decodes a ten bit data value into its eight bit representation. The function
   * returns 0 and the output is unpredictable.
   * 
   * @param data_in Ten bit value to be decoded
   * @param running_disparity The value provided to this argument determines whether
   * the ten bit value is selected from the positive or negative disparity column.
   * The value is updated with the disparity of the new ten bit value that is 
   * selected.  If the encode operation fails then the value remains unchanged.
   * @param data_k Flag that determines when the Ten bit data represents a 
   * control character.
   * @param data_out Eight bit decoded data.
   */
  extern function bit decode_8b10b_data( input bit[9:0] data_in, ref bit running_disparity, output bit data_k, output bit[7:0] data_out );

  // ---------------------------------------------------------------------------
  /**
   * This method initializes the scrambling seed.
   */
  extern function void initialize_scrambling();

  //----------------------------------------------------------------------------
  /**
   * Function is used for scrambling a byte of data. Following 
   * rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) All D-codes and K-codes are scrambled.
   * 3) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array that contains data to be scrambled.
   * @param lfsr Sixteen bit value with which the function encodes the data.
   * It is up to the entity calling this function to keep track of the 
   * lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array constaing the scrambled data.
   */
  extern function void scramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

  //----------------------------------------------------------------------------
  /**
   * Function is used for unscrambling a byte of data. The function returns 0 and
   * the output is unpredictable if Xs and Zs are passed in via the argument. 
   * Following rules are followed while implementing this function:
   * 1) The LFSR implements the polynomial: G(X)=X^16+X^5+X^4+X^3+1
   * 2) There is no resetting of the LFSR under any condition.
   * 
   * @param array_in An array whose elements need to be unscrambled.
   * @param lfsr Is the Sixteen bit value with which the function decodes 
   * the data. It is up to the entity calling this function to keep track of 
   * the lfsr value and to provide the correct lfsr value on the subsequent calls.
   * @param array_out An array containing unscrambled data.
   */
  extern function void unscramble( input byte unsigned array_in[], ref bit[15:0] lfsr, output byte unsigned array_out[] );

//svt_vipdk_exclude
  // ---------------------------------------------------------------------------
  /**
   * This method initializes the CRC lookup table, saves the CRC width, and the initial
   * CRC value.
   * 
   * @param poly Polynomial used to initialize the CRC lookup table
   * @param width Width of the CRC lookup table that is generated
   * @param init The CRC value is initialized to this value
   * @param force_load Forces the CRC algorithm to be re-initialized
   */
  extern virtual function void initialize_crc(bit[31:0] poly, int width, bit[31:0] init, bit force_load = 0);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the CRC initial value.
   *
   * @return The CRC initial value.
   */
  extern virtual function bit[31:0] get_crc_initial_value();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC initial value.
   *
   * @param init The new CRC initial value.
   */
  extern virtual function void set_crc_initial_value(bit[31:0] init);

  // ---------------------------------------------------------------------------
  /**
   * Utility method for getting the crc polynomial value.
   *
   * @return The CRC polynomial value.
   */
  extern virtual function bit[31:0] get_crc_polynomial();

  // ---------------------------------------------------------------------------
  /**
   * Utility method for setting the CRC polynomial value.
   *
   * @param poly The new CRC polynomial value.
   */
  extern virtual function void set_crc_polynomial(bit[31:0] poly);

  // ---------------------------------------------------------------------------
  /**
   * This methods applies a byte to the CRC algorithm.
   * 
   * @param value Value to be applied to the CRC algorithm
   * @param init Optional argument that signifies that the CRC value should be initialied
   *        before the value is applied.
   */
  extern virtual function void apply_byte_to_crc(bit[7:0] value, bit init = 0);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the calculated CRC value.
   */
  extern virtual function bit[31:0] get_crc();

//svt_vipdk_end_exclude
  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #implementation property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #implementation transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_implementation_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #implementation property.
   */
  extern function `SVT_TRANSACTION_TYPE get_implementation(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method first sets up the causal reference for the implementation_xact
   * and then saves the implementation_xact in the #implementation transaction
   * list.
   */
  extern virtual function void store_context(`SVT_TRANSACTION_TYPE implementation_xact);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #causal_xact reference to point to the
   * causal transaction.
   */
  extern virtual function void store_causal_ref(`SVT_TRANSACTION_TYPE causal);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #causal_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null.
   */
  extern virtual task wait_for_causal_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method waits for the transaction's #causal_xact reference to point to
   * something other than null, but only for the indicated number of time units.
   * It gives up if the value isn't updated within the specificied number of
   * time units.
   *
   * @param wait_time The number of time units to wait before giving up.
   */
  extern virtual task wait_for_causal_ref_thru_time_unit(int wait_time = 1);

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #implementation transaction list, as well as any
   * causal references which may have been setup.
   */
  extern function void clear_implementation();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method is used to enable/disable the trace capability. The base
   * class implementation always returns 0, indicating that this feature is
   * disabled. Extended classes wishing to support this feature must
   * consider whether this feature should always be enabled, be enabled for
   * all instances of the extended class, or enabled on a per instance basis.
   * This method, and any supporting data fields, etc., in the extended class
   * should be implemented in accordance with these decisions.
   */
  extern virtual function bit enable_trace();

  // ---------------------------------------------------------------------------
  /**
   * This virtual method must be replaced by transactions that make use of the
   * #trace property. Derived transactions must return a typed
   * factory object which can be used when generating the transaction references
   * in the #trace transaction list.
   */
  extern virtual function `SVT_TRANSACTION_TYPE get_trace_xact_factory();

  // ---------------------------------------------------------------------------
  /**
   * Get the indexed transaction out of the #trace property.
   */
  extern function `SVT_TRANSACTION_TYPE get_trace(int ix);

  // ---------------------------------------------------------------------------
  /**
   * This method is used to add trace_xact to the #trace transaction list
   * associated with this transaction. It first sets up our transaction as the
   * #original_xact reference for the trace_xact transaction, and then saves the 
   * trace_xact transaction in the #trace transaction list.
   * @param trace_xact The transaction to be added to the #trace transaction list.
   * @param copy Bit indicating whether the trace_xact or a copy should be stored.
   * @param copy_depth If copy set to 1, indicates whether the copy should be done
   * with a DEEP or SHALLOW copy, thereby including or excluding objects such as
   * #implementation.
   */
  extern virtual function void store_trace(`SVT_TRANSACTION_TYPE trace_xact, bit copy = 1, recursive_op_enum copy_depth = SHALLOW);

  // ---------------------------------------------------------------------------
  /**
   * This method updates this transaction's #original_xact reference to point to the
   * original transaction.
   */
  extern virtual function void store_original_ref(`SVT_TRANSACTION_TYPE original);

  // ---------------------------------------------------------------------------
  /**
   * This method returns the #original_xact transaction reference.
   */
  extern function `SVT_TRANSACTION_TYPE get_original_ref();

  // ---------------------------------------------------------------------------
  /**
   * This method clears the #trace transaction list, as well as any
   * original references which may have been setup.
   */
  extern function void clear_trace();

  // ---------------------------------------------------------------------------
  /**
   * Determines if this transaction can reasonably be expected to function correctly
   * on the supplied cfg object.
   * 
   * @param cfg The svt_configuration to examine for supportability.
   * @param silent Indicates whether issues with the configuration should be reported.
   *
   * @return Returns '1' if sequence is supported by the configuration, '0' otherwise.
   */
  extern virtual function bit is_supported(svt_configuration cfg, bit silent = 0);

`ifdef SVT_UVM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to return a do_not_randomize value for the transaction.
   *
   * @return Always returns '0'.
   */
  extern virtual function bit get_do_not_randomize();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Utility method used to start a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_start(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);

  // ---------------------------------------------------------------------------
  /**
   * Utility method used to finish a transaction based on the provided priority.
   *
   * @param parent_sequence Containing sequence which is executing this transaction.
   * @param set_priority The priority provided to the sequencer for this transaction.
   */
  extern virtual task priority_finish(`SVT_XVM(sequence_base) parent_sequence = null, int set_priority = -1);
`endif

  // ---------------------------------------------------------------------------
  /**
   * Method to add this transaction to #recycled_xact, which is a queue of
   * recycled transactions. Transactions should only be recycled if the client
   * is sure that the transaction is no longer in use.
   */
  extern virtual function void recycle_me();

  // ---------------------------------------------------------------------------
  /**
   * Method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern virtual function `SVT_TRANSACTION_TYPE get_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * Static method to obtain a previously used transaction from #recycled_xact for
   * reuse. Calls clear() before returning the recycled transaction.
   *
   * @param class_name Used to help insure that the retrieved svt_transaction is
   * of the desired type.
   * @return The previously used transaction, ready for reuse.

   */
  extern static function `SVT_TRANSACTION_TYPE find_recycled_xact(string class_name);

  // ---------------------------------------------------------------------------
  /**
   * This method create/update the 'svt_pa_object_data' object data for use in the XML/FSDB which provides
   * basic information about the object. The transaction extension adds begin and end time information
   * to the object if provided by the base class.
   *
   * @param uid Optional string indicating the unique identification value for object. If not 
   * provided uses the 'get_uid()' method  to retrieve the value. 
   * @param typ Optional string indicating the 'type' of the object. If not provided
   * uses the type name for the class.
   * @param parent_uid Optional string indicating the UID of the object's parent. If not provided
   * the method uses get_causal_ref() to obtain a handle to the parent and obtain a parent_uid.
   * If no causal reference found the method assumes there is no parent_uid. To cancel the
   * causal reference lookup completely the client can provide a parent_uid value of
   * `SVT_DATA_UTIL_UNSPECIFIED. If `SVT_DATA_UTIL_UNSPECIFIED is provided the method assumes
   * there is no parent_uid.
   * @param channel Optional string indicating an object channel. If not provided
   * or set to `SVT_DATA_UTIL_UNSPECIFIED the method assumes there is no channel.
   *
   * @return The 'svt_pa_object_data' required for PA header.
   */
  extern virtual function svt_pa_object_data get_pa_obj_data(string uid = "", string typ = "",
                                                           string parent_uid = "", string channel = "");

  // ---------------------------------------------------------------------------
  /**
   * This method overides the super method to set the 'active_xml_start_time' to support backward
   * compatibility and call the super class method to save the object properties.
   *
   * @param writer Object which takes care of the basic write operations.
   * @param object_block_desc String that is placed in the 'object' block created for
   * the data object. If not specified method relies on get_xml_object_block_desc() method
   * to get default description.
   * @param prefix String to be placed at the beginning of each line in the file.
   *
   * @return Indicates success (1) or failure (0) of the save.
   */
  extern virtual function bit save_prop_vals_to_xml(svt_xml_writer writer, string object_block_desc = "", string prefix = "");

  // ---------------------------------------------------------------------------
  /** Method provided to get clean time values to support XML, FSDB and other output. 
   * This method has been deprecated. Clients should override 'get_clean_realtimes' 
   * instead of 'get_clean_times'.
   */
  extern virtual function void get_clean_times(ref time start_time, ref time end_time);

  // ---------------------------------------------------------------------------
  /** Method provided to get clean real time values to support XML, FSDB and other output. */
  extern virtual function void get_clean_realtimes(ref realtime start_time, ref realtime end_time);

  // ---------------------------------------------------------------------------
  /**
   * Method provided to get the transaction status for inclusion in XML and other output.
   *
   * @param status The overall transaction status.
   * @return Indicates whether the status was available (1) or not (0) and therefore whether
   * the status field should be used.
   */
  extern virtual function bit get_xact_status(ref status_enum status);

  // ****************************************************************************
  // Command Support Methods
  // ****************************************************************************

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow command
   * code to retrieve the value of a single named property of a data class derived from this
   * class. If the <b>prop_name</b> argument does not match a property of the class, or if the
   * <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1', with the value of the <b>prop_val</b>
   * argument assigned to the value of the specified property. However, If the property is a
   * sub-object, a reference to it is assigned to the <b>data_obj</b> (ref) argument.
   * In that case, the <b>prop_val</b> argument is meaningless. The component will then
   * store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val A <i>ref</i> argument used to return the current value of the property,
   * expressed as a 1024 bit quantity. When returning a string value each character
   * requires 8 bits so returned strings must be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @param data_obj If the property is not a sub-object, this argument is assigned to
   * <i>null</i>. If the property is a sub-object, a reference to it is assigned to
   * this (ref) argument. In that case, the <b>prop_val</b> argument is meaningless.
   * The component will then store the data object reference in its temporary data object array,
   * and return a handle to its location as the <b>prop_val</b> argument of the <b>get_data_prop</b>
   * task of the component. The command testbench code must then use <i>that</i>
   * handle to access the properties of the sub-object.
   * @return A single bit representing whether or not a valid property was retrieved.
   */
  extern virtual function bit get_prop_val(string prop_name, ref bit [1023:0] prop_val, input int array_ix, ref `SVT_DATA_TYPE data_obj);

  // ---------------------------------------------------------------------------
  /**
   * This method is used by a component's command interface, to allow
   * command code to set the value of a single named property of a data class derived from
   * this class. This method cannot be used to set the value of a sub-object, since sub-object
   * consruction is taken care of automatically by the command interface. If the <b>prop_name</b>
   * argument does not match a property of the class, or it matches a sub-object of the class,
   * or if the <b>array_ix</b> argument is not zero and does not point to a valid array element,
   * this function returns '0'. Otherwise it returns '1'.
   *
   * @param prop_name The name of a property in this class, or a derived class.
   * @param prop_val The value to assign to the property, expressed as a 1024 bit quantity.
   * When assigning a string value each character requires 8 bits so assigned strings must
   * be 128 characters or less.
   * @param array_ix If the property is an array, this argument specifies the index being
   * accessed. If the property is not an array, it should be set to 0.
   * @return A single bit representing whether or not a valid property was set.
   */
  extern virtual function bit set_prop_val(string prop_name, bit [1023:0] prop_val, int array_ix);

  // ---------------------------------------------------------------------------
  /**
   * Simple utility used to convert string property value representation into its
   * equivalent 'bit [1023:0]' property value representation. Extended to support
   * encoding of enum values.
   *
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort.
   *
   * @return Status indicating the success/failure of the encode.
   */
  extern virtual function bit encode_prop_val(string prop_name, string prop_val_string, ref bit [1023:0] prop_val, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * Provide string values for exception_list_opts and protocol_xacts_opts.
   * 
   * @param prop_name The name of the property being encoded.
   * @param prop_val_string The string describing the value to be encoded.
   * @param prop_val The bit vector encoding of prop_val_string.
   * @param typ Optional field type used to help in the encode effort. 
   *
   * @return The enum value corresponding to the desc.
   */
  extern virtual function bit decode_prop_val(string prop_name, bit [1023:0] prop_val, ref string prop_val_string, input svt_pattern_data::type_enum typ = svt_pattern_data::UNDEF);

  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the primitive data fields in the object. The svt_pattern_data::name
   * is set to the corresponding field name, the svt_pattern_data::value is set
   * to 0.
   *
   * @return An svt_pattern instance containing entries for all of the data fields.
   */
  extern virtual function svt_pattern do_allocate_pattern();

`ifdef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * This method allocates a pattern containing svt_pattern_data instances for
   * all of the data fields in the object that are to be included in the object's
   * XML output.
   *
   * @return An svt_pattern instance containing entries for all of the fields
   * required for XML output of the data object.
   */
  extern virtual function svt_pattern allocate_xml_pattern();
`endif

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Extension of the `SVT_TRANSACTION_OBJECT_TYPE::convert2string() method needed so that
   * extensions of this class can be used with the comparator classes.
   */
  extern virtual function string convert2string();

  // ---------------------------------------------------------------------------
  /**
   * Method used to set #comp_comparer, defining the function of the comp() compare.
   * If not provided comp() uses the #svt_sequence_item_base::relevant_comparer.
   */
  extern virtual function void set_comp_comparer(`SVT_XVM(comparer) comp_comparer);

  // ---------------------------------------------------------------------------
  /**
   * Implementation of the comp() method needed so that extensions of this class
   * can be used with the comparator classes.
   */
  extern virtual function bit comp(`SVT_TRANSACTION_TYPE to);
`endif

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
XB3KM6VJClfE1K9w1NH7QqWWcw23Y6bm/K0KX0trA6eL1lA9mEZY/kQ2WSTrRzg8
EZsykufnCViGexTCB96rbcHV/IEbD2ZavjQZm24KFbGeGT+50P90F50ki0jxNyVz
9jHXthLQPEYtM2+2sOfK87fBq5CGNUlXmr2aQUIdT0k=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 13145     )
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
`pragma protect end_protected
  
//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
Cv0HYqDywe4soPUpa2LPrQUOPQk0kC1IikoJu1BZmB6GMLwTbpV9u/BF729USghW
52HdHUB3tLqJTTX0u2OCUNXQNzj88WYQOYBUZngd0yf/nyTUtTl7UCHY73yQVlGK
tb1hMu0dsRgT9APzdp1X2TDOhRiuJwcWHjsqNz5vtn8=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 16800     )
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
Kh20sLVgt9rMu1GPzkLnrg==
`pragma protect end_protected

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'on' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_on();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the begin event
   * independent of the underlying methodology.
   */
  extern virtual function bit begin_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which identifies the 'off' state of the end event
   * independent of the underlying methodology.
   */
  extern virtual function bit end_is_off();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the beginning of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_begin();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of this transaction
   * independent of the underlying methodology.
   */
  extern virtual task wait_end();

  // ---------------------------------------------------------------------------
  /**
   * Utility method which can be used to wait for the end of the last transaction
   * in the implementation queue.
   */
  extern virtual task wait_end_last_implementation();

`ifndef SVT_VMM_TECHNOLOGY
  // ---------------------------------------------------------------------------
  /**
   * Bridge method providing a single call to get integral recording transaction 
   * handle for this sequence.
   */
  extern virtual function int svt_get_tr_handle();
`endif

  // ---------------------------------------------------------------------------
  /** Method to get the is_internal value. */
  extern virtual function bit get_is_internal();

  // ---------------------------------------------------------------------------
  /** Method to set the is_internal value. */
  extern virtual function void set_is_internal(bit is_internal = 1);
      
  // ---------------------------------------------------------------------------
endclass

// =============================================================================

//svt_vcs_lic_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
D5s4BHhLZMCeT8st+2H16lqnqdYs5yQ13uv9zNbT1StQ23i03O5wyQO+P+sDu/j9
CBLK88IB09tMMj717k5WVtFD4M8plKcrvhc3p+njEwBIhyFv/hnqBC7XfWsLScq+
uFWnAHI/3fpKvVtRYwXh3IyX3v8n8C6C65Dy64hyC94=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 18252     )
gvUiDAx/dI+X8bTig48vVlAXdShKRqmJS9BC1x20fye5hJqVWdydoHJ+VwEMfER8
27ptBcih7hcrqB8qmcuCulpWDpviKg30yyc3dqEgVcp06X80T7YLifmc0LEv8EXL
zVs1G52Au0xmNs9l+OwAeZ6uCDSSNcfl90pnYRaIWSKt27iKj5yqyR7H8NJ20DWZ
KcIe3WwV482lf/2aUiTdmFhcPdb8FvFfDuRVQZx/AHmqSQF1hIhs1BGDkhiAtaac
h7zThIX9nv6NuEPQKHC8QIMP9xxFzNZj102jVlcDIOfOLviRI5E8bW1x42VmOZq9
+NROX/nKsQY3Zq7UIlwgaduxZ886K1sR85QvKIEwXiBppNi4hyqHiRfV/clxkOvG
JZWyjtLRKbWeiaoiNaqITERJl5tPFBqUoeBL8EPGFo9lPbnAx3EXeK9HXUdU6+ms
Rj70H1ugI/VTYuOfq+aeGhKve6YvKzmCLJEnMk0NOqjwCswqeuBxoAjD0dFgTg3s
2PEWW0KaEDqr9/j/S/Bp6WKKob5qq8t/4BNO3GDsRoOzM9pMwMK1ZwcGJgfwDiNa
R2xW6u+q14u60+wVKS9ocz3g1r7T6DE63EfX8JdquLYprCI6eKBFNa7nBHW9XtO4
LVzy8SMb09TRoqcjIFCXfX1/vPeRVqqTiJVBSyvZyq3YfxYBrj+ne7yijP5Ufx5Q
RdZBrQaL6xs8K3yycts1fCSWHuD02VDpPWNnJf83bWzldTX28dYDccy6gHdWvXln
dx/OjEpeJ3uGIQHqjVv3Ux8mXT7copMk5QRpKeQTHkGFkexpMtjx/1ELwWh42fIT
nkdFAbqxwyyGfr/8HRnF/oV7pGA9Sdyy/V+19jhlBfZ62MAkLC4/hBkEGSvYb9As
DmGA/EOK9yutuiKPFAQTYYAp7LPjuJGHzKNBPCjMcu2TAgp8iUee51qaWD9NKVG2
FDvRMnyZf8lvOyxTjiX7n5qxEj8BV1coYFDFk1SmpZVRJKvc032Jrn8SqtxWwI/+
VNYqBH2wUpiDXld9vM0bpv1CgS+n+O1oHYuK18kurwVy1bzmmkYT5EI0anNpwCWV
6y20LgSxpucTvMS54lYJlxNKYTGJJJ6J4E+BfC0EX7z8eWcoRN/BPSMQIVABECHQ
qM34JDxL3SyLGUlCGKYetVKrVRfob+tmjTkocPoe7kNEcb+t7Yyr6Dc4xY4IOLnf
gZz5EpOi/t7VhEfuJTLSTd5JCEJ8OfJdLIlxClE+d0M9JRXdToQi8//enY3C/2i/
6rcILszhjXYRQhljf32j74CJBb8sG7y6WDaryuudFHYfP8B4QUyiQz08FKw3qT5P
PTN9quLuCSkc8VfrSZkRe4G7pUZY7PUgt0NHth4yN0B4NKf9ktt32KaRW7D3R1JS
zHB61GGgLk0u+bD96gXGwjh31dwW0U+i8e9kIptDAFdXlcZdUyCO4bfj3FXfnLZv
dxUqVQAqswT9dkJ9GMn0Bdb0A4ExoUbDEYNy6gEXekCi2GwG6ix7Gzkv2CtDDh7T
qIGNLbKe15uVky0d8q054RFY+KLYzzcGmNS3cfe86ra+eCpK/vY1u4QDWuhMAk5e
OeWPtQRqArw5pl8a/q8f9PcNstsquIfNVVFUPnxIa/5ILQGGvUw7VEKRc83xlwTG
zoeAeQI1JW2+Al7jWgfhxzQWxWwjAJqFpdf0HmwzWbCV9kLmd5ucOhMvhlZh+RRb
TzGHElVInTA6Y/57MK6MvJxNmRlTjEx/WlptVydWJIqpntmDRvjzTeTYQbAJyvRG
Qqdmk7OkT74gHj1QPn/mlcpfWMvE/o61YDN/eWRXATKUAEtuy9TfCiYSXr0wn9hQ
2gBtQP/gL5ClIyOWRay6IAqmLmL9HS2Pguzf9OMEZPpEGnEjaeh/+1gHmMiluSoU
Y1g3ou3uaC9B2iZQXRCdmw==
`pragma protect end_protected

//vcs_vip_protect
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
nIBkRPoqK9jfbszO/wiqrEGCIi6llAMkd4vAOMeYRU44W/hA5lp8ZPOYXfXVRbOg
NHr+A48mEqeBYkLo6GK1IVb8USyaGRLqpmK+sf6ZQav74oZxoROlY2HIsgf/cRIa
37LZf/on7bnNfzxxEx2FO9+bpAXrXWEM63lIROQ6t1c=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 103754    )
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
1sZx4+8Cy8DHV69pLrh9LAdn+GnY3j7gODbYtoEKSHepr6+6ZP8e2sTLel/d6JBG
s44hpecweg+7nT4TOrrmG5oFJABXUHgqRRHX/j6uC69E+ykxGzpAGarRqjXKcap/
RrU6brLcHnNO+vE/eBh/RH3X/YntEtli/lzzbhOuY+Sc1P1LGALmmbRJtJIgW4Oz
y9bGK068vcdatG4mv1UL9E/R6GYCmAogPqmtIOjU350UgDNZWkbhVDsgMRlrSXqL
xIdI/3zSHUff06r3MvALnVcDE5C2W+6TueixmOG7eMRO+ZtdvcsIVPqTxvTNY0qZ
yT2rbp+jm2/FX5maFTfr+9yGlgcZIwN0xbsua2M+PkszdJIE0YYfLX0xNvcGysSA
jr/AdGnnaMKTw8mvK+yiznVJyI+7GQLhIllpxi1Svi9AxMrnI+I1cGKbBurWLL+c
jJ59pfbliE42QmhQzBuuAnGqcqmfNsF0rDRzA/8BBTzO7Dc40hkr654wx4+d2Gpr
TA1ylxK99L16zO+/ORdyHc/gjktd/BB/8OTXGTME3qlzk7EQ8kN6wyAHnjy6b7pX
ir6ShLBruZ5JdNj9V5xtkcsEAY5qx3ti1U/O241skiZrfjes5UmMaqpafImkCEJZ
6eSojtxDeH1qr4NDsYmPgMZbBZzA7ja8MFGkPj6quDb0ipd/ly4JGfSr3fbmES+x
c/2OGfdlgK8ojNf95tewNGyxfV+3fpXQpv6XyexkmOHvu/QOBmDzVryu/Y6u5t66
b/CWw9VYHqdhWCRNmoQBdDNOYJZ1i+c5fypF6V7Yy9a36UJQwTINtCNzhs0FhzoV
VnY+OKFf+UFWf7PGMZFXPYbUlboVUld02Yj61R8Y0yplo3/l90KreoyOvuIHjCOs
jagXUSIHfkSZRzokjLLbaxaeVKP8g0w9o+iRiE6CzJSBMoJUm4hj8BDRMroRI3+A
VEb/XzR1VB7fGPn3GRxjU1Z/OL6seOKESve6RkY/w7hcKD7+gzu2uNzv7vzDuG4G
xqZr8S+jRWHRZ6qD09Nxnl+TUzE5yL86leEQ++iHXGTh7yBSDB8aid4AqvWX7cET
HzRnIyzKTBrGphAZnO85+mYrupwhXUCEtcCVjSunghuPo0l8E6gXNfAinp7FuPZI
Bq5ReC1Rd39T/IHLDtNRREX7ZPJhOAIgtr0q6KrsO0YMofR08puZIytZzAbbMTVD
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
B1qOwHBE98oNxuMq1Px3rQ==
`pragma protect end_protected

`endif // GUARD_SVT_TRANSACTION_SV

`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
N29vNW4xt8o6Ujd59j8ZAiFYwpQLdMxkdBy36Xtzvemp5DSDaDBEQZEyBU6ub59Y
uv5QZNRu5VjY2pUMSaHOc4Dxn8pbBcCU/55LQ5Y9GRKqx+L/CKkYw41CgDy9kpaJ
SqF1ZykdDB/iy8+5dJTENoK1qqhUsEGs9IdI/aPU3oU=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 103837    )
9UDZsGgV/snwI+ZxTKyQ9FQV9e+ZBoZg/P6rfwlSDscWThUtI2A9JZBCGX7tvpJW
eSk+xK9qm8K8CfjsjD0avc+MFhLSu98RX5oZWGLjXCFeMl8ri7Ppvs46KC54ZKPD
`pragma protect end_protected

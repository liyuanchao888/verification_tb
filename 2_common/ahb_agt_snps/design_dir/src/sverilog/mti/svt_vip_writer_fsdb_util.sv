//=======================================================================
// COPYRIGHT (C) 2014-2017 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

`ifndef GUARD_SVT_VIP_WRITER_FSDB_UTIL_SV
`define GUARD_SVT_VIP_WRITER_FSDB_UTIL_SV

// DPI APIs can be accessed only inside the module they have defined. Since UVM transaction recording uses
// DPI functions, if user uses SNPS UVM in there TB, then VIP code will have problem accessing the DPI 
// functions. So undefining the 'VERDI_TRANS_RECORDER_DPI' to define again.
`ifdef VERDI_TRANS_RECORDER_DPI_SVH
`undef VERDI_TRANS_RECORDER_DPI_SVH
`endif
`ifdef __VERDI_TRANS_HEADER
`include `SVT_DATA_UTIL_ARG_TO_STRING(`__VERDI_TRANS_HEADER)
`endif
`ifdef SVT_FSDB_ENABLE
`define SVT_VERDI_FSDB_LIBS_PRESENT
`endif
`ifdef __VERDI_TRANS_HEADER
`define SVT_VERDI_FSDB_LIBS_PRESENT
`endif

`ifdef SVT_VERDI_FSDB_LIBS_PRESENT
  // =============================================================================
  /**
   * The utility calss which provides the FSDB utility functions for all the FSDB writing which are
   * required for 'svt_vip_writer' class. 
   */
class svt_vip_writer_fsdb_util;
  
  // ----------------------------------------------------------------------------
  /**
   * The local handle of the 'svt_vip_writer_fsdb_util', to have the single instance of the 
   * 'svt_vip_writer_fsdb_util' class.
   */
  local static svt_vip_writer_fsdb_util fsdb_util;

  // ----------------------------------------------------------------------------
  /**
   * Constructs a new instance of the svt_vip_writer_fsdb_util class.
   *
   */
  extern local function new();

  // ----------------------------------------------------------------------------
  /**
   * The singleton instance creation function, since the function are util functions and we don't need to create.
   * multiple handles of the class. This function controls and create only one hanlde of the 'svt_vip_writer_fsdb_util'
   * class
   */
  extern static function svt_vip_writer_fsdb_util get_instance();


  // ****************************************************************************
  // General Object Methods
  // ****************************************************************************
  
  // ----------------------------------------------------------------------------
  /**
   * The FSDB transaction begin function, this functions records the begining of the
   * transaction into FSDB.
   * @param stream_id
   *            The stream id of the transaction to be started.
   * @param begin_time
   *            The begin time of the transaction.
   * @time_unit
   *            The time unit of the time needs to be recorded.
   * @return 
   *            The transaction id of the transaction which is just started.
   */
   extern function longint unsigned fsdb_trans_begin( longint unsigned stream_id,
                                                      realtime begin_time = -1,
                                                      string time_unit="" );
  
  //------------------------------------------------------------------------------
   /**
   * This function adds label data into FSDB for the given transaction id.
   * @param transaction_id
   *             The transaction id of the transaction for which the 
   *             label needs to be added.
   * @param label
   *             The label needs to be added.
   */
  extern function void fsdb_set_label(longint unsigned transaction_id, 
                                      string label );

  // ----------------------------------------------------------------------------
  /**
   * Specifies the transaction id the parent object for the object with the specified
   * transaction id.  This method can be called up until the point at which the object is 
   * ended.
   *
   * At the time this method is called, no checks are performed to validate the 
   * uid that is specified for the predecessor object.  This allows a predecessor
   * object to be specified as (a) an object that has not yet been created (assuming
   * that object uids are being managed / constructed by the VIP and are not being 
   * automatically generated by the VIP writer); or (b) the predecessor object has 
   * been created (so that the uid of the object has been constructed), but that
   * the object has not yet begun.
   *
   * If at the time the simulation ends, no object with the transaction id specified for the
   * parent object has been created, PA will report this situation when the
   * data created by the VIP is being read into a protocol view in a project.
   *
   * @param parent_trans_id
   *          The transaction id of the object whose predecessor object is to be specified.
   * @param child_trans_id
   *          The transaction_id of the predecessor object.
   */
  extern function void fsdb_set_parent_child_relation( longint unsigned parent_trans_id,
                                                       longint unsigned child_trans_id );
  
  // -------------------------------------------------------------------------------
  /**
   * Specifies the uid of the predecessor object for the object with the specified
   * uid.  This method can be called up until the point at which the object is 
   * ended.
   *
   * At the time this method is called, no checks are performed to validate the 
   * uid that is specified for the predecessor object.  This allows a predecessor
   * object to be specified as (a) an object that has not yet been created (assuming
   * that object uids are being managed / constructed by the VIP and are not being 
   * automatically generated by the VIP writer); or (b) the predecessor object has 
   * been created (so that the uid of the object has been constructed), but that
   * the object has not yet begun.
   *
   * If at the time the simulation ends, no object with the uid specified for the
   * predecessor object has been created, PA will report this situation when the
   * data created by the VIP is being read into a protocol view in a project.
   *
   * @param succ_trans_id
   *          The transaction id of the object whose predecessor object is to be specified.
   * @param pred_trans_id
   *          The transaction_id of the predecessor object.
   */
  extern function void fsdb_set_object_predecessor( longint unsigned succ_trans_id,
                                                    longint unsigned pred_trans_id ); 
 

  // ----------------------------------------------------------------------------
  /**
   * Adds a successor object to the object with the specified uid.  An object can
   * have multiple successor objects, as appropriate for the protocol.  This method
   * can be called up until the point at which the object is ended.
   *
   * At the time this method is called, no checks are performed to validate the 
   * uid that is specified for the successor object.  This allows a successor object
   * to be specified as (a) an object that has not yet been created (assuming that
   * object uids are being managed / constructed by the VIP and are not being 
   * automatically generated by the VIP writer); or (b) the successor object has 
   * been created (so that the uid of the object has been constructed), but that the
   * object has not yet begun.
   *
   * If at the time the simulation ends, no object with the uid specified for the
   * successor object has been created, PA will report this situation when the data
   * created by the VIP is being read into a protocol view in a project.
   *
   * @param pred_trans_id
   *          The transaction_id of the object to which a successor object is to be added.
   * @param succ_trans_id
   *          The transaction_id of the successor object.
   */
  extern function void fsdb_set_object_successor( longint unsigned pred_trans_id,
                                                  longint unsigned succ_trans_id ); 

  // ****************************************************************************
  // Object Field Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  // Bit Field Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Specifies the value of a bit field for an object.  This method can be 
   * called up until the point at which the object is ended; however, only
   * the last value specified is associated with the field.
   *
   * @param transaction_id 
   *          The transaction_id of the object to be modified.
   * @param field_name 
   *          The name to be field whose value is being specified.
   * @param field_value 
   *          The field value.
   * @param expected_field_value 
   *          The expected field value.  If this value differs from the field_value,
   *          the object will be marked as having an error condition.
   * @param has_expected
   *          The flag to indicate if expected_field_value differs from the
   *          field_value.
   */
  extern function void fsdb_set_object_field_value_bit( longint unsigned transaction_id,
                                                        string field_name,
                                                        bit    field_value,
                                                        bit    expected_field_value = 0,
                                                        bit    has_expected = 0 );

  //----------------------------------------------------------------------------
  // Bit-vector Field Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Specifies the value of a bit-vector field for an object.  This method can 
   * be called up until the point at which the object is ended; however, only
   * the last value specified is associated with the field.
   *
   * @param transaction_id 
   *          The transaction_id of the object to be modified.
   * @param field_name 
   *          The name to be field whose value is being specified.
   * @param field_value 
   *          The field value.
   * @param numbits
   *          The bits size of the value required for FSDB.
   * @param expected_field_value 
   *          The expected field value.  If this value differs from the field_value,
   *          the object will be marked as having an error condition.
   * @param has_expected
   *          The flag to indicate if expected_field_value differs from the
   *          field_value.
   */
  extern function void fsdb_set_object_field_value_bit_vector( longint unsigned transaction_id,
                                                               string       field_name,
                                                               bit [1023:0] field_value,
                                                               int          numbits = 4096,
                                                               bit [1023:0] expected_field_value = 0,
                                                               bit          has_expected = 0 );

  //----------------------------------------------------------------------------
  // Logic-vector Field Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Specifies the value of a logic-vector field for an object.  This method can 
   * be called up until the point at which the object is ended; however, only
   * the last value specified is associated with the field.
   *
   * @param transaction_id 
   *          The transaction_id of the object to be modified.
   * @param field_name 
   *          The name to be field whose value is being specified.
   * @param field_value 
   *          The field value.
   * @param numbits
   *          The bits size of the value required for FSDB.
   * @param expected_field_value 
   *          The expected field value.  If this value differs from the field_value,
   *          the object will be marked as having an error condition.
   * @param has_expected
   *          The flag to indicate if expected_field_value differs from the
   *          field_value.
   */
  extern function void fsdb_set_object_field_value_logic_vector( longint unsigned transaction_id,
                                                                 string         field_name,
                                                                 logic [1023:0] field_value,
                                                                 int            numbits = 4096,
                                                                 logic [1023:0] expected_field_value = 0,
                                                                 bit            has_expected = 0 );

  //----------------------------------------------------------------------------
  // Integer Field Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Specifies the value of a integer field for an object.  This method  can
   * be called up until the point at which the object is ended; however, only
   * the last value specified is associated with the field.
   *
   * @param transaction_id 
   *          The transaction_id of the object to be modified.
   * @param field_name 
   *          The name to be field whose value is being specified.
   * @param field_value 
   *          The field value.
   * @param numbits
   *          The bits size of the value required for FSDB.
   * @param expected_field_value 
   *          The expected field value.  If this value differs from the field_value,
   *          the object will be marked as having an error condition.
   * @param has_expected
   *          The flag to indicate if expected_field_value differs from the
   *          field_value.
   */
  extern function void fsdb_set_object_field_value_int( longint unsigned transaction_id,
                                                        string  field_name,
                                                        longint field_value,
                                                        int     numbits = 32,
                                                        longint expected_field_value = 0,
                                                        bit     has_expected = 0 );

  //----------------------------------------------------------------------------
  // Real Field Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Specifies the value of a real field for an object.  This method can be 
   * called up until the point at which the object is ended; however, only
   * the last value specified is associated with the field.
   *
   * @param transaction_id 
   *          The transaction_id of the object to be modified.
   * @param field_name 
   *          The name to be field whose value is being specified.
   * @param field_value 
   *          The field value.
   * @param expected_field_value 
   *          The expected field value.  If this value differs from the field_value,
   *          the object will be marked as having an error condition.
   * @param has_expected
   *          The flag to indicate if expected_field_value differs from the
   *          field_value.
   */
  extern function void fsdb_set_object_field_value_real( longint unsigned transaction_id,
                                                         string field_name,
                                                         real   field_value,
                                                         real   expected_field_value = 0,
                                                         bit    has_expected = 0 );

  //----------------------------------------------------------------------------
  // Time Field Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Specifies the value of a time field for an object.  This method can be 
   * called up until the point at which the object is ended; however, only
   * the last value specified is associated with the field.
   *
   * @param transaction_id 
   *          The transaction_id of the object to be modified.
   * @param field_name 
   *          The name to be field whose value is being specified.
   * @param field_value 
   *          The field value.
   * @param expected_field_value 
   *          The expected field value.  If this value differs from the field_value,
   *          the object will be marked as having an error condition.
   * @param has_expected
   *          The flag to indicate if expected_field_value differs from the
   *          field_value.
   */
  extern function void fsdb_set_object_field_value_time( longint unsigned transaction_id,
                                                         string field_name,
                                                         realtime   field_value,
                                                         realtime   expected_field_value = 0,
                                                         bit    has_expected = 0, 
                                                         string time_unit_val ="" );

  //----------------------------------------------------------------------------
  // String Field Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Specifies the value of a string field for an object.  This method can be
   * called up until the point at which the object is ended; however, only the
   * last value specified is associated with the field.
   *
   * @param transaction_id
   *          The transaction_id of the object to be modified.
   * @param field_name 
   *          The name to be field whose value is being specified.
   * @param field_value 
   *          The field value.
   * @param expected_field_value 
   *          The expected field value.  If this value differs from the field_value,
   *          the object will be marked as having an error condition.
   * @param has_expected
   *          The flag to indicate if expected_field_value differs from the
   *          field_value.
   */
  extern function void fsdb_set_object_field_value_string( longint unsigned transaction_id,
                                                           string field_name,
                                                           string field_value,
                                                           string expected_field_value = "",
                                                           bit    has_expected = 0 );

  //----------------------------------------------------------------------------
  // Tag Methods
  //----------------------------------------------------------------------------

  // ---------------------------------------------------------------------------
  /**
   * Adds a tag to an object.  This method can be called up until the point at
   * which the object is ended; however, only the last value specified is
   * associated with the object.
   *
   * @param transaction_id 
   *          The FSDB transanction_id of the object to be tagged.
   * @param tag_name 
   *          The name of the tag to be added.
   */
  extern function void fsdb_add_object_tag( longint unsigned transaction_id,
                                            string tag_name );

  //-----------------------------------------------------------------------------
  /**
   * Create stream inside FSDB and retrun the stream id if success, returns '0' indicating
   * failure so that the caller can handle the error.
   * 
   * @param stream_full_name
   *            The full name of the stream to be created
   * @param stream_file_name
                The file name of FSDB
   * @return the stream id if sucess, 0 if failure.
   */
  extern function longint unsigned fsdb_create_stream(string stream_full_name, 
                                                      string stream_file_name);

  //-----------------------------------------------------------------------------
  /**
   * End the created stream 
   *
   * @param stream_id
   *            The stream id which needs to ended in FSDB
   */
  extern function void fsdb_stream_end ( longint unsigned stream_id );

  //-----------------------------------------------------------------------------
  /**
   * End the transaction which was begun earlier 
   *
   * @param trans_id
   *              The transaction id which needs to ended in FSDB
   */
  extern function void fsdb_trans_end ( longint unsigned trans_id );

  // ----------------------------------------------------------------------------
  /**
   * Utility function used to add a scope attribute, incorporating 'fsdb_file' if present.
   * 
   * @param scope_name
   *            The name of the scope for which attribute needs to be added.
   * @param attr_name
   *            The name of the attribute to be added.
   * @param attr_value
   *            The value associated with the attribute
   * @param stream_file_name 
   *            The file name of the FSDB.
   */
  extern function void fsdb_add_scope_attribute(string scope_name, 
                                                string attr_name, 
                                                string attr_value, 
                                                string stream_file_name = "");

  // ----------------------------------------------------------------------------
  /**
   * Utility function used to add a stream attribute.
   * 
   * @param stream_id
   *            The stream id for which the attribute name and value needs to be added.
   * @param attr_name 
   *            The name of the attribute to be added.
   * @param attr_val
   *            The value associated with the attribute
   */
  extern function void fsdb_add_stream_attribute(longint unsigned stream_id, 
                                                 string attr_name, string attr_val);

  // ----------------------------------------------------------------------------
  /**
   * This function sets the custom transaction relation for the 'target_transaction_id' to the  
   * 'source_transaction_id' inside FSDB.
   *
   * @param source_transaction_id
   *          The transaction_id of the object whose custom relation object is to be specified.
   * @param target_transaction_id
   *          The transaction_id of the custom relation object.
   * @param relation_type
   *          The custom relation type which needs to associated, eg: if the two transactions
   *          are identical then the relation type value should 'identical'.
   * @param target_writer
   *          The "svt_vip_writer" instance with which the custom object is
   *          associated or null for the current writer.
   */
  extern function void fsdb_set_custom_relation( longint unsigned source_transaction_id,
                                                 longint unsigned target_transaction_id,
                                                 string relation_type,
                                                 svt_vip_writer target_writer = null );
endclass

// =============================================================================

  // ****************************************************************************
  // Constructor
  // ****************************************************************************

// ----------------------------------------------------------------------------
function svt_vip_writer_fsdb_util::new();
endfunction

// ----------------------------------------------------------------------------
function svt_vip_writer_fsdb_util svt_vip_writer_fsdb_util::get_instance();
  if ( fsdb_util == null ) 
    fsdb_util = new();
  return fsdb_util;
endfunction


  // ****************************************************************************
  // General Object Methods
  // ****************************************************************************

// ----------------------------------------------------------------------------
function longint unsigned svt_vip_writer_fsdb_util::fsdb_trans_begin( longint unsigned stream_id,
                                                                      realtime begin_time = -1,
                                                                      string time_unit="" );
  begin
    longint unsigned transaction_id;
    int state;
    // VERDI: call $fsdbTrans_begin() here, and save transaction id.
    // Leave it for FSDB to set the begin time if begin_time is -1 or 0.
    // Note that certian clients(Eg: USB packet transaction) passing begin time as zero, check for '<=0' instead of just -1.
    // Note that certain clients(Eg: PCIE DLLP, TLP transactions) pass begin time same as current simulation time, this was 
    // causing round off issues inside PLI, check 'begin_time' == current time and if equal leave the Verdi API to set time.
    // Floating point equality comparator might cause issue in certain case if there is issue with start time for 
    // XML/FSDB please check the comparator.
    if ( begin_time <= 0 || begin_time == $realtime) begin
`ifdef VERDI_DEF_TRANS_DPI_BEGIN
      transaction_id = fsdbTransDPI_begin (state, stream_id,  "+type+transaction", "");
`else
      transaction_id = $fsdbTrans_begin(stream_id, "+type+transaction");
`endif
    end else begin
      string options;
      int state = 0;
      static realtime st_begin_time = 0;
      static string st_time_unit = "";
      st_begin_time =  begin_time; 
      st_time_unit = time_unit;
`ifdef VERDI_DEF_TRANS_DPI_BEGIN
      $sformat (options,"+time+%0f +time_unit+%s", st_begin_time, st_time_unit); 
      transaction_id = fsdbTransDPI_begin(state, stream_id, "+type+transaction", options);
`else
      transaction_id = $fsdbTrans_begin(stream_id, "+type+transaction", "+time", st_begin_time, "+time_unit", st_time_unit);
`endif
    end
    return transaction_id;
  end
endfunction // fsdb_trans_begin

//------------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_label(longint unsigned transaction_id, 
                                                       string label );
  begin
    int state;
    static longint unsigned st_transaction_id;
    static string st_label;
    st_transaction_id = transaction_id;
    st_label = label;
`ifdef VERDI_DEF_TRANS_DPI_SET_LABEL
    fsdbTransDPI_set_label(state, st_transaction_id, label, "");
`else
    $fsdbTrans_set_label(st_transaction_id, st_label);
`endif
  end
endfunction // fsdb_set_label

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_predecessor( longint unsigned succ_trans_id,
                                                                     longint unsigned pred_trans_id );
  begin
    int state = 0;
    static longint unsigned st_succ_trans_id;
    static longint unsigned st_pred_trans_id;
    st_succ_trans_id = succ_trans_id;
    st_pred_trans_id = pred_trans_id;
    // Verdi supports only 'succ_pred' key, the order of the transaction id always as to be successor to predecessor.
`ifdef VERDI_DEF_TRANS_DPI_ADD_RELATION
    fsdbTransDPI_add_relation(state, "succ_pred", st_succ_trans_id, st_pred_trans_id, "");
`else
    $fsdbTrans_add_relation("succ_pred", st_succ_trans_id, st_pred_trans_id);
`endif
  end
endfunction

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_parent_child_relation( longint unsigned parent_trans_id,
                                                                        longint unsigned child_trans_id );
  begin
    int state = 0;
    static longint unsigned st_parent_trans_id;
    static longint unsigned st_child_trans_id;
    st_parent_trans_id = parent_trans_id;
    st_child_trans_id = child_trans_id;
`ifdef VERDI_DEF_TRANS_DPI_ADD_RELATION
    fsdbTransDPI_add_relation(state, "parent_child", st_parent_trans_id, st_child_trans_id, "");
`else
    $fsdbTrans_add_relation("parent_child", st_parent_trans_id, st_child_trans_id);
`endif
  end
endfunction

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_successor( longint unsigned pred_trans_id,
                                                                   longint unsigned succ_trans_id );
  begin
    int state = 0;
    static longint unsigned st_succ_trans_id;
    static longint unsigned st_pred_trans_id;
    st_succ_trans_id = succ_trans_id;
    st_pred_trans_id = pred_trans_id;
`ifdef VERDI_DEF_TRANS_DPI_ADD_RELATION
    fsdbTransDPI_add_relation(state, "succ_pred", st_succ_trans_id, st_pred_trans_id, "");
`else
    $fsdbTrans_add_relation("succ_pred", st_succ_trans_id, st_pred_trans_id);
`endif
  end
endfunction

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_trans_end( longint unsigned trans_id );
  begin
    int state = 0;
    static longint unsigned st_trans_id;
    st_trans_id = trans_id;
`ifdef VERDI_DEF_TRANS_DPI_END
    fsdbTransDPI_end(state, st_trans_id, "");
`else
    $fsdbTrans_end(st_trans_id);
`endif
  end
endfunction

  // ****************************************************************************
  // Object Field Methods
  // ****************************************************************************

  //----------------------------------------------------------------------------
  // Bit Field Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_field_value_bit( longint unsigned transaction_id,
                                                                         string field_name,
                                                                         bit    field_value,
                                                                         bit    expected_field_value = 0,
                                                                         bit    has_expected = 0 );
  begin
    int state = 0;
    static string attr_name = "";
    static string numbits_name = "";
    static longint unsigned st_transaction_id;
    static bit st_field_value;
    st_field_value = field_value;
    st_transaction_id = transaction_id;
    $sformat(attr_name, "+name+%s", field_name);
    if ( has_expected && field_value != expected_field_value ) begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_BITVEC_ATTR_WITH_EXPECTED_VALUE
      fsdbTransDPI_add_bitvec_attribute_with_expected_value(state, st_transaction_id, field_name, st_field_value, 1, expected_field_value, "+radix+bin");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, "+expect", expected_field_value);
`endif
    end else begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_BITVEC_ATTR
      fsdbTransDPI_add_bitvec_attribute(state, st_transaction_id, field_name, st_field_value, 1, "");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name);
`endif
    end
  end
endfunction

  //----------------------------------------------------------------------------
  // Bit-vector Field Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_field_value_bit_vector( longint unsigned transaction_id,
                                                                                string       field_name,
                                                                                bit [1023:0] field_value,
                                                                                int          numbits = 4096,
                                                                                bit [1023:0] expected_field_value = 0,
                                                                                bit          has_expected = 0 );
  begin
    int state = 0;
    static longint unsigned  st_transaction_id = 0;
    static string attr_name = "";
    static string numbits_name = "";
    static bit [1023:0] st_field_value = 0;
    st_transaction_id = transaction_id;
    $sformat(attr_name, "+name+%s", field_name);
    $sformat(numbits_name,"+numbit+%0d",numbits);
    st_field_value = field_value;
    // Only write out the expected value if it is present and it is different from the actual value.
    if ( has_expected && field_value != expected_field_value) begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_BITVEC_ATTR_WITH_EXPECTED_VALUE
      fsdbTransDPI_add_bitvec_attribute_with_expected_value(state, st_transaction_id, field_name, st_field_value, numbits, expected_field_value, "+radix+hex");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, "+expect", expected_field_value, numbits_name, "+radix+hex");
`endif
    end else begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_BITVEC_ATTR
      fsdbTransDPI_add_bitvec_attribute(state, st_transaction_id, field_name, st_field_value, numbits, "+radix+hex");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, numbits_name, "+radix+hex");
`endif
    end
  end
endfunction

  //----------------------------------------------------------------------------
  // Logic-vector Field Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_field_value_logic_vector( longint unsigned transaction_id,
                                                                                  string         field_name,
                                                                                  logic [1023:0] field_value,
                                                                                  int            numbits = 4096,
                                                                                  logic [1023:0] expected_field_value = 0,
                                                                                  bit            has_expected = 0 );
  begin
    int state = 0;
    static longint unsigned  st_transaction_id = 0;
    static string attr_name = "";
    static string numbits_name = "";
    static logic [1023:0] st_field_value = 0;
    st_transaction_id = transaction_id;
    $sformat(attr_name, "+name+%s", field_name);
    $sformat(numbits_name,"+numbit+%0d",numbits);
    st_field_value = field_value;
    // Only write out the expected value if it is present and it is different from the actual value.
    if ( has_expected && field_value != expected_field_value) begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_LOGICVEC_ATTR_WITH_EXPECTED_VALUE
      fsdbTransDPI_add_logicvec_attribute_with_expected_value(state, st_transaction_id, field_name, st_field_value, numbits, expected_field_value, "+radix+hex");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, "+expect", expected_field_value, numbits_name, "+radix+hex");
`endif
    end else begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_LOGICVEC_ATTR_WITH_EXPECTED_VALUE
      fsdbTransDPI_add_logicvec_attribute(state, st_transaction_id, field_name, st_field_value, numbits, "+radix+hex");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, numbits_name, "+radix+hex");
`endif
    end
  end
endfunction

  //----------------------------------------------------------------------------
  // Integer Field Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_field_value_int( longint unsigned  transaction_id,
                                                                         string  field_name,
                                                                         longint field_value,
                                                                         int     numbits = 32,
                                                                         longint expected_field_value = 0,
                                                                         bit     has_expected = 0 );
  begin
    int state = 0;
    static longint unsigned  st_transaction_id = 0;
    static string attr_name = "";
    st_transaction_id = transaction_id;
    $sformat(attr_name, "+name+%s", field_name);
    if (numbits == 16) begin // shortint 
      static shortint field_value_shortint = 0; 
      field_value_shortint = shortint'(field_value);
      // Only write out the expected value if it is present and it is different from the actual value.
      if ( has_expected && field_value != expected_field_value ) begin
        static shortint st_shortint_expected_field_value = 0; 
        st_shortint_expected_field_value = shortint'(expected_field_value);
`ifdef VERDI_DEF_TRANS_DPI_ADD_SHORTINT_ATTR_WITH_EXPECTED_VALUE
        fsdbTransDPI_add_shortint_attribute_with_expected_value(state, st_transaction_id, field_name, field_value_shortint, st_shortint_expected_field_value, "+radix+dec");
`else
        $fsdbTrans_add_attribute(st_transaction_id, field_value_shortint, attr_name, "+radix+dec", "+expect", st_shortint_expected_field_value);
`endif
      end else
`ifdef VERDI_DEF_TRANS_DPI_ADD_SHORTINT_ATTR
        fsdbTransDPI_add_shortint_attribute(state, st_transaction_id, field_name, field_value_shortint, "+radix+dec");
`else
        $fsdbTrans_add_attribute(st_transaction_id, field_value_shortint, attr_name, "+radix+dec");
`endif
    end else if (numbits == 32) begin // integer
      static integer field_value_int = 0;
      field_value_int = int'(field_value);
      // Only write out the expected value if it is present and it is different from the actual value.   
      if ( has_expected && field_value != expected_field_value ) begin
        static integer st_int_expected_field_value = 0; 
        st_int_expected_field_value = int'(expected_field_value);
`ifdef VERDI_DEF_TRANS_DPI_ADD_INT_ATTR_WITH_EXPECTED_VALUE
        fsdbTransDPI_add_int_attribute_with_expected_value(state, st_transaction_id, field_name, field_value_int, st_int_expected_field_value, "+radix+dec");
`else
        $fsdbTrans_add_attribute(st_transaction_id, field_value_int, attr_name, "+radix+dec", "+expect", st_int_expected_field_value);
`endif
      end else
`ifdef VERDI_DEF_TRANS_DPI_ADD_INT_ATTR
        fsdbTransDPI_add_int_attribute(state, st_transaction_id, field_name, field_value_int, "+radix+dec");
`else
        $fsdbTrans_add_attribute(st_transaction_id, field_value_int, attr_name, "+radix+dec");
`endif
    end else begin
      static longint field_value_longint = 0; 
      field_value_longint = field_value;
      // Only write out the expected value if it is present and it is different from the actual value.  
      if ( has_expected && field_value != expected_field_value ) begin
        static longint st_longint_expected_field_value = 0; 
        st_longint_expected_field_value = expected_field_value;
`ifdef VERDI_DEF_TRANS_DPI_ADD_LONGINT_ATTR_WITH_EXPECTED_VALUE
        fsdbTransDPI_add_longint_attribute_with_expected_value(state, st_transaction_id, field_name, field_value_longint, st_longint_expected_field_value, "+radix+dec");
`else
        $fsdbTrans_add_attribute(st_transaction_id, field_value_longint, attr_name, "+radix+dec", "+expect", st_longint_expected_field_value);
`endif
      end else
`ifdef VERDI_DEF_TRANS_DPI_ADD_LONGINT_ATTR
        fsdbTransDPI_add_longint_attribute(state, st_transaction_id, field_name, field_value_longint, "+radix+dec");
`else
        $fsdbTrans_add_attribute(st_transaction_id, field_value_longint, attr_name, "+radix+dec");
`endif
      end
  end
endfunction
                                                  
  //----------------------------------------------------------------------------
  // Real Field Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_field_value_real( longint unsigned transaction_id,
                                                                          string field_name,
                                                                          real   field_value,
                                                                          real   expected_field_value = 0,
                                                                          bit    has_expected = 0 );
  begin
    int state = 0;
    static longint unsigned  st_transaction_id = 0;
    static string attr_name = "";
    static real st_field_value = 0; 
    st_transaction_id = transaction_id;
    $sformat(attr_name, "+name+%s", field_name);
    st_field_value = field_value;
    // Only write out the expected value if it is present and it is different from the actual value.
    if ( has_expected && field_value != expected_field_value) begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_REAL_ATTR_WITH_EXPECTED_VALUE
      fsdbTransDPI_add_real_attribute_with_expected_value(state, st_transaction_id, field_name, st_field_value, expected_field_value, "");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, "+expect", expected_field_value);
`endif
    end else begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_REAL_ATTR
      fsdbTransDPI_add_real_attribute(state, st_transaction_id, field_name, st_field_value, "");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name);
`endif
    end
  end
endfunction
                                                  
  //----------------------------------------------------------------------------
  // Time Field Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_field_value_time( longint unsigned transaction_id,
                                                                          string field_name,
                                                                          realtime   field_value,
                                                                          realtime   expected_field_value = 0,
                                                                          bit    has_expected = 0, 
                                                                          string time_unit_val = ""  );
  begin
    int state = 0;
    static longint unsigned  st_transaction_id = 0;
    static string attr_name = "";
    static realtime st_field_value = 0; 
    st_transaction_id = transaction_id;
    st_field_value = field_value;
    $sformat(attr_name, "+name+%s", field_name);
    // Only write out the expected value if it is present and it is different from the actual value.
    if ( has_expected && field_value != expected_field_value ) begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_REAL_ATTR_WITH_EXPECTED_VALUE
      fsdbTransDPI_add_real_attribute_with_expected_value ( state, st_transaction_id, field_name, st_field_value, expected_field_value, { "+time_unit+", time_unit_val } );
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value,  attr_name, "+radix+dec", "+expect", expected_field_value,"time_unit",time_unit_val);
`endif
    end else begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_REAL_ATTR
      fsdbTransDPI_add_real_attribute ( state, st_transaction_id, field_name, st_field_value, { "+time_unit+",time_unit_val } );
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, "+time_unit", time_unit_val);
`endif
    end
  end
endfunction
                                                  
  //----------------------------------------------------------------------------
  // String Field Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_object_field_value_string( longint unsigned transaction_id,
                                                                            string field_name,
                                                                            string field_value,
                                                                            string expected_field_value = "",
                                                                            bit    has_expected = 0 );
  begin
    int state = 0;
    static longint unsigned  st_transaction_id = 0;
    static string attr_name = "";
    static string st_field_value = ""; 
    st_transaction_id = transaction_id;
    $sformat(attr_name, "+name+%s", field_name);
    st_field_value = field_value;
    // Only write out the expected value if it is present and it is different from the actual value.
    if ( has_expected && field_value != expected_field_value ) begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_STRING_ATTR_WITH_EXPECTED_VALUE
      fsdbTransDPI_add_string_attribute_with_expected_value(state, st_transaction_id, field_name, st_field_value, expected_field_value, "");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name, "+expect", expected_field_value);
`endif
    end else begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_STRING_ATTR
      fsdbTransDPI_add_string_attribute(state, st_transaction_id, field_name, st_field_value, "");
`else
      $fsdbTrans_add_attribute(st_transaction_id, st_field_value, attr_name);
`endif
    end
  end
endfunction

  //----------------------------------------------------------------------------
  // Tag Methods
  //----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_add_object_tag( longint unsigned transaction_id,
                                                             string tag_name );
  begin
    int state = 0;
    // Find the svt_vip_writer_object instance associated with the specified
    // object uid.  If no such object is found, return 0, indicating failure.
    static longint unsigned  st_transaction_id = 0;
    static string st_tag_name = ""; 
    st_transaction_id = transaction_id;
    st_tag_name = tag_name;
`ifdef VERDI_DEF_TRANS_DPI_ADD_TAG
    fsdbTransDPI_add_tag(state, st_transaction_id, st_tag_name, "");
`else
    $fsdbTrans_add_tag(st_transaction_id, st_tag_name);
`endif
  end
endfunction

  // ****************************************************************************
  // Local Methods for FSDB dump
  // ****************************************************************************

//-----------------------------------------------------------------------------------
function longint unsigned svt_vip_writer_fsdb_util::fsdb_create_stream( string stream_full_name, 
                                                                        string stream_file_name );
  begin
    longint unsigned stream_id = 0;
    static string st_stream_full_name = "";
    static string st_stream_file_name = "";
    int state = 0;
     
    //create new stream
    st_stream_full_name = stream_full_name;

    if (stream_file_name == "")
`ifdef VERDI_DEF_TRANS_DPI_CREATE_STREAM_BEGIN
      stream_id = fsdbTransDPI_create_stream_begin(state, st_stream_full_name, "", "");
`else
      stream_id = $fsdbTrans_create_stream_begin(st_stream_full_name);
`endif
    else begin
      $sformat(st_stream_file_name, "+fsdbfile+%s", stream_file_name);
`ifdef VERDI_DEF_TRANS_DPI_CREATE_STREAM_BEGIN
      stream_id = fsdbTransDPI_create_stream_begin(state, st_stream_full_name, "", st_stream_file_name);
`else 
      stream_id = $fsdbTrans_create_stream_begin(st_stream_full_name, st_stream_file_name);
`endif
    end
    return stream_id;
  end
endfunction

//-----------------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_add_stream_attribute(longint unsigned stream_id, 
                                                                  string attr_name, 
                                                                  string attr_val);
  begin
   int state = 0;
   static longint unsigned st_stream_id;
   static string st_attr_name;
   static string st_attr_val;
   st_stream_id = stream_id;
   st_attr_name = {"+name+", attr_name};
   st_attr_val = attr_val;
`ifdef VERDI_DEF_TRANS_DPI_ADD_STRING_ATTR
   fsdbTransDPI_stream_add_string_attribute(state, st_stream_id, attr_name, attr_val, "");
`else
   $fsdbTrans_add_stream_attribute(st_stream_id, st_attr_val, st_attr_name);
`endif
  end
endfunction

//-----------------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_stream_end(longint unsigned stream_id);
  begin
    static longint unsigned st_stream_id;
    int state = 0;
    st_stream_id = stream_id;
`ifdef VERDI_DEF_TRANS_DPI_CREATE_STREAM_END
    fsdbTransDPI_create_stream_end(state, stream_id, "");
`else
    $fsdbTrans_create_stream_end(st_stream_id);
`endif
  end
endfunction

//-----------------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_add_scope_attribute( string scope_name, 
                                                                  string attr_name, 
                                                                  string attr_value, 
                                                                  string stream_file_name = "");
  // Use static variables for improved performance with the Verdi calls
  static string _scope_name;
  static string _attr_name;
  static string _attr_value;
  int state = 0;
  _scope_name = scope_name;
  _attr_name = { "+name+", attr_name };
  _attr_value = attr_value;
  if ( stream_file_name == "" ) begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_STRING_ATTR
    fsdbTransDPI_scope_add_string_attribute(state, _scope_name, attr_name, attr_value, "");
`else
    $fsdbTrans_add_scope_attribute(_scope_name, _attr_value, _attr_name);
`endif
  end else begin
`ifdef VERDI_DEF_TRANS_DPI_ADD_STRING_ATTR
    fsdbTransDPI_scope_add_string_attribute(state, _scope_name, attr_name, attr_value, stream_file_name);
`else
    $fsdbTrans_add_scope_attribute(_scope_name, _attr_value, _attr_name, stream_file_name);
`endif
  end
endfunction

// ----------------------------------------------------------------------------
function void svt_vip_writer_fsdb_util::fsdb_set_custom_relation( longint unsigned source_transaction_id,
                                                                  longint unsigned target_transaction_id,
                                                                  string relation_type, 
                                                                  svt_vip_writer target_writer = null );
  begin
    int state = 0;
`ifdef VERDI_DEF_TRANS_DPI_ADD_RELATION
    fsdbTransDPI_add_relation( state, relation_type, source_transaction_id, target_transaction_id, "");
`else
    $fsdbTrans_add_relation(relation_type, source_transaction_id, target_transaction_id);
`endif
  end
endfunction

`endif // SVT_VERDI_FSDB_LIBS_PRESENT
// =============================================================================

`endif // GUARD_SVT_VIP_WRITER_SV
`pragma protect begin_protected
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.5b"
`pragma protect data_method = "aes128-cbc"
`pragma protect key_keyowner = "Mentor Graphics Corporation" , key_keyname = "MGC-VERIF-SIM-RSA-1" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64")
JRNXnNbZbCJ7M95nbYopSnDmFGyxtX4ubfmV77OmN7LGR4TGJeCDK8Du649ws0Bp
47EP9KBwKQagSBytJcRJU3HHgbP/0660zkOF0SPYJ8qs47m5XS1SttEBwc5vu7+A
0EMW7gbeoSlV298tiRufq75MPIoRamse9UYOwb63yz4=
`pragma protect data_block encoding = ( enctype = "base64", bytes = 83        )
jR6PJCo2hZMQAeVg6bQnYkvtq91t5u9q8ZU2Qv9iRd3GQjn67q4w12QA3+KP5Ib1
KoOTbKeDVGuCrWRbFN07phS2wP3yZ9tp0bUwqFqESFSLNMlzKmDNnyz9Fo8wS5I/
`pragma protect end_protected

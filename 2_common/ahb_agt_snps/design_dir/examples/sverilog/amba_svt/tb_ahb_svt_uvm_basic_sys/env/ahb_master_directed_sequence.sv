
/**
 * Abstract:
 * ahb_master_directed_sequence is used by test to provide initiator
 * scenario information to the Master agent present in the System Env.
 * This class defines a sequence in which a AHB WRITE followed by a AHB READ
 * sequence is generated by assigning values to the transactions rather than
 * randomization, and then transmitted using `uvm_send.
 *
 * Execution phase: main_phase
 * Sequencer: Master agent sequencer
 */

`ifndef GUARD_AHB_MASTER_DIRECTED_SEQUENCE_SV
`define GUARD_AHB_MASTER_DIRECTED_SEQUENCE_SV

class ahb_master_directed_sequence extends svt_ahb_master_transaction_base_sequence;

  /** Parameter that controls the number of transactions that will be generated */
  rand int unsigned sequence_length = 10;

  /** Constrain the sequence length to a reasonable value */
  constraint reasonable_sequence_length {
    sequence_length <= 100;
  }

  /** UVM Object Utility macro */
  `uvm_object_utils(ahb_master_directed_sequence)

  /** Class Constructor */
  function new(string name="ahb_master_directed_sequence");
    super.new(name);
  endfunction
  
  virtual task body();
    svt_ahb_master_transaction write_tran, read_tran;
    svt_configuration get_cfg;
    bit status;
    `uvm_info("body", "Entered ...", UVM_LOW)

    super.body();

    status = uvm_config_db #(int unsigned)::get(null, get_full_name(), "sequence_length", sequence_length);
    `uvm_info("body", $sformatf("sequence_length is %0d as a result of %0s.", sequence_length, status ? "config DB" : "randomization"), UVM_LOW);

    /** Obtain a handle to the port configuration */
    p_sequencer.get_cfg(get_cfg);
    if (!$cast(cfg, get_cfg)) begin
      `uvm_fatal("body", "Unable to $cast the configuration to a svt_ahb_port_configuration class");
    end

    for(int i = 0; i < sequence_length; i++) begin

      /** Set up the write transaction */
      `uvm_create(write_tran)
      write_tran.cfg          = cfg;
      
      `ifndef SVT_UVM_1800_2_2017_OR_HIGHER
        `uvm_rand_send_with (write_tran,
        {  
          write_tran.xact_type    == svt_ahb_transaction::WRITE;
          write_tran.addr         == (32'h0000_0000 | ('h10 * i));
          write_tran.burst_type   == svt_ahb_transaction::INCR4;
          write_tran.burst_size   == svt_ahb_transaction::BURST_SIZE_32BIT;
          foreach (write_tran.data[i]) {
            write_tran.data[i] == i;
          }
        } ) 
      `else 
        `uvm_rand_send (write_tran,,
        {  
          write_tran.xact_type    == svt_ahb_transaction::WRITE;
          write_tran.addr         == (32'h0000_0000 | ('h10 * i));
          write_tran.burst_type   == svt_ahb_transaction::INCR4;
          write_tran.burst_size   == svt_ahb_transaction::BURST_SIZE_32BIT;
          foreach (write_tran.data[i]) {
            write_tran.data[i] == i;
          }
        } )
      `endif 

      /** Wait for the write transaction to complete */
      get_response(rsp);

      `uvm_info("body", "AHB WRITE transaction completed", UVM_LOW);

      /** Set up the read transaction */
      `uvm_create(read_tran)
      read_tran.cfg          = cfg;
      
      `ifndef SVT_UVM_1800_2_2017_OR_HIGHER
        `uvm_rand_send_with (read_tran,
        {  
          read_tran.xact_type    == svt_ahb_transaction::READ;
          read_tran.addr         == (32'h0000_0000 | ('h10 * i));
          read_tran.burst_type   == svt_ahb_transaction::INCR4;
          read_tran.burst_size   == svt_ahb_transaction::BURST_SIZE_32BIT;
        } )  
      `else 
        `uvm_rand_send (read_tran,,
        {  
          read_tran.xact_type    == svt_ahb_transaction::READ;
          read_tran.addr         == (32'h0000_0000 | ('h10 * i));
          read_tran.burst_type   == svt_ahb_transaction::INCR4;
          read_tran.burst_size   == svt_ahb_transaction::BURST_SIZE_32BIT;
        } )  
      `endif

      /** Wait for the read transaction to complete */
      get_response(rsp);
    
      `uvm_info("body", "AHB READ transaction completed", UVM_LOW);
    end

    `uvm_info("body", "Exiting...", UVM_LOW)
  endtask: body

endclass: ahb_master_directed_sequence

`endif // GUARD_AHB_MASTER_DIRECTED_SEQUENCE_SV

//=======================================================================
// COPYRIGHT (C) 2013 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

`ifndef GUARD_SVT_CHI_SN_BIND_IF_SVI
`define GUARD_SVT_CHI_SN_BIND_IF_SVI

`include "svt_chi_port_defines.svi"

/**
    @grouphdr Interfaces svt_chi_sn_bind_if CHI Slave Node SV Bind interface.
 */

/**
 * @groupname svt_chi_sn_bind_if 
 * <b>General description:</b><p>
 * Bind interface is an interface which contains directional signals for CHI. 
 * Users can connect DUT signals to these directional signals. 
 * Bind interfaces provided with VIP are svt_chi_rn_bind_if and svt_chi_sn_bind_if.
 * To use bind interface, user still needs to instantiate the non-bind interface, 
 * and then connect bind interface to the non-bind interface. 
 * 
 * VIP provides RN and SN connector modules to connect the VIP bind interface to VIP non-bind interface.
 * User needs to instantiate a connector module corresponding to each instance of VIP RN and SN, and pass
 * the bind interface and non-bind interface instance to this connector module.
 *
 * The connector module is parameterized in order to distinguish between Active and Passive connection.
 * Based on the value of the parameter(Active or Passive) passed from the TB while instantiating the 
 * connector module the corresponding signal connections are made between SN IF and SN BIND IF.
 *
 * The SN Bind interface svt_chi_sn_bind_if defines the CHI signals appropriate
 * for a fully coherent Slave Node, along with the Parametrized SN connector module (svt_chi_sn_connector)
 * which is used to connect the VIP bind interface to VIP non-bind interface in either Active or Passive mode
 * depending on the value of the parameter passed.
 */
interface svt_chi_sn_bind_if (
  // Link Activation Status Signals
  inout TXSACTIVE,
  input RXSACTIVE,
  
  // Link Activation Status Signals
  inout TXLINKACTIVEREQ,
  input TXLINKACTIVEACK,
  input RXLINKACTIVEREQ,
  inout RXLINKACTIVEACK,
  
  // RX Request Virtual Channel
  input RXREQFLITPEND,
  input RXREQFLITV,
  input [`SVT_CHI_MAX_REQ_FLIT_WIDTH-1:0] RXREQFLIT,
  inout RXREQLCRDV,
  
  // TX Response Virtual Channel
  inout TXRSPFLITPEND,
  inout TXRSPFLITV,
  inout [`SVT_CHI_MAX_RSP_FLIT_WIDTH-1:0] TXRSPFLIT,
  input TXRSPLCRDV,
  
  // TX Dat Virtual Channel
  inout TXDATFLITPEND,
  inout TXDATFLITV,
  inout [`SVT_CHI_MAX_DAT_FLIT_WIDTH-1:0] TXDATFLIT,
  input TXDATLCRDV,
  
  // RX Dat Virtual Channel
  input RXDATFLITPEND,
  input RXDATFLITV,
  input [`SVT_CHI_MAX_DAT_FLIT_WIDTH-1:0] RXDATFLIT,
  inout RXDATLCRDV

`ifdef SVT_CHI_ISSUE_D_ENABLE
  `ifdef SVT_CHI_INTERFACE_PARITY_ENABLE
  //Check signals for Link Activation Status Signals
  , inout TXSACTIVECHK,
  input RXSACTIVECHK,
  
  //Check signals for Link Activation Status Signals
  inout TXLINKACTIVEREQCHK,
  input TXLINKACTIVEACKCHK,
  input RXLINKACTIVEREQCHK,
  inout RXLINKACTIVEACKCHK,
  
  //Check signals for RX Request Virtual Channel
  input RXREQFLITPENDCHK,
  input RXREQFLITVCHK,
  input [`SVT_CHI_IF_PARITY_REQ_FLIT_CHK_WIDTH -1:0] RXREQFLITCHK,
  inout RXREQLCRDVCHK,
  
  //Check signals for TX Response Virtual Channel
  inout TXRSPFLITPENDCHK,
  inout TXRSPFLITVCHK,
  inout [`SVT_CHI_IF_PARITY_RSP_FLIT_CHK_WIDTH -1:0] TXRSPFLITCHK,
  input TXRSPLCRDVCHK,
  
  //Check signals for TX Dat Virtual Channel
  inout TXDATFLITPENDCHK,
  inout TXDATFLITVCHK,
  inout [`SVT_CHI_IF_PARITY_DAT_FLIT_CHK_WIDTH -1:0] TXDATFLITCHK,
  input TXDATLCRDVCHK,
  
  //Check signals for RX Dat Virtual Channel
  input RXDATFLITPENDCHK,
  input RXDATFLITVCHK,
  input [`SVT_CHI_IF_PARITY_DAT_FLIT_CHK_WIDTH -1:0] RXDATFLITCHK,
  inout RXDATLCRDVCHK
  `endif
`endif
);  

endinterface: svt_chi_sn_bind_if

//=======================================================================
module svt_chi_sn_connector #(parameter is_active=1) (svt_chi_sn_if sn_if, svt_chi_sn_bind_if sn_bind_if);

  always @(*) 
  begin
    // Inputs
    sn_if.RXSACTIVE       =  sn_bind_if.RXSACTIVE;
    sn_if.TXLINKACTIVEACK =  sn_bind_if.TXLINKACTIVEACK;
    sn_if.RXLINKACTIVEREQ =  sn_bind_if.RXLINKACTIVEREQ;
    sn_if.RXREQFLITPEND   =  sn_bind_if.RXREQFLITPEND;
    sn_if.RXREQFLITV      =  sn_bind_if.RXREQFLITV;
    sn_if.RXREQFLIT       =  sn_bind_if.RXREQFLIT;
    sn_if.TXRSPLCRDV      =  sn_bind_if.TXRSPLCRDV;
    sn_if.TXDATLCRDV      =  sn_bind_if.TXDATLCRDV;
    sn_if.RXDATFLITPEND   =  sn_bind_if.RXDATFLITPEND;
    sn_if.RXDATFLITV      =  sn_bind_if.RXDATFLITV;
    sn_if.RXDATFLIT       =  sn_bind_if.RXDATFLIT;
  `ifdef SVT_CHI_ISSUE_D_ENABLE
    `ifdef SVT_CHI_INTERFACE_PARITY_ENABLE
    sn_if.RXSACTIVECHK       =  sn_bind_if.RXSACTIVECHK;
    sn_if.TXLINKACTIVEACKCHK =  sn_bind_if.TXLINKACTIVEACKCHK;
    sn_if.RXLINKACTIVEREQCHK =  sn_bind_if.RXLINKACTIVEREQCHK;
    sn_if.RXREQFLITPENDCHK   =  sn_bind_if.RXREQFLITPENDCHK;
    sn_if.RXREQFLITVCHK      =  sn_bind_if.RXREQFLITVCHK;
    sn_if.RXREQFLITCHK       =  sn_bind_if.RXREQFLITCHK;
    sn_if.TXRSPLCRDVCHK      =  sn_bind_if.TXRSPLCRDVCHK;
    sn_if.TXDATLCRDVCHK      =  sn_bind_if.TXDATLCRDVCHK;
    sn_if.RXDATFLITPENDCHK   =  sn_bind_if.RXDATFLITPENDCHK;
    sn_if.RXDATFLITVCHK      =  sn_bind_if.RXDATFLITVCHK;
    sn_if.RXDATFLITCHK       =  sn_bind_if.RXDATFLITCHK;
    `endif
  `endif
  end

  // inouts
  // If SN is Active
  assign sn_bind_if.TXSACTIVE       =  (is_active == 0) ? 'bz : sn_if.TXSACTIVE;
  assign sn_bind_if.TXLINKACTIVEREQ =  (is_active == 0) ? 'bz : sn_if.TXLINKACTIVEREQ;
  assign sn_bind_if.RXLINKACTIVEACK =  (is_active == 0) ? 'bz : sn_if.RXLINKACTIVEACK;
  assign sn_bind_if.RXREQLCRDV      =  (is_active == 0) ? 'bz : sn_if.RXREQLCRDV;
  assign sn_bind_if.TXRSPFLITPEND   =  (is_active == 0) ? 'bz : sn_if.TXRSPFLITPEND;
  assign sn_bind_if.TXRSPFLITV      =  (is_active == 0) ? 'bz : sn_if.TXRSPFLITV;
  assign sn_bind_if.TXRSPFLIT       =  (is_active == 0) ? 'bz : sn_if.TXRSPFLIT;
  assign sn_bind_if.TXDATFLITPEND   =  (is_active == 0) ? 'bz : sn_if.TXDATFLITPEND;
  assign sn_bind_if.TXDATFLITV      =  (is_active == 0) ? 'bz : sn_if.TXDATFLITV;
  assign sn_bind_if.TXDATFLIT       =  (is_active == 0) ? 'bz : sn_if.TXDATFLIT;
  assign sn_bind_if.RXDATLCRDV      =  (is_active == 0) ? 'bz : sn_if.RXDATLCRDV;
`ifdef SVT_CHI_ISSUE_D_ENABLE
  `ifdef SVT_CHI_INTERFACE_PARITY_ENABLE
  assign sn_bind_if.TXSACTIVECHK       =  (is_active == 0) ? 'bz : sn_if.TXSACTIVECHK;
  assign sn_bind_if.TXLINKACTIVEREQCHK =  (is_active == 0) ? 'bz : sn_if.TXLINKACTIVEREQCHK;
  assign sn_bind_if.RXLINKACTIVEACKCHK =  (is_active == 0) ? 'bz : sn_if.RXLINKACTIVEACKCHK;
  assign sn_bind_if.RXREQLCRDVCHK      =  (is_active == 0) ? 'bz : sn_if.RXREQLCRDVCHK;
  assign sn_bind_if.TXRSPFLITPENDCHK   =  (is_active == 0) ? 'bz : sn_if.TXRSPFLITPENDCHK;
  assign sn_bind_if.TXRSPFLITVCHK      =  (is_active == 0) ? 'bz : sn_if.TXRSPFLITVCHK;
  assign sn_bind_if.TXRSPFLITCHK       =  (is_active == 0) ? 'bz : sn_if.TXRSPFLITCHK;
  assign sn_bind_if.TXDATFLITPENDCHK   =  (is_active == 0) ? 'bz : sn_if.TXDATFLITPENDCHK;
  assign sn_bind_if.TXDATFLITVCHK      =  (is_active == 0) ? 'bz : sn_if.TXDATFLITVCHK;
  assign sn_bind_if.TXDATFLITCHK       =  (is_active == 0) ? 'bz : sn_if.TXDATFLITCHK;
  assign sn_bind_if.RXDATLCRDVCHK      =  (is_active == 0) ? 'bz : sn_if.RXDATLCRDVCHK;
  `endif
`endif

  always @(*)
    begin
      // If SN is Passive : inout will be inputs for passive components
      if (is_active == 0) begin
        sn_if.TXSACTIVE       =  sn_bind_if.TXSACTIVE;
        sn_if.TXLINKACTIVEREQ =  sn_bind_if.TXLINKACTIVEREQ;
        sn_if.RXLINKACTIVEACK =  sn_bind_if.RXLINKACTIVEACK;
        sn_if.RXREQLCRDV      =  sn_bind_if.RXREQLCRDV;
        sn_if.TXRSPFLITPEND   =  sn_bind_if.TXRSPFLITPEND;
        sn_if.TXRSPFLITV      =  sn_bind_if.TXRSPFLITV;
        sn_if.TXRSPFLIT       =  sn_bind_if.TXRSPFLIT;
        sn_if.TXDATFLITPEND   =  sn_bind_if.TXDATFLITPEND;
        sn_if.TXDATFLITV      =  sn_bind_if.TXDATFLITV;
        sn_if.TXDATFLIT       =  sn_bind_if.TXDATFLIT;
        sn_if.RXDATLCRDV      =  sn_bind_if.RXDATLCRDV;
      `ifdef SVT_CHI_ISSUE_D_ENABLE
        `ifdef SVT_CHI_INTERFACE_PARITY_ENABLE
        sn_if.TXSACTIVECHK       =  sn_bind_if.TXSACTIVECHK;
        sn_if.TXLINKACTIVEREQCHK =  sn_bind_if.TXLINKACTIVEREQCHK;
        sn_if.RXLINKACTIVEACKCHK =  sn_bind_if.RXLINKACTIVEACKCHK;
        sn_if.RXREQLCRDVCHK      =  sn_bind_if.RXREQLCRDVCHK;
        sn_if.TXRSPFLITPENDCHK   =  sn_bind_if.TXRSPFLITPENDCHK;
        sn_if.TXRSPFLITVCHK      =  sn_bind_if.TXRSPFLITVCHK;
        sn_if.TXRSPFLITCHK       =  sn_bind_if.TXRSPFLITCHK;
        sn_if.TXDATFLITPENDCHK   =  sn_bind_if.TXDATFLITPENDCHK;
        sn_if.TXDATFLITVCHK      =  sn_bind_if.TXDATFLITVCHK;
        sn_if.TXDATFLITCHK       =  sn_bind_if.TXDATFLITCHK;
        sn_if.RXDATLCRDVCHK      =  sn_bind_if.RXDATLCRDVCHK;
        `endif
      `endif
      end
    end

endmodule

`endif // GUARD_SVT_CHI_SN_BIND_IF_SVI

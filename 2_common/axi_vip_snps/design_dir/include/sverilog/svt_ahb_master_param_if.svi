
`ifndef GUARD_SVT_AHB_MASTER_PARAM_IF_SVI
`define GUARD_SVT_AHB_MASTER_PARAM_IF_SVI

`include "svt_ahb_port_defines.svi"

/**
 * <b>General description:</b><p>
 * The AHB master parameterized interface svt_ahb_master_param_if defines the 
 * AHB signals appropriate for a single AHB master port. Master parameterized 
 * interface connects AHB Master VIP to DUT. The width of signals within the
 * parameterized interface can be parameterized to match signal widths of DUT.
 * The default value of all the parameters are same as the MAX signal widths 
 * defined in svt_ahb_port_defines.svi or svt_ahb_user_defines.svi. Master 
 * parameterized interface works in conjunction with top level parameterized
 * interface svt_ahb_param_if. 
 *
 * <b>Clock signal description:</b><br>
 * <table border="1" cellpadding="1" cellspacing="1"">
 *   <thead>
 *    <tr><th bgcolor="#dddddd"><b>Signal Name </b></th><th bgcolor="#dddddd"> Signal Description </th></tr>
 *   </thead>
 *   <tbody>
 *    <tr><td><b> aclk </b></td><td> If all AHB interfaces in the system are expected to run on a different clock, user can use the hclk signal in the master interfaces. Set the configuration parameter svt_ahb_system_configuration::common_clock_mode to 0. In this case, connect the hclk signal in each master interface to the appropriate master specific clock in the testbench.</b></td><tr>
 *   </tbody>
 *  </table>
 *
 * <b>Reset signal description:</b><br>
 * <table border="1" cellpadding="1" cellspacing="1"">
 *   <thead>
 *    <tr><th bgcolor="#dddddd"><b>Signal Name </b></th><th bgcolor="#dddddd"> Signal Description </th></tr>
 *   </thead>
 *   <tbody>
 *    <tr><td><b> aclk </b></td><td> If all AHB interfaces in the system are expected to run on a different reset, user can use the hresetn signal in the master interfaces. Set the configuration parameter svt_ahb_system_configuration::common_reset_mode to 0. In this case, connect the hresetn signal in each master interface to the appropriate master specific reset in the testbench.</b></td><tr>
 *   </tbody>
 *  </table>
 *
 * <b>Parameter description:</b><br>
 * The signal width of master parameterized interface can be parameterized to
 * match DUT signal widths. The default value of all the parameters are same as
 * the MAX signal widths defined in svt_ahb_port_defines.svi or svt_ahb_user_defines.svi.
 * The parameter values should not exceed the MAX signal width values defined in
 * svt_ahb_port_defines.svi or redefined by user in svt_ahb_user_defines.svi.
 *  
 * <table border="1" cellpadding="1" cellspacing="1"">
 *   <thead>
 *    <tr><th bgcolor="#dddddd"><b>Parameter Name </b></th><th bgcolor="#dddddd"> Parameter Description </th></tr>
 *   </thead>
 *   <tbody>
 *    <tr><td><b> SVT_AHB_HADDR_PORT_WIDTH_PARAM </b></td><td> Address width (HADDR).</b></td><tr>
 *    <tr><td><b> SVT_AHB_DATA_WIDTH_PARAM </b></td><td> Read and Write data width (HRDATA,HWDATA).</b></td><tr>
 *    <tr><td><b> SVT_AHB_CONTROL_HUSER_PORT_WIDTH_PARAM </b></td><td> Control user signal width (CONTROL_HUSER).</b></td><tr>
 *    <tr><td><b> SVT_AHB_HBURST_PORT_WIDTH_PARAM </b></td><td> Burst Type signal width (HBURST).</b></td><tr>
 *    <tr><td><b> SVT_AHB_HPROT_PORT_WIDTH_PARAM </b></td><td> Protection signal width (HPROT).</b></td><tr>
 *    <tr><td><b> SVT_AHB_HSIZE_PORT_WIDTH_PARAM </b></td><td> Burst size signal width (HSIZE).</b></td><tr>
 *    <tr><td><b> SVT_AHB_HTRANS_PORT_WIDTH_PARAM </b></td><td> Trans type signal width (HTRANS).</b></td><tr>
 *   </tbody>
 *  </table>
 *
 * <b>AHB signal description:</b><br>
 * This sub-interface supports signals for AHB,AHB-Lite. The names of the signals
 * match the names specified in the AHB specification. Please refer to the AHB
 * specification for specific description of any of the signals.
 * </p>
 */
interface svt_ahb_master_param_if #(int SVT_AHB_HADDR_PORT_WIDTH_PARAM = `SVT_AHB_MAX_ADDR_WIDTH,
                                    int SVT_AHB_DATA_WIDTH_PARAM = `SVT_AHB_MAX_DATA_WIDTH,
                                    int SVT_AHB_CONTROL_HUSER_PORT_WIDTH_PARAM = `SVT_AHB_MAX_USER_WIDTH,
                                    int SVT_AHB_HBURST_PORT_WIDTH_PARAM = `SVT_AHB_HBURST_PORT_WIDTH,
                                    `ifdef SVT_AHB_V6_ENABLE
                                    int SVT_AHB_HBSTRB_PORT_WIDTH_PARAM = `SVT_AHB_HBSTRB_PORT_WIDTH,
                                    `endif
                                    int SVT_AHB_HPROT_PORT_WIDTH_PARAM = `SVT_AHB_HPROT_PORT_WIDTH,
                                    int SVT_AHB_HSIZE_PORT_WIDTH_PARAM = `SVT_AHB_HSIZE_PORT_WIDTH,
                                    int SVT_AHB_HTRANS_PORT_WIDTH_PARAM = `SVT_AHB_HTRANS_PORT_WIDTH,
                                    int SVT_AHB_DATA_HUSER_PORT_WIDTH_PARAM = `SVT_AHB_MAX_DATA_USER_WIDTH
                             ) (svt_ahb_master_if master_if);

  /** User clock
      In multiple clock mode, user is expected to drive this signal */
  logic                   hclk;

  /** User reset
      In multiple reset mode, user is expected to drive this signal */
  logic                   hresetn;

  logic                   hgrant;
  logic                   [(SVT_AHB_HADDR_PORT_WIDTH_PARAM - 1):0] haddr;
  `ifdef SVT_AHB_V6_ENABLE
  logic                   [(SVT_AHB_HBSTRB_PORT_WIDTH_PARAM - 1):0] hbstrb;
  logic                   hunalign;
  `endif
  logic                   [(SVT_AHB_HBURST_PORT_WIDTH_PARAM - 1):0] hburst;
  logic                   hbusreq;
  logic                   hlock;
  logic                   [(SVT_AHB_HPROT_PORT_WIDTH_PARAM - 1):0] hprot;
  logic                   hnonsec;
  logic                   [(SVT_AHB_HSIZE_PORT_WIDTH_PARAM - 1):0] hsize;
  logic                   [(SVT_AHB_HTRANS_PORT_WIDTH_PARAM - 1):0] htrans;
  logic                   [(SVT_AHB_DATA_WIDTH_PARAM - 1):0] hwdata;
  logic                   hwrite;
  /** AHB sideband signals */
  logic                   [SVT_AHB_CONTROL_HUSER_PORT_WIDTH_PARAM-1:0]     control_huser;
  logic                   [SVT_AHB_DATA_HUSER_PORT_WIDTH_PARAM-1:0]     hwdata_huser;
    
`ifndef __SVDOC__ 

`ifdef QUESTA
   always@(*) master_if.hclk = hclk;
   always@(*) master_if.hresetn = hresetn;
`else
   assign master_if.hclk = hclk;
   assign master_if.hresetn = hresetn;
`endif

   // master BFM will be driving master_if (svt_ahb_master_if)
   assign haddr     = master_if.haddr[SVT_AHB_HADDR_PORT_WIDTH_PARAM-1:0];
   `ifdef SVT_AHB_V6_ENABLE
   assign hbstrb    = master_if.hbstrb[SVT_AHB_HBSTRB_PORT_WIDTH_PARAM-1:0];
   assign hunalign  = master_if.hunalign;
   `endif
   assign hburst    = master_if.hburst[(SVT_AHB_HBURST_PORT_WIDTH_PARAM - 1):0];
   assign hbusreq   = master_if.hbusreq;
   assign hlock     = master_if.hlock;
   assign hprot     = master_if.hprot[(SVT_AHB_HPROT_PORT_WIDTH_PARAM - 1):0];
   assign hnonsec   = master_if.hnonsec;
   assign hsize     = master_if.hsize[(SVT_AHB_HSIZE_PORT_WIDTH_PARAM - 1):0];
   assign htrans    = master_if.htrans[(SVT_AHB_HTRANS_PORT_WIDTH_PARAM - 1):0];
   assign hwdata    = master_if.hwdata[SVT_AHB_DATA_WIDTH_PARAM-1:0];
   assign hwrite    = master_if.hwrite;
   assign control_huser = master_if.control_huser[SVT_AHB_CONTROL_HUSER_PORT_WIDTH_PARAM-1:0];
   assign hwdata_huser = master_if.hwdata_huser[SVT_AHB_DATA_HUSER_PORT_WIDTH_PARAM-1:0];

`ifndef VCS
   always@(*) master_if.hgrant = hgrant;
`else
   assign master_if.hgrant = hgrant;
`endif

`protect
  initial begin
    master_if.param_check_flag = 8'd0;
     
    if( SVT_AHB_HADDR_PORT_WIDTH_PARAM         > `SVT_AHB_MAX_ADDR_WIDTH)         begin master_if.param_check_flag [0]  = 1'b1; end
    if( SVT_AHB_DATA_WIDTH_PARAM               > `SVT_AHB_MAX_DATA_WIDTH)         begin master_if.param_check_flag [1]  = 1'b1; end
    if( SVT_AHB_CONTROL_HUSER_PORT_WIDTH_PARAM > `SVT_AHB_MAX_USER_WIDTH)         begin master_if.param_check_flag [2]  = 1'b1; end
    if( SVT_AHB_HBURST_PORT_WIDTH_PARAM        > `SVT_AHB_HBURST_PORT_WIDTH)      begin master_if.param_check_flag [3]  = 1'b1; end
    if( SVT_AHB_HPROT_PORT_WIDTH_PARAM         > `SVT_AHB_HPROT_PORT_WIDTH)       begin master_if.param_check_flag [4]  = 1'b1; end
    if( SVT_AHB_HSIZE_PORT_WIDTH_PARAM         > `SVT_AHB_HSIZE_PORT_WIDTH)       begin master_if.param_check_flag [5]  = 1'b1; end
    if( SVT_AHB_HTRANS_PORT_WIDTH_PARAM        > `SVT_AHB_HTRANS_PORT_WIDTH)      begin master_if.param_check_flag [6]  = 1'b1; end
    if( SVT_AHB_DATA_HUSER_PORT_WIDTH_PARAM    > `SVT_AHB_MAX_DATA_USER_WIDTH)    begin master_if.param_check_flag [7]  = 1'b1; end
    
  end
`endprotect

`endif

endinterface: svt_ahb_master_param_if

`endif // GUARD_SVT_AHB_MASTER_PARAM_IF_SVI

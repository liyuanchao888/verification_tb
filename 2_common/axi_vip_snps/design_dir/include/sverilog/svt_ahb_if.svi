
`ifndef GUARD_SVT_AHB_IF_SVI
`define GUARD_SVT_AHB_IF_SVI

`include "svt_ahb_port_defines.svi"

`include "svt_ahb_master_if.svi"
`include "svt_ahb_slave_if.svi"


/**
 * <b>General description:</b><p>
 * AHB VIP provides the SystemVerilog interface which can be used to connect
 * the VIP to the DUT. A top level interface svt_ahb_if is defined. The top
 * level interface contains reset signal for the bus, and an array of master 
 * & slave interfaces. The top level interface can be used for connecting the
 * master & slave components to the AHB Bus. By default, 16 master and 16 slave 
 * interfaces are defined in the top level interface. Currently, the maximum 
 * number of master and slave interfaces supported is 128. The number of master
 * and slave interfaces in top level interface can be controlled using macros 
 * SVT_AHB_MAX_NUM_MASTERS_{0..128} and SVT_AHB_MAX_NUM_SLAVES_{0..128} respectively. 
 * For example, if you want to use 8 master interfaces and 10 slave interfaces, 
 * you can define following macros when compiling the VIP:
 * <li> SVT_AHB_MAX_NUM_MASTERS_8<br>
 * <li> SVT_AHB_MAX_NUM_SLAVES_10<br>
 * Please refer to User Guide section Overriding System Constants on how to
 * provide these macro definitions to VIP.
 *
 * <b>Sub-interfaces:</b><br>
 *
 * <table border="1" cellpadding="1" cellspacing="1"">
 *   <thead>
 *    <tr><th bgcolor="#dddddd"><b>Interface Name </b></th><th bgcolor="#dddddd"> Interface Description </th></tr>
 *   </thead>
 *   <tbody>
 *    <tr><td><a class="ClassLink" href="##intf_svt_ahb_master_if"><b> svt_ahb_master_if </b></td><td> Master Interface used by master VIP component </b></td><tr>
 *    <tr><td><a class="ClassLink" href="##intf_svt_ahb_slave_if"><b> svt_ahb_slave_if </b></td><td> Slave Interface used by slave VIP component </b></td><tr>
 *   </tbody>
 *  </table>
 *
 * <b>Clock signal description:</b><br>
 *
 * <table border="1" cellpadding="1" cellspacing="1"">
 *   <thead>
 *    <tr><th bgcolor="#dddddd"><b>Signal Name </b></th><th bgcolor="#dddddd"> Signal Description </th></tr>
 *   </thead>
 *   <tbody>
 *    <tr><td><b> hclk    </b></td><td> This clock signal belongs to the top
 *    level AHB Interface. User is expected to connect clock signal in testbench
 *    to this hclk signal in the top level interface. This clock is used by all
 *    the AHB master and slave VIP components.</b></td><tr>
 *   </tbody>
 *  </table>
 * 
 * <b>Clock connection examples:</b><br>
 * assign ahb_if.hclk = SystemClock;<br>
 *
 * <b>Reset signal description:</b><br>
 *
 * <table border="1" cellpadding="1" cellspacing="1"">
 *   <thead>
 *    <tr><th bgcolor="#dddddd"><b>Signal Name </b></th><th bgcolor="#dddddd"> Signal Description </th></tr>
 *   </thead>
 *   <tbody>
 *    <tr><td><b> hresetn    </b></td><td> This reset signal belongs to the top
 *    level AHB Interface. User is expected to connect reset signal in testbench
 *    to this hclk signal in the top level interface. This reset is used by all
 *    the AHB master and slave VIP components.</b></td><tr>
 *   </tbody>
 *  </table>
 * 
 * <b>Reset connection examples:</b><br>
 * assign ahb_if.hresetn = SystemResetn;<br>
 *
 *
 */

typedef virtual svt_ahb_master_if AHB_MASTER_IF;
typedef virtual svt_ahb_slave_if AHB_SLAVE_IF;
 

interface svt_ahb_if ();

  logic hclk;
  logic hresetn;

  /** Bus: Slave to Master Mux signals */
  logic [(`SVT_AHB_MAX_DATA_WIDTH - 1):0] hrdata_bus;
  logic hready_bus;
  logic [(`SVT_AHB_HRESP_PORT_WIDTH - 1):0] hresp_bus;
  logic [`SVT_AHB_MAX_DATA_USER_WIDTH-1:0] hrdata_huser_bus;
  
  /** Bus: Master to Slave Mux signals */
  logic [(`SVT_AHB_MAX_ADDR_WIDTH- 1):0] haddr_bus;
  `ifdef SVT_AHB_V6_ENABLE
  logic [(`SVT_AHB_HBSTRB_PORT_WIDTH- 1):0] hbstrb_bus;
  logic hunalign_bus;
  `endif
  logic [(`SVT_AHB_HBURST_PORT_WIDTH - 1):0] hburst_bus;
  logic [(`SVT_AHB_HPROT_PORT_WIDTH - 1):0] hprot_bus;
  logic hnonsec_bus;
  logic [(`SVT_AHB_HSIZE_PORT_WIDTH - 1):0] hsize_bus;
  logic [(`SVT_AHB_HTRANS_PORT_WIDTH - 1):0] htrans_bus;
  logic [(`SVT_AHB_MAX_DATA_WIDTH - 1):0] hwdata_bus;
  logic hwrite_bus;
  logic [`SVT_AHB_MAX_USER_WIDTH-1:0] control_huser_bus;
  logic [`SVT_AHB_MAX_DATA_USER_WIDTH-1:0] hwdata_huser_bus;

  /** Bus: Following signals from bus to slave are common, generated by bus */
  logic [(`SVT_AHB_HMASTER_PORT_WIDTH - 1):0] hmaster_bus;
  logic hmastlock_bus;

  /** Debug port signals */
  logic [(`SVT_AHB_HMASTER_PORT_WIDTH - 1):0] curr_hmaster;
  logic [(`SVT_AHB_HMASTER_PORT_WIDTH - 1):0] prev_hmaster;
  logic [(`SVT_AHB_DEBUG_PORT_WIDTH - 1):0] curr_sel_slave;
  logic [(`SVT_AHB_DEBUG_PORT_WIDTH - 1):0] prev_sel_slave;
  logic [`SVT_AHB_MAX_NUM_MASTERS-1:0] hsplit_bus;
 
/** @cond PRIVATE */
   /** This bit vector is set by svt_ahb_param_if, when the given parameter value
     * is greater than the corresponding system constant MAX macro defined inside
     * svt_ahb_port_defines.svi or svt_ahb_user_defines.svi. The AHB system level
     * component (uvm,ovm: svt_ahb_system_env;vmm: svt_ahb_system_group) flags 
     * the corresponding FATAL error if any bit of this bit vector is set. 
     * In an environment where AHB parameterized interface is not used, 
     * this bit vector will not have any significance.
     *    
     * param_check_flag [0]  - SVT_AHB_HADDR_PORT_WIDTH_PARAM<br> 
     * param_check_flag [1]  - SVT_AHB_DATA_WIDTH_PARAM<br> 
     * param_check_flag [2]  - SVT_AHB_CONTROL_HUSER_PORT_WIDTH_PARAM<br> 
     * param_check_flag [3]  - SVT_AHB_HRESP_PORT_WIDTH_PARAM<br>
     * param_check_flag [4]  - SVT_AHB_HBURST_PORT_WIDTH_PARAM<br> 
     * param_check_flag [5]  - SVT_AHB_HPROT_PORT_WIDTH_PARAM<br> 
     * param_check_flag [6]  - SVT_AHB_HSIZE_PORT_WIDTH_PARAM<br> 
     * param_check_flag [7]  - SVT_AHB_HTRANS_PORT_WIDTH_PARAM<br> 
     * param_check_flag [8]  - SVT_AHB_HMASTER_PORT_WIDTH_PARAM<br>
     * param_check_flag [9]  - SVT_AHB_HSPLIT_PORT_WIDTH_PARAM<br>
     * param_check_flag [10] - SVT_AHB_DATA_HUSER_PORT_WIDTH_PARAM<br> */
  
   bit [10:0] 					param_check_flag;
/** @endcond */
  
`ifndef SVT_AHB_MAX_NUM_MASTERS_0
  `ifndef SVT_AHB_DISABLE_IMPLICIT_BUS_CONNECTION
  svt_ahb_master_if master_if[`SVT_AHB_MAX_NUM_MASTERS-1:0](hclk, 
                                                            hresetn,
                                                            hrdata_bus,
                                                            hready_bus,
                                                            hresp_bus,
                                                            hrdata_huser_bus);
  `else
    svt_ahb_master_if master_if[`SVT_AHB_MAX_NUM_MASTERS-1:0](hclk, 
                                                            hresetn);
  `endif
`endif
`ifndef SVT_AHB_MAX_NUM_SLAVES_0
  `ifndef SVT_AHB_DISABLE_IMPLICIT_BUS_CONNECTION
  svt_ahb_slave_if  slave_if[`SVT_AHB_MAX_NUM_SLAVES-1:0](hclk, 
                                                          hresetn,
                                                          haddr_bus,
                                                          `ifdef SVT_AHB_V6_ENABLE
                                                          hbstrb_bus,
 	                                                        hunalign_bus,
                                                          `endif
                                                          hburst_bus,
                                                          hmaster_bus,
                                                          hmastlock_bus,
                                                          hprot_bus,
                                                          hnonsec_bus,
                                                          hsize_bus,
                                                          htrans_bus,
                                                          hwdata_bus,
                                                          hwrite_bus,
                                                          hready_bus,
                                                          control_huser_bus,
                                                          hwdata_huser_bus);
  `else
    svt_ahb_slave_if  slave_if[`SVT_AHB_MAX_NUM_SLAVES-1:0](hclk, 
                                                            hresetn);
  `endif
`endif

  //-----------------------------------------------------------------------
  /**
   * Clocking block that defines the VIP AHB Bus Interface
   * bus to all slaves signals synchronization and directionality.
   */
  clocking ahb_bus_cb @(posedge hclk);
    default input #`SVT_AHB_IF_SETUP_TIME output #`SVT_AHB_IF_HOLD_TIME;
    output hmaster_bus;
    output hmastlock_bus;
  endclocking // ahb_bus_cb

  //-----------------------------------------------------------------------
  /**
   * Clocking block that defines the VIP AHB Bus Interface
   * reset signal synchronization and directionality.
   */
  clocking ahb_bus_reset_cb @(posedge hclk);
    default input #`SVT_AHB_IF_SETUP_TIME output #`SVT_AHB_IF_HOLD_TIME;
    input hresetn;
  endclocking: ahb_bus_reset_cb
  
  //------------------------------------------------------------------------
  /** Modport used to connect the reset signal to VIP AHB Bus 
   *  The signals corresponding to following need to be asynchronous
   *  - The address, control, write data from granted master to all slaves
   *  - The response, read data from selected slave to all masters
   *  .
   */
  modport svt_ahb_bus_modport (clocking ahb_bus_reset_cb,
                               input hresetn, 
                               clocking ahb_bus_cb,
                               output hrdata_bus,
                               output hready_bus,
                               output hresp_bus,
                               output haddr_bus,
                               `ifdef SVT_AHB_V6_ENABLE
                               output hbstrb_bus,
 	 	                           output hunalign_bus,
                               `endif
                               output hburst_bus,
                               output hprot_bus,
                               output hnonsec_bus,
                               output hsize_bus,
                               output htrans_bus,
                               output hwdata_bus,
                               output hwrite_bus,
                               output control_huser_bus,
                               output hmaster_bus,
                               output hmastlock_bus,
                               output hwdata_huser_bus,
                               output hrdata_huser_bus);
  /**
   * Clocking block that defines the VIP AHB Bus Interface
   * bus to all slaves signals synchronization and directionality.
   */
  clocking ahb_monitor_cb @(posedge hclk);
    default input #`SVT_AHB_MONITOR_IF_SETUP_TIME output #`SVT_AHB_MONITOR_IF_HOLD_TIME;
    input hrdata_bus;
    input hready_bus;
    input hresp_bus;
    input haddr_bus;
    `ifdef SVT_AHB_V6_ENABLE
    input hbstrb_bus;
 	 	input hunalign_bus;
    `endif
    input hburst_bus;
    input hprot_bus;
    input hnonsec_bus;
    input hsize_bus;
    input htrans_bus;
    input hwdata_bus;
    input hwrite_bus;
    input control_huser_bus;
    input hmaster_bus;
    input hmastlock_bus;
    input hwdata_huser_bus;
    input hrdata_huser_bus;
  endclocking // ahb_bus_cb

  /** Monitor modport for the bus signals.
   *  The Modport includes the clocking blocks for synchronous sampling.
   *  It also includes the signals directly for asynnchronous sampling 
   *  wherever it is required.
   */
  modport svt_ahb_monitor_modport (clocking ahb_bus_reset_cb,
                                   input hresetn, 
                                   clocking ahb_monitor_cb,
                                   input hrdata_bus,
                                   input hready_bus,
                                   input hresp_bus,
                                   input haddr_bus,
                                   `ifdef SVT_AHB_V6_ENABLE
                                   input hbstrb_bus,
	                                 input hunalign_bus,
                                   `endif
                                   input hburst_bus,
                                   input hprot_bus,
                                   input hnonsec_bus,
                                   input hsize_bus,
                                   input htrans_bus,
                                   input hwdata_bus,
                                   input hwrite_bus,
                                   input control_huser_bus,
                                   input hmaster_bus,
                                   input hmastlock_bus,
                                   input hwdata_huser_bus,
                                   input hrdata_huser_bus);

  /** Debug modport */
  modport svt_ahb_debug_modport (output curr_hmaster,
		         output prev_hmaster,
		         output curr_sel_slave,
		         output prev_sel_slave,
		         output hsplit_bus);

function AHB_MASTER_IF get_master_if(int idx);
    case (idx)
`ifdef SVT_AHB_VALID_MASTER_IDX_0
      0 : get_master_if = svt_ahb_if.master_if[0];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_1
      1 : get_master_if = svt_ahb_if.master_if[1];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_2
      2 : get_master_if = svt_ahb_if.master_if[2];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_3
      3 : get_master_if = svt_ahb_if.master_if[3];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_4
      4 : get_master_if = svt_ahb_if.master_if[4];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_5
      5 : get_master_if = svt_ahb_if.master_if[5];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_6
      6 : get_master_if = svt_ahb_if.master_if[6];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_7
      7 : get_master_if = svt_ahb_if.master_if[7];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_8
      8 : get_master_if = svt_ahb_if.master_if[8];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_9
      9 : get_master_if = svt_ahb_if.master_if[9];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_10
      10 : get_master_if = svt_ahb_if.master_if[10];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_11
      11 : get_master_if = svt_ahb_if.master_if[11];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_12
      12 : get_master_if = svt_ahb_if.master_if[12];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_13
      13 : get_master_if = svt_ahb_if.master_if[13];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_14
      14 : get_master_if = svt_ahb_if.master_if[14];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_15
      15 : get_master_if = svt_ahb_if.master_if[15];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_16
      16 : get_master_if = svt_ahb_if.master_if[16];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_17
      17 : get_master_if = svt_ahb_if.master_if[17];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_18
      18 : get_master_if = svt_ahb_if.master_if[18];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_19
      19 : get_master_if = svt_ahb_if.master_if[19];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_20
      20 : get_master_if = svt_ahb_if.master_if[20];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_21
      21 : get_master_if = svt_ahb_if.master_if[21];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_22
      22 : get_master_if = svt_ahb_if.master_if[22];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_23
      23 : get_master_if = svt_ahb_if.master_if[23];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_24
      24 : get_master_if = svt_ahb_if.master_if[24];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_25
      25 : get_master_if = svt_ahb_if.master_if[25];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_26
      26 : get_master_if = svt_ahb_if.master_if[26];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_27
      27 : get_master_if = svt_ahb_if.master_if[27];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_28
      28 : get_master_if = svt_ahb_if.master_if[28];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_29
      29 : get_master_if = svt_ahb_if.master_if[29];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_30
      30 : get_master_if = svt_ahb_if.master_if[30];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_31
      31 : get_master_if = svt_ahb_if.master_if[31];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_32
      32 : get_master_if = svt_ahb_if.master_if[32];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_33
      33 : get_master_if = svt_ahb_if.master_if[33];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_34
      34 : get_master_if = svt_ahb_if.master_if[34];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_35
      35 : get_master_if = svt_ahb_if.master_if[35];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_36
      36 : get_master_if = svt_ahb_if.master_if[36];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_37
      37 : get_master_if = svt_ahb_if.master_if[37];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_38
      38 : get_master_if = svt_ahb_if.master_if[38];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_39
      39 : get_master_if = svt_ahb_if.master_if[39];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_40
      40 : get_master_if = svt_ahb_if.master_if[40];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_41
      41 : get_master_if = svt_ahb_if.master_if[41];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_42
      42 : get_master_if = svt_ahb_if.master_if[42];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_43
      43 : get_master_if = svt_ahb_if.master_if[43];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_44
      44 : get_master_if = svt_ahb_if.master_if[44];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_45
      45 : get_master_if = svt_ahb_if.master_if[45];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_46
      46 : get_master_if = svt_ahb_if.master_if[46];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_47
      47 : get_master_if = svt_ahb_if.master_if[47];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_48
      48 : get_master_if = svt_ahb_if.master_if[48];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_49
      49 : get_master_if = svt_ahb_if.master_if[49];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_50
      50 : get_master_if = svt_ahb_if.master_if[50];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_51
      51 : get_master_if = svt_ahb_if.master_if[51];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_52
      52 : get_master_if = svt_ahb_if.master_if[52];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_53
      53 : get_master_if = svt_ahb_if.master_if[53];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_54
      54 : get_master_if = svt_ahb_if.master_if[54];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_55
      55 : get_master_if = svt_ahb_if.master_if[55];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_56
      56 : get_master_if = svt_ahb_if.master_if[56];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_57
      57 : get_master_if = svt_ahb_if.master_if[57];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_58
      58 : get_master_if = svt_ahb_if.master_if[58];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_59
      59 : get_master_if = svt_ahb_if.master_if[59];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_60
      60 : get_master_if = svt_ahb_if.master_if[60];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_61
      61 : get_master_if = svt_ahb_if.master_if[61];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_62
      62 : get_master_if = svt_ahb_if.master_if[62];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_63
      63 : get_master_if = svt_ahb_if.master_if[63];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_64
      64 : get_master_if = svt_ahb_if.master_if[64];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_65
      65 : get_master_if = svt_ahb_if.master_if[65];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_66
      66 : get_master_if = svt_ahb_if.master_if[66];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_67
      67 : get_master_if = svt_ahb_if.master_if[67];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_68
      68 : get_master_if = svt_ahb_if.master_if[68];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_69
      69 : get_master_if = svt_ahb_if.master_if[69];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_70
      70 : get_master_if = svt_ahb_if.master_if[70];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_71
      71 : get_master_if = svt_ahb_if.master_if[71];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_72
      72 : get_master_if = svt_ahb_if.master_if[72];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_73
      73 : get_master_if = svt_ahb_if.master_if[73];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_74
      74 : get_master_if = svt_ahb_if.master_if[74];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_75
      75 : get_master_if = svt_ahb_if.master_if[75];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_76
      76 : get_master_if = svt_ahb_if.master_if[76];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_77
      77 : get_master_if = svt_ahb_if.master_if[77];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_78
      78 : get_master_if = svt_ahb_if.master_if[78];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_79
      79 : get_master_if = svt_ahb_if.master_if[79];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_80
      80 : get_master_if = svt_ahb_if.master_if[80];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_81
      81 : get_master_if = svt_ahb_if.master_if[81];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_82
      82 : get_master_if = svt_ahb_if.master_if[82];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_83
      83 : get_master_if = svt_ahb_if.master_if[83];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_84
      84 : get_master_if = svt_ahb_if.master_if[84];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_85
      85 : get_master_if = svt_ahb_if.master_if[85];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_86
      86 : get_master_if = svt_ahb_if.master_if[86];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_87
      87 : get_master_if = svt_ahb_if.master_if[87];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_88
      88 : get_master_if = svt_ahb_if.master_if[88];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_89
      89 : get_master_if = svt_ahb_if.master_if[89];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_90
      90 : get_master_if = svt_ahb_if.master_if[90];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_91
      91 : get_master_if = svt_ahb_if.master_if[91];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_92
      92 : get_master_if = svt_ahb_if.master_if[92];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_93
      93 : get_master_if = svt_ahb_if.master_if[93];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_94
      94 : get_master_if = svt_ahb_if.master_if[94];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_95
      95 : get_master_if = svt_ahb_if.master_if[95];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_96
      96 : get_master_if = svt_ahb_if.master_if[96];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_97
      97 : get_master_if = svt_ahb_if.master_if[97];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_98
      98 : get_master_if = svt_ahb_if.master_if[98];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_99
      99 : get_master_if = svt_ahb_if.master_if[99];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_100
      100 : get_master_if = svt_ahb_if.master_if[100];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_101
      101 : get_master_if = svt_ahb_if.master_if[101];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_102
      102 : get_master_if = svt_ahb_if.master_if[102];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_103
      103 : get_master_if = svt_ahb_if.master_if[103];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_104
      104 : get_master_if = svt_ahb_if.master_if[104];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_105
      105 : get_master_if = svt_ahb_if.master_if[105];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_106
      106 : get_master_if = svt_ahb_if.master_if[106];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_107
      107 : get_master_if = svt_ahb_if.master_if[107];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_108
      108 : get_master_if = svt_ahb_if.master_if[108];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_109
      109 : get_master_if = svt_ahb_if.master_if[109];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_110
      110 : get_master_if = svt_ahb_if.master_if[110];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_111
      111 : get_master_if = svt_ahb_if.master_if[111];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_112
      112 : get_master_if = svt_ahb_if.master_if[112];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_113
      113 : get_master_if = svt_ahb_if.master_if[113];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_114
      114 : get_master_if = svt_ahb_if.master_if[114];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_115
      115 : get_master_if = svt_ahb_if.master_if[115];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_116
      116 : get_master_if = svt_ahb_if.master_if[116];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_117
      117 : get_master_if = svt_ahb_if.master_if[117];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_118
      118 : get_master_if = svt_ahb_if.master_if[118];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_119
      119 : get_master_if = svt_ahb_if.master_if[119];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_120
      120 : get_master_if = svt_ahb_if.master_if[120];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_121
      121 : get_master_if = svt_ahb_if.master_if[121];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_122
      122 : get_master_if = svt_ahb_if.master_if[122];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_123
      123 : get_master_if = svt_ahb_if.master_if[123];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_124
      124 : get_master_if = svt_ahb_if.master_if[124];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_125
      125 : get_master_if = svt_ahb_if.master_if[125];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_126
      126 : get_master_if = svt_ahb_if.master_if[126];
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_127
      127 : get_master_if = svt_ahb_if.master_if[127];
`endif
      default: begin
        $display("svt_ahb_if::get_master_if(): Master index %0d not supported.", idx);
        $finish;
      end
    endcase
  endfunction


/** @cond PRIVATE */
  function AHB_SLAVE_IF get_slave_if(int idx);
    case (idx)
`ifdef SVT_AHB_VALID_SLAVE_IDX_0
      0 : get_slave_if = svt_ahb_if.slave_if[0];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_1
      1 : get_slave_if = svt_ahb_if.slave_if[1];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_2
      2 : get_slave_if = svt_ahb_if.slave_if[2];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_3
      3 : get_slave_if = svt_ahb_if.slave_if[3];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_4
      4 : get_slave_if = svt_ahb_if.slave_if[4];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_5
      5 : get_slave_if = svt_ahb_if.slave_if[5];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_6
      6 : get_slave_if = svt_ahb_if.slave_if[6];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_7
      7 : get_slave_if = svt_ahb_if.slave_if[7];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_8
      8 : get_slave_if = svt_ahb_if.slave_if[8];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_9
      9 : get_slave_if = svt_ahb_if.slave_if[9];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_10
      10 : get_slave_if = svt_ahb_if.slave_if[10];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_11
      11 : get_slave_if = svt_ahb_if.slave_if[11];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_12
      12 : get_slave_if = svt_ahb_if.slave_if[12];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_13
      13 : get_slave_if = svt_ahb_if.slave_if[13];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_14
      14 : get_slave_if = svt_ahb_if.slave_if[14];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_15
      15 : get_slave_if = svt_ahb_if.slave_if[15];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_16
      16 : get_slave_if = svt_ahb_if.slave_if[16];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_17
      17 : get_slave_if = svt_ahb_if.slave_if[17];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_18
      18 : get_slave_if = svt_ahb_if.slave_if[18];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_19
      19 : get_slave_if = svt_ahb_if.slave_if[19];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_20
      20 : get_slave_if = svt_ahb_if.slave_if[20];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_21
      21 : get_slave_if = svt_ahb_if.slave_if[21];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_22
      22 : get_slave_if = svt_ahb_if.slave_if[22];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_23
      23 : get_slave_if = svt_ahb_if.slave_if[23];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_24
      24 : get_slave_if = svt_ahb_if.slave_if[24];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_25
      25 : get_slave_if = svt_ahb_if.slave_if[25];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_26
      26 : get_slave_if = svt_ahb_if.slave_if[26];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_27
      27 : get_slave_if = svt_ahb_if.slave_if[27];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_28
      28 : get_slave_if = svt_ahb_if.slave_if[28];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_29
      29 : get_slave_if = svt_ahb_if.slave_if[29];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_30
      30 : get_slave_if = svt_ahb_if.slave_if[30];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_31
      31 : get_slave_if = svt_ahb_if.slave_if[31];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_32
      32 : get_slave_if = svt_ahb_if.slave_if[32];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_33
      33 : get_slave_if = svt_ahb_if.slave_if[33];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_34
      34 : get_slave_if = svt_ahb_if.slave_if[34];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_35
      35 : get_slave_if = svt_ahb_if.slave_if[35];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_36
      36 : get_slave_if = svt_ahb_if.slave_if[36];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_37
      37 : get_slave_if = svt_ahb_if.slave_if[37];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_38
      38 : get_slave_if = svt_ahb_if.slave_if[38];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_39
      39 : get_slave_if = svt_ahb_if.slave_if[39];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_40
      40 : get_slave_if = svt_ahb_if.slave_if[40];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_41
      41 : get_slave_if = svt_ahb_if.slave_if[41];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_42
      42 : get_slave_if = svt_ahb_if.slave_if[42];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_43
      43 : get_slave_if = svt_ahb_if.slave_if[43];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_44
      44 : get_slave_if = svt_ahb_if.slave_if[44];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_45
      45 : get_slave_if = svt_ahb_if.slave_if[45];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_46
      46 : get_slave_if = svt_ahb_if.slave_if[46];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_47
      47 : get_slave_if = svt_ahb_if.slave_if[47];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_48
      48 : get_slave_if = svt_ahb_if.slave_if[48];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_49
      49 : get_slave_if = svt_ahb_if.slave_if[49];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_50
      50 : get_slave_if = svt_ahb_if.slave_if[50];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_51
      51 : get_slave_if = svt_ahb_if.slave_if[51];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_52
      52 : get_slave_if = svt_ahb_if.slave_if[52];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_53
      53 : get_slave_if = svt_ahb_if.slave_if[53];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_54
      54 : get_slave_if = svt_ahb_if.slave_if[54];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_55
      55 : get_slave_if = svt_ahb_if.slave_if[55];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_56
      56 : get_slave_if = svt_ahb_if.slave_if[56];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_57
      57 : get_slave_if = svt_ahb_if.slave_if[57];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_58
      58 : get_slave_if = svt_ahb_if.slave_if[58];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_59
      59 : get_slave_if = svt_ahb_if.slave_if[59];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_60
      60 : get_slave_if = svt_ahb_if.slave_if[60];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_61
      61 : get_slave_if = svt_ahb_if.slave_if[61];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_62
      62 : get_slave_if = svt_ahb_if.slave_if[62];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_63
      63 : get_slave_if = svt_ahb_if.slave_if[63];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_64
      64 : get_slave_if = svt_ahb_if.slave_if[64];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_65
      65 : get_slave_if = svt_ahb_if.slave_if[65];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_66
      66 : get_slave_if = svt_ahb_if.slave_if[66];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_67
      67 : get_slave_if = svt_ahb_if.slave_if[67];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_68
      68 : get_slave_if = svt_ahb_if.slave_if[68];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_69
      69 : get_slave_if = svt_ahb_if.slave_if[69];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_70
      70 : get_slave_if = svt_ahb_if.slave_if[70];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_71
      71 : get_slave_if = svt_ahb_if.slave_if[71];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_72
      72 : get_slave_if = svt_ahb_if.slave_if[72];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_73
      73 : get_slave_if = svt_ahb_if.slave_if[73];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_74
      74 : get_slave_if = svt_ahb_if.slave_if[74];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_75
      75 : get_slave_if = svt_ahb_if.slave_if[75];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_76
      76 : get_slave_if = svt_ahb_if.slave_if[76];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_77
      77 : get_slave_if = svt_ahb_if.slave_if[77];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_78
      78 : get_slave_if = svt_ahb_if.slave_if[78];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_79
      79 : get_slave_if = svt_ahb_if.slave_if[79];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_80
      80 : get_slave_if = svt_ahb_if.slave_if[80];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_81
      81 : get_slave_if = svt_ahb_if.slave_if[81];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_82
      82 : get_slave_if = svt_ahb_if.slave_if[82];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_83
      83 : get_slave_if = svt_ahb_if.slave_if[83];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_84
      84 : get_slave_if = svt_ahb_if.slave_if[84];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_85
      85 : get_slave_if = svt_ahb_if.slave_if[85];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_86
      86 : get_slave_if = svt_ahb_if.slave_if[86];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_87
      87 : get_slave_if = svt_ahb_if.slave_if[87];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_88
      88 : get_slave_if = svt_ahb_if.slave_if[88];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_89
      89 : get_slave_if = svt_ahb_if.slave_if[89];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_90
      90 : get_slave_if = svt_ahb_if.slave_if[90];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_91
      91 : get_slave_if = svt_ahb_if.slave_if[91];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_92
      92 : get_slave_if = svt_ahb_if.slave_if[92];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_93
      93 : get_slave_if = svt_ahb_if.slave_if[93];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_94
      94 : get_slave_if = svt_ahb_if.slave_if[94];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_95
      95 : get_slave_if = svt_ahb_if.slave_if[95];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_96
      96 : get_slave_if = svt_ahb_if.slave_if[96];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_97
      97 : get_slave_if = svt_ahb_if.slave_if[97];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_98
      98 : get_slave_if = svt_ahb_if.slave_if[98];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_99
      99 : get_slave_if = svt_ahb_if.slave_if[99];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_100
      100 : get_slave_if = svt_ahb_if.slave_if[100];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_101
      101 : get_slave_if = svt_ahb_if.slave_if[101];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_102
      102 : get_slave_if = svt_ahb_if.slave_if[102];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_103
      103 : get_slave_if = svt_ahb_if.slave_if[103];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_104
      104 : get_slave_if = svt_ahb_if.slave_if[104];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_105
      105 : get_slave_if = svt_ahb_if.slave_if[105];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_106
      106 : get_slave_if = svt_ahb_if.slave_if[106];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_107
      107 : get_slave_if = svt_ahb_if.slave_if[107];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_108
      108 : get_slave_if = svt_ahb_if.slave_if[108];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_109
      109 : get_slave_if = svt_ahb_if.slave_if[109];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_110
      110 : get_slave_if = svt_ahb_if.slave_if[110];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_111
      111 : get_slave_if = svt_ahb_if.slave_if[111];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_112
      112 : get_slave_if = svt_ahb_if.slave_if[112];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_113
      113 : get_slave_if = svt_ahb_if.slave_if[113];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_114
      114 : get_slave_if = svt_ahb_if.slave_if[114];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_115
      115 : get_slave_if = svt_ahb_if.slave_if[115];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_116
      116 : get_slave_if = svt_ahb_if.slave_if[116];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_117
      117 : get_slave_if = svt_ahb_if.slave_if[117];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_118
      118 : get_slave_if = svt_ahb_if.slave_if[118];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_119
      119 : get_slave_if = svt_ahb_if.slave_if[119];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_120
      120 : get_slave_if = svt_ahb_if.slave_if[120];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_121
      121 : get_slave_if = svt_ahb_if.slave_if[121];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_122
      122 : get_slave_if = svt_ahb_if.slave_if[122];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_123
      123 : get_slave_if = svt_ahb_if.slave_if[123];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_124
      124 : get_slave_if = svt_ahb_if.slave_if[124];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_125
      125 : get_slave_if = svt_ahb_if.slave_if[125];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_126
      126 : get_slave_if = svt_ahb_if.slave_if[126];
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_127
      127 : get_slave_if = svt_ahb_if.slave_if[127];
`endif
      default: begin
        $display("svt_ahb_if::get_slave_if(): Slave index %0d not supported.", idx);
        $finish;
      end
    endcase
  endfunction
/** @endcond */

/** @cond PRIVATE */
  /**
   * Function set_master_common_clock_mode allows user to specify whether a master port
   * interface should use a common clock, or a port specific clock.
   *
   * @param mode If set to 1, common clock mode is selected. In this case, the
   * common clock signal passed as argument to the interface, is used as clock.
   * This mode is useful when all AHB VIP components need to work on a single
   * clock. This is the default mode of operation. If set to 0, signal hclk is
   * used as clock. This mode is useful when individual AHB VIP components work
   * on a different clock.
   *
   * @param idx This argument specifies the master & slave port index to which
   * this mode needs to be applied. The master & slave port index starts from
   * 0.
   */
`ifndef SVT_AMBA_INTERFACE_METHOD_DISABLE
  function void set_master_common_clock_mode (bit mode, int idx);
    case (idx)
`ifdef SVT_AHB_VALID_MASTER_IDX_0
      0: begin
        svt_ahb_if.master_if[0].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_1
      1: begin
        svt_ahb_if.master_if[1].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_2
      2: begin
        svt_ahb_if.master_if[2].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_3
      3: begin
        svt_ahb_if.master_if[3].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_4
      4: begin
        svt_ahb_if.master_if[4].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_5
      5: begin
        svt_ahb_if.master_if[5].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_6
      6: begin
        svt_ahb_if.master_if[6].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_7
      7: begin
        svt_ahb_if.master_if[7].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_8
      8: begin
        svt_ahb_if.master_if[8].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_9
      9: begin
        svt_ahb_if.master_if[9].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_10
      10: begin
        svt_ahb_if.master_if[10].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_11
      11: begin
        svt_ahb_if.master_if[11].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_12
      12: begin
        svt_ahb_if.master_if[12].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_13
      13: begin
        svt_ahb_if.master_if[13].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_14
      14: begin
        svt_ahb_if.master_if[14].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_15
      15: begin
        svt_ahb_if.master_if[15].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_16
      16: begin
        svt_ahb_if.master_if[16].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_17
      17: begin
        svt_ahb_if.master_if[17].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_18
      18: begin
        svt_ahb_if.master_if[18].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_19
      19: begin
        svt_ahb_if.master_if[19].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_20
      20: begin
        svt_ahb_if.master_if[20].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_21
      21: begin
        svt_ahb_if.master_if[21].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_22
      22: begin
        svt_ahb_if.master_if[22].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_23
      23: begin
        svt_ahb_if.master_if[23].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_24
      24: begin
        svt_ahb_if.master_if[24].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_25
      25: begin
        svt_ahb_if.master_if[25].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_26
      26: begin
        svt_ahb_if.master_if[26].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_27
      27: begin
        svt_ahb_if.master_if[27].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_28
      28: begin
        svt_ahb_if.master_if[28].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_29
      29: begin
        svt_ahb_if.master_if[29].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_30
      30: begin
        svt_ahb_if.master_if[30].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_31
      31: begin
        svt_ahb_if.master_if[31].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_32
      32: begin
        svt_ahb_if.master_if[32].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_33
      33: begin
        svt_ahb_if.master_if[33].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_34
      34: begin
        svt_ahb_if.master_if[34].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_35
      35: begin
        svt_ahb_if.master_if[35].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_36
      36: begin
        svt_ahb_if.master_if[36].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_37
      37: begin
        svt_ahb_if.master_if[37].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_38
      38: begin
        svt_ahb_if.master_if[38].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_39
      39: begin
        svt_ahb_if.master_if[39].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_40
      40: begin
        svt_ahb_if.master_if[40].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_41
      41: begin
        svt_ahb_if.master_if[41].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_42
      42: begin
        svt_ahb_if.master_if[42].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_43
      43: begin
        svt_ahb_if.master_if[43].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_44
      44: begin
        svt_ahb_if.master_if[44].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_45
      45: begin
        svt_ahb_if.master_if[45].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_46
      46: begin
        svt_ahb_if.master_if[46].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_47
      47: begin
        svt_ahb_if.master_if[47].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_48
      48: begin
        svt_ahb_if.master_if[48].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_49
      49: begin
        svt_ahb_if.master_if[49].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_50
      50: begin
        svt_ahb_if.master_if[50].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_51
      51: begin
        svt_ahb_if.master_if[51].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_52
      52: begin
        svt_ahb_if.master_if[52].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_53
      53: begin
        svt_ahb_if.master_if[53].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_54
      54: begin
        svt_ahb_if.master_if[54].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_55
      55: begin
        svt_ahb_if.master_if[55].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_56
      56: begin
        svt_ahb_if.master_if[56].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_57
      57: begin
        svt_ahb_if.master_if[57].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_58
      58: begin
        svt_ahb_if.master_if[58].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_59
      59: begin
        svt_ahb_if.master_if[59].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_60
      60: begin
        svt_ahb_if.master_if[60].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_61
      61: begin
        svt_ahb_if.master_if[61].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_62
      62: begin
        svt_ahb_if.master_if[62].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_63
      63: begin
        svt_ahb_if.master_if[63].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_64
      64: begin
        svt_ahb_if.master_if[64].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_65
      65: begin
        svt_ahb_if.master_if[65].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_66
      66: begin
        svt_ahb_if.master_if[66].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_67
      67: begin
        svt_ahb_if.master_if[67].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_68
      68: begin
        svt_ahb_if.master_if[68].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_69
      69: begin
        svt_ahb_if.master_if[69].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_70
      70: begin
        svt_ahb_if.master_if[70].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_71
      71: begin
        svt_ahb_if.master_if[71].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_72
      72: begin
        svt_ahb_if.master_if[72].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_73
      73: begin
        svt_ahb_if.master_if[73].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_74
      74: begin
        svt_ahb_if.master_if[74].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_75
      75: begin
        svt_ahb_if.master_if[75].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_76
      76: begin
        svt_ahb_if.master_if[76].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_77
      77: begin
        svt_ahb_if.master_if[77].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_78
      78: begin
        svt_ahb_if.master_if[78].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_79
      79: begin
        svt_ahb_if.master_if[79].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_80
      80: begin
        svt_ahb_if.master_if[80].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_81
      81: begin
        svt_ahb_if.master_if[81].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_82
      82: begin
        svt_ahb_if.master_if[82].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_83
      83: begin
        svt_ahb_if.master_if[83].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_84
      84: begin
        svt_ahb_if.master_if[84].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_85
      85: begin
        svt_ahb_if.master_if[85].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_86
      86: begin
        svt_ahb_if.master_if[86].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_87
      87: begin
        svt_ahb_if.master_if[87].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_88
      88: begin
        svt_ahb_if.master_if[88].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_89
      89: begin
        svt_ahb_if.master_if[89].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_90
      90: begin
        svt_ahb_if.master_if[90].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_91
      91: begin
        svt_ahb_if.master_if[91].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_92
      92: begin
        svt_ahb_if.master_if[92].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_93
      93: begin
        svt_ahb_if.master_if[93].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_94
      94: begin
        svt_ahb_if.master_if[94].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_95
      95: begin
        svt_ahb_if.master_if[95].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_96
      96: begin
        svt_ahb_if.master_if[96].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_97
      97: begin
        svt_ahb_if.master_if[97].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_98
      98: begin
        svt_ahb_if.master_if[98].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_99
      99: begin
        svt_ahb_if.master_if[99].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_100
      100: begin
        svt_ahb_if.master_if[100].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_101
      101: begin
        svt_ahb_if.master_if[101].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_102
      102: begin
        svt_ahb_if.master_if[102].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_103
      103: begin
        svt_ahb_if.master_if[103].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_104
      104: begin
        svt_ahb_if.master_if[104].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_105
      105: begin
        svt_ahb_if.master_if[105].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_106
      106: begin
        svt_ahb_if.master_if[106].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_107
      107: begin
        svt_ahb_if.master_if[107].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_108
      108: begin
        svt_ahb_if.master_if[108].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_109
      109: begin
        svt_ahb_if.master_if[109].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_110
      110: begin
        svt_ahb_if.master_if[110].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_111
      111: begin
        svt_ahb_if.master_if[111].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_112
      112: begin
        svt_ahb_if.master_if[112].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_113
      113: begin
        svt_ahb_if.master_if[113].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_114
      114: begin
        svt_ahb_if.master_if[114].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_115
      115: begin
        svt_ahb_if.master_if[115].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_116
      116: begin
        svt_ahb_if.master_if[116].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_117
      117: begin
        svt_ahb_if.master_if[117].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_118
      118: begin
        svt_ahb_if.master_if[118].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_119
      119: begin
        svt_ahb_if.master_if[119].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_120
      120: begin
        svt_ahb_if.master_if[120].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_121
      121: begin
        svt_ahb_if.master_if[121].common_clock_mode = mode;
      end
`endif
 `ifdef SVT_AHB_VALID_MASTER_IDX_122
      122: begin
        svt_ahb_if.master_if[122].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_123
      123: begin
        svt_ahb_if.master_if[123].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_124
      124: begin
        svt_ahb_if.master_if[124].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_125
      125: begin
        svt_ahb_if.master_if[125].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_126
      126: begin
        svt_ahb_if.master_if[126].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_127
      127: begin
        svt_ahb_if.master_if[127].common_clock_mode = mode;
      end
`endif
   default: begin
        $display("svt_ahb_if::set_master_common_clock_mode(): Master index %0d not supported", idx);
        $finish;
      end
    endcase
  endfunction

  /**
   * Function set_slave_common_clock_mode allows user to specify whether a slave port
   * interface should use a common clock, or a port specific clock.
   *
   * @param mode If set to 1, common clock mode is selected. In this case, the
   * common clock signal passed as argument to the interface, is used as clock.
   * This mode is useful when all AHB VIP components need to work on a single
   * clock. This is the default mode of operation. If set to 0, signal hclk is
   * used as clock. This mode is useful when individual AHB VIP components work
   * on a different clock.
   *
   * @param idx This argument specifies the master & slave port index to which
   * this mode needs to be applied. The master & slave port index starts from
   * 0.
   */
  function void set_slave_common_clock_mode (bit mode, int idx);
    case (idx)
`ifdef SVT_AHB_VALID_SLAVE_IDX_0
      0: begin
        svt_ahb_if.slave_if[0].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_1
      1: begin
        svt_ahb_if.slave_if[1].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_2
      2: begin
        svt_ahb_if.slave_if[2].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_3
      3: begin
        svt_ahb_if.slave_if[3].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_4
      4: begin
        svt_ahb_if.slave_if[4].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_5
      5: begin
        svt_ahb_if.slave_if[5].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_6
      6: begin
        svt_ahb_if.slave_if[6].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_7
      7: begin
        svt_ahb_if.slave_if[7].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_8
      8: begin
        svt_ahb_if.slave_if[8].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_9
      9: begin
        svt_ahb_if.slave_if[9].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_10
      10: begin
        svt_ahb_if.slave_if[10].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_11
      11: begin
        svt_ahb_if.slave_if[11].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_12
      12: begin
        svt_ahb_if.slave_if[12].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_13
      13: begin
        svt_ahb_if.slave_if[13].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_14
      14: begin
        svt_ahb_if.slave_if[14].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_15
      15: begin
        svt_ahb_if.slave_if[15].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_16
      16: begin
        svt_ahb_if.slave_if[16].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_17
      17: begin
        svt_ahb_if.slave_if[17].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_18
      18: begin
        svt_ahb_if.slave_if[18].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_19
      19: begin
        svt_ahb_if.slave_if[19].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_20
      20: begin
        svt_ahb_if.slave_if[20].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_21
      21: begin
        svt_ahb_if.slave_if[21].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_22
      22: begin
        svt_ahb_if.slave_if[22].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_23
      23: begin
        svt_ahb_if.slave_if[23].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_24
      24: begin
        svt_ahb_if.slave_if[24].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_25
      25: begin
        svt_ahb_if.slave_if[25].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_26
      26: begin
        svt_ahb_if.slave_if[26].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_27
      27: begin
        svt_ahb_if.slave_if[27].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_28
      28: begin
        svt_ahb_if.slave_if[28].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_29
      29: begin
        svt_ahb_if.slave_if[29].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_30
      30: begin
        svt_ahb_if.slave_if[30].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_31
      31: begin
        svt_ahb_if.slave_if[31].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_32
      32: begin
        svt_ahb_if.slave_if[32].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_33
      33: begin
        svt_ahb_if.slave_if[33].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_34
      34: begin
        svt_ahb_if.slave_if[34].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_35
      35: begin
        svt_ahb_if.slave_if[35].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_36
      36: begin
        svt_ahb_if.slave_if[36].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_37
      37: begin
        svt_ahb_if.slave_if[37].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_38
      38: begin
        svt_ahb_if.slave_if[38].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_39
      39: begin
        svt_ahb_if.slave_if[39].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_40
      40: begin
        svt_ahb_if.slave_if[40].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_41
      41: begin
        svt_ahb_if.slave_if[41].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_42
      42: begin
        svt_ahb_if.slave_if[42].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_43
      43: begin
        svt_ahb_if.slave_if[43].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_44
      44: begin
        svt_ahb_if.slave_if[44].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_45
      45: begin
        svt_ahb_if.slave_if[45].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_46
      46: begin
        svt_ahb_if.slave_if[46].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_47
      47: begin
        svt_ahb_if.slave_if[47].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_48
      48: begin
        svt_ahb_if.slave_if[48].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_49
      49: begin
        svt_ahb_if.slave_if[49].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_50
      50: begin
        svt_ahb_if.slave_if[50].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_51
      51: begin
        svt_ahb_if.slave_if[51].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_52
      52: begin
        svt_ahb_if.slave_if[52].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_53
      53: begin
        svt_ahb_if.slave_if[53].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_54
      54: begin
        svt_ahb_if.slave_if[54].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_55
      55: begin
        svt_ahb_if.slave_if[55].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_56
      56: begin
        svt_ahb_if.slave_if[56].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_57
      57: begin
        svt_ahb_if.slave_if[57].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_58
      58: begin
        svt_ahb_if.slave_if[58].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_59
      59: begin
        svt_ahb_if.slave_if[59].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_60
      60: begin
        svt_ahb_if.slave_if[60].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_61
      61: begin
        svt_ahb_if.slave_if[61].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_62
      62: begin
        svt_ahb_if.slave_if[62].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_63
      63: begin
        svt_ahb_if.slave_if[63].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_64
      64: begin
        svt_ahb_if.slave_if[64].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_65
      65: begin
        svt_ahb_if.slave_if[65].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_66
      66: begin
        svt_ahb_if.slave_if[66].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_67
      67: begin
        svt_ahb_if.slave_if[67].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_68
      68: begin
        svt_ahb_if.slave_if[68].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_69
      69: begin
        svt_ahb_if.slave_if[69].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_70
      70: begin
        svt_ahb_if.slave_if[70].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_71
      71: begin
        svt_ahb_if.slave_if[71].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_72
      72: begin
        svt_ahb_if.slave_if[72].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_73
      73: begin
        svt_ahb_if.slave_if[73].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_74
      74: begin
        svt_ahb_if.slave_if[74].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_75
      75: begin
        svt_ahb_if.slave_if[75].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_76
      76: begin
        svt_ahb_if.slave_if[76].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_77
      77: begin
        svt_ahb_if.slave_if[77].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_78
      78: begin
        svt_ahb_if.slave_if[78].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_79
      79: begin
        svt_ahb_if.slave_if[79].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_80
      80: begin
        svt_ahb_if.slave_if[80].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_81
      81: begin
        svt_ahb_if.slave_if[81].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_82
      82: begin
        svt_ahb_if.slave_if[82].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_83
      83: begin
        svt_ahb_if.slave_if[83].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_84
      84: begin
        svt_ahb_if.slave_if[84].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_85
      85: begin
        svt_ahb_if.slave_if[85].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_86
      86: begin
        svt_ahb_if.slave_if[86].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_87
      87: begin
        svt_ahb_if.slave_if[87].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_88
      88: begin
        svt_ahb_if.slave_if[88].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_89
      89: begin
        svt_ahb_if.slave_if[89].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_90
      90: begin
        svt_ahb_if.slave_if[90].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_91
      91: begin
        svt_ahb_if.slave_if[91].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_92
      92: begin
        svt_ahb_if.slave_if[92].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_93
      93: begin
        svt_ahb_if.slave_if[93].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_94
      94: begin
        svt_ahb_if.slave_if[94].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_95
      95: begin
        svt_ahb_if.slave_if[95].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_96
      96: begin
        svt_ahb_if.slave_if[96].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_97
      97: begin
        svt_ahb_if.slave_if[97].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_98
      98: begin
        svt_ahb_if.slave_if[98].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_99
      99: begin
        svt_ahb_if.slave_if[99].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_100
      100: begin
        svt_ahb_if.slave_if[100].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_101
      101: begin
        svt_ahb_if.slave_if[101].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_102
      102: begin
        svt_ahb_if.slave_if[102].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_103
      103: begin
        svt_ahb_if.slave_if[103].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_104
      104: begin
        svt_ahb_if.slave_if[104].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_105
      105: begin
        svt_ahb_if.slave_if[105].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_106
      106: begin
        svt_ahb_if.slave_if[106].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_107
      107: begin
        svt_ahb_if.slave_if[107].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_108
      108: begin
        svt_ahb_if.slave_if[108].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_109
      109: begin
        svt_ahb_if.slave_if[109].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_110
      110: begin
        svt_ahb_if.slave_if[110].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_111
      111: begin
        svt_ahb_if.slave_if[111].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_112
      112: begin
        svt_ahb_if.slave_if[112].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_113
      113: begin
        svt_ahb_if.slave_if[113].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_114
      114: begin
        svt_ahb_if.slave_if[114].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_115
      115: begin
        svt_ahb_if.slave_if[115].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_116
      116: begin
        svt_ahb_if.slave_if[116].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_117
      117: begin
        svt_ahb_if.slave_if[117].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_118
      118: begin
        svt_ahb_if.slave_if[118].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_119
      119: begin
        svt_ahb_if.slave_if[119].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_120
      120: begin
        svt_ahb_if.slave_if[120].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_121
      121: begin
        svt_ahb_if.slave_if[121].common_clock_mode = mode;
      end
`endif
 `ifdef SVT_AHB_VALID_SLAVE_IDX_122
      122: begin
        svt_ahb_if.slave_if[122].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_123
      123: begin
        svt_ahb_if.slave_if[123].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_124
      124: begin
        svt_ahb_if.slave_if[124].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_125
      125: begin
        svt_ahb_if.slave_if[125].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_126
      126: begin
        svt_ahb_if.slave_if[126].common_clock_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_127
      127: begin
        svt_ahb_if.slave_if[127].common_clock_mode = mode;
      end
`endif
      default: begin
        $display("svt_ahb_if::set_slave_common_clock_mode(): Slave index %0d not supported", idx);
        $finish;
      end
    endcase
  endfunction // set_slave_common_clock_mode


  /**
   * Function set_master_common_reset_mode allows user to specify whether a master port
   * interface should use a common reset, or a port specific reset.
   *
   * @param mode If set to 1, common reset mode is selected. In this case, the
   * common reset signal passed as argument to the interface, is used as reset.
   * This mode is useful when all AHB VIP components need to use a single
   * reset. This is the default mode of operation. If set to 0, signal hresetn is
   * used as reset. This mode is useful when individual AHB VIP components use
   * a different reset.
   *
   * @param idx This argument specifies the master & slave port index to which
   * this mode needs to be applied. The master & slave port index starts from
   * 0.
   */
  function void set_master_common_reset_mode (bit mode, int idx);
    case (idx)
`ifdef SVT_AHB_VALID_MASTER_IDX_0
      0: begin
        svt_ahb_if.master_if[0].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_1
      1: begin
        svt_ahb_if.master_if[1].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_2
      2: begin
        svt_ahb_if.master_if[2].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_3
      3: begin
        svt_ahb_if.master_if[3].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_4
      4: begin
        svt_ahb_if.master_if[4].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_5
      5: begin
        svt_ahb_if.master_if[5].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_6
      6: begin
        svt_ahb_if.master_if[6].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_7
      7: begin
        svt_ahb_if.master_if[7].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_8
      8: begin
        svt_ahb_if.master_if[8].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_9
      9: begin
        svt_ahb_if.master_if[9].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_10
      10: begin
        svt_ahb_if.master_if[10].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_11
      11: begin
        svt_ahb_if.master_if[11].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_12
      12: begin
        svt_ahb_if.master_if[12].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_13
      13: begin
        svt_ahb_if.master_if[13].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_14
      14: begin
        svt_ahb_if.master_if[14].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_15
      15: begin
        svt_ahb_if.master_if[15].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_16
      16: begin
        svt_ahb_if.master_if[16].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_17
      17: begin
        svt_ahb_if.master_if[17].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_18
      18: begin
        svt_ahb_if.master_if[18].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_19
      19: begin
        svt_ahb_if.master_if[19].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_20
      20: begin
        svt_ahb_if.master_if[20].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_21
      21: begin
        svt_ahb_if.master_if[21].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_22
      22: begin
        svt_ahb_if.master_if[22].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_23
      23: begin
        svt_ahb_if.master_if[23].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_24
      24: begin
        svt_ahb_if.master_if[24].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_25
      25: begin
        svt_ahb_if.master_if[25].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_26
      26: begin
        svt_ahb_if.master_if[26].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_27
      27: begin
        svt_ahb_if.master_if[27].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_28
      28: begin
        svt_ahb_if.master_if[28].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_29
      29: begin
        svt_ahb_if.master_if[29].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_30
      30: begin
        svt_ahb_if.master_if[30].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_31
      31: begin
        svt_ahb_if.master_if[31].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_32
      32: begin
        svt_ahb_if.master_if[32].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_33
      33: begin
        svt_ahb_if.master_if[33].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_34
      34: begin
        svt_ahb_if.master_if[34].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_35
      35: begin
        svt_ahb_if.master_if[35].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_36
      36: begin
        svt_ahb_if.master_if[36].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_37
      37: begin
        svt_ahb_if.master_if[37].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_38
      38: begin
        svt_ahb_if.master_if[38].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_39
      39: begin
        svt_ahb_if.master_if[39].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_40
      40: begin
        svt_ahb_if.master_if[40].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_41
      41: begin
        svt_ahb_if.master_if[41].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_42
      42: begin
        svt_ahb_if.master_if[42].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_43
      43: begin
        svt_ahb_if.master_if[43].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_44
      44: begin
        svt_ahb_if.master_if[44].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_45
      45: begin
        svt_ahb_if.master_if[45].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_46
      46: begin
        svt_ahb_if.master_if[46].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_47
      47: begin
        svt_ahb_if.master_if[47].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_48
      48: begin
        svt_ahb_if.master_if[48].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_49
      49: begin
        svt_ahb_if.master_if[49].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_50
      50: begin
        svt_ahb_if.master_if[50].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_51
      51: begin
        svt_ahb_if.master_if[51].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_52
      52: begin
        svt_ahb_if.master_if[52].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_53
      53: begin
        svt_ahb_if.master_if[53].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_54
      54: begin
        svt_ahb_if.master_if[54].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_55
      55: begin
        svt_ahb_if.master_if[55].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_56
      56: begin
        svt_ahb_if.master_if[56].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_57
      57: begin
        svt_ahb_if.master_if[57].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_58
      58: begin
        svt_ahb_if.master_if[58].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_59
      59: begin
        svt_ahb_if.master_if[59].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_60
      60: begin
        svt_ahb_if.master_if[60].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_61
      61: begin
        svt_ahb_if.master_if[61].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_62
      62: begin
        svt_ahb_if.master_if[62].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_63
      63: begin
        svt_ahb_if.master_if[63].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_64
      64: begin
        svt_ahb_if.master_if[64].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_65
      65: begin
        svt_ahb_if.master_if[65].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_66
      66: begin
        svt_ahb_if.master_if[66].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_67
      67: begin
        svt_ahb_if.master_if[67].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_68
      68: begin
        svt_ahb_if.master_if[68].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_69
      69: begin
        svt_ahb_if.master_if[69].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_70
      70: begin
        svt_ahb_if.master_if[70].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_71
      71: begin
        svt_ahb_if.master_if[71].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_72
      72: begin
        svt_ahb_if.master_if[72].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_73
      73: begin
        svt_ahb_if.master_if[73].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_74
      74: begin
        svt_ahb_if.master_if[74].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_75
      75: begin
        svt_ahb_if.master_if[75].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_76
      76: begin
        svt_ahb_if.master_if[76].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_77
      77: begin
        svt_ahb_if.master_if[77].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_78
      78: begin
        svt_ahb_if.master_if[78].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_79
      79: begin
        svt_ahb_if.master_if[79].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_80
      80: begin
        svt_ahb_if.master_if[80].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_81
      81: begin
        svt_ahb_if.master_if[81].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_82
      82: begin
        svt_ahb_if.master_if[82].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_83
      83: begin
        svt_ahb_if.master_if[83].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_84
      84: begin
        svt_ahb_if.master_if[84].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_85
      85: begin
        svt_ahb_if.master_if[85].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_86
      86: begin
        svt_ahb_if.master_if[86].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_87
      87: begin
        svt_ahb_if.master_if[87].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_88
      88: begin
        svt_ahb_if.master_if[88].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_89
      89: begin
        svt_ahb_if.master_if[89].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_90
      90: begin
        svt_ahb_if.master_if[90].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_91
      91: begin
        svt_ahb_if.master_if[91].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_92
      92: begin
        svt_ahb_if.master_if[92].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_93
      93: begin
        svt_ahb_if.master_if[93].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_94
      94: begin
        svt_ahb_if.master_if[94].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_95
      95: begin
        svt_ahb_if.master_if[95].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_96
      96: begin
        svt_ahb_if.master_if[96].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_97
      97: begin
        svt_ahb_if.master_if[97].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_98
      98: begin
        svt_ahb_if.master_if[98].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_99
      99: begin
        svt_ahb_if.master_if[99].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_100
      100: begin
        svt_ahb_if.master_if[100].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_101
      101: begin
        svt_ahb_if.master_if[101].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_102
      102: begin
        svt_ahb_if.master_if[102].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_103
      103: begin
        svt_ahb_if.master_if[103].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_104
      104: begin
        svt_ahb_if.master_if[104].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_105
      105: begin
        svt_ahb_if.master_if[105].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_106
      106: begin
        svt_ahb_if.master_if[106].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_107
      107: begin
        svt_ahb_if.master_if[107].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_108
      108: begin
        svt_ahb_if.master_if[108].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_109
      109: begin
        svt_ahb_if.master_if[109].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_110
      110: begin
        svt_ahb_if.master_if[110].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_111
      111: begin
        svt_ahb_if.master_if[111].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_112
      112: begin
        svt_ahb_if.master_if[112].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_113
      113: begin
        svt_ahb_if.master_if[113].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_114
      114: begin
        svt_ahb_if.master_if[114].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_115
      115: begin
        svt_ahb_if.master_if[115].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_116
      116: begin
        svt_ahb_if.master_if[116].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_117
      117: begin
        svt_ahb_if.master_if[117].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_118
      118: begin
        svt_ahb_if.master_if[118].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_119
      119: begin
        svt_ahb_if.master_if[119].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_120
      120: begin
        svt_ahb_if.master_if[120].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_121
      121: begin
        svt_ahb_if.master_if[121].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_122
      122: begin
        svt_ahb_if.master_if[122].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_123
      123: begin
        svt_ahb_if.master_if[123].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_124
      124: begin
        svt_ahb_if.master_if[124].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_125
      125: begin
        svt_ahb_if.master_if[125].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_126
      126: begin
        svt_ahb_if.master_if[126].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_MASTER_IDX_127
      127: begin
        svt_ahb_if.master_if[127].common_reset_mode = mode;
      end
`endif
   default: begin
        $display("svt_ahb_if::set_master_common_reset_mode(): Master index %0d not supported", idx);
        $finish;
      end
    endcase
  endfunction

  /**
   * Function set_slave_common_reset_mode allows user to specify whether a slave port
   * interface should use a common reset, or a port specific reset.
   *
   * @param mode If set to 1, common reset mode is selected. In this case, the
   * common reset signal passed as argument to the interface, is used as reset.
   * This mode is useful when all AHB VIP components use a single
   * reset. This is the default mode of operation. If set to 0, signal hresetn is
   * used as reset. This mode is useful when individual AHB VIP components use
   * a different reset.
   *
   * @param idx This argument specifies the master & slave port index to which
   * this mode needs to be applied. The master & slave port index starts from
   * 0.
   */
  function void set_slave_common_reset_mode (bit mode, int idx);
    case (idx)
`ifdef SVT_AHB_VALID_SLAVE_IDX_0
      0: begin
        svt_ahb_if.slave_if[0].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_1
      1: begin
        svt_ahb_if.slave_if[1].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_2
      2: begin
        svt_ahb_if.slave_if[2].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_3
      3: begin
        svt_ahb_if.slave_if[3].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_4
      4: begin
        svt_ahb_if.slave_if[4].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_5
      5: begin
        svt_ahb_if.slave_if[5].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_6
      6: begin
        svt_ahb_if.slave_if[6].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_7
      7: begin
        svt_ahb_if.slave_if[7].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_8
      8: begin
        svt_ahb_if.slave_if[8].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_9
      9: begin
        svt_ahb_if.slave_if[9].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_10
      10: begin
        svt_ahb_if.slave_if[10].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_11
      11: begin
        svt_ahb_if.slave_if[11].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_12
      12: begin
        svt_ahb_if.slave_if[12].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_13
      13: begin
        svt_ahb_if.slave_if[13].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_14
      14: begin
        svt_ahb_if.slave_if[14].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_15
      15: begin
        svt_ahb_if.slave_if[15].common_reset_mode = mode;
      end
`endif

`ifdef SVT_AHB_VALID_SLAVE_IDX_16
      16: begin
        svt_ahb_if.slave_if[16].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_17
      17: begin
        svt_ahb_if.slave_if[17].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_18
      18: begin
        svt_ahb_if.slave_if[18].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_19
      19: begin
        svt_ahb_if.slave_if[19].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_20
      20: begin
        svt_ahb_if.slave_if[20].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_21
      21: begin
        svt_ahb_if.slave_if[21].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_22
      22: begin
        svt_ahb_if.slave_if[22].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_23
      23: begin
        svt_ahb_if.slave_if[23].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_24
      24: begin
        svt_ahb_if.slave_if[24].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_25
      25: begin
        svt_ahb_if.slave_if[25].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_26
      26: begin
        svt_ahb_if.slave_if[26].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_27
      27: begin
        svt_ahb_if.slave_if[27].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_28
      28: begin
        svt_ahb_if.slave_if[28].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_29
      29: begin
        svt_ahb_if.slave_if[29].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_30
      30: begin
        svt_ahb_if.slave_if[30].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_31
      31: begin
        svt_ahb_if.slave_if[31].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_32
      32: begin
        svt_ahb_if.slave_if[32].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_33
      33: begin
        svt_ahb_if.slave_if[33].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_34
      34: begin
        svt_ahb_if.slave_if[34].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_35
      35: begin
        svt_ahb_if.slave_if[35].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_36
      36: begin
        svt_ahb_if.slave_if[36].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_37
      37: begin
        svt_ahb_if.slave_if[37].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_38
      38: begin
        svt_ahb_if.slave_if[38].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_39
      39: begin
        svt_ahb_if.slave_if[39].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_40
      40: begin
        svt_ahb_if.slave_if[40].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_41
      41: begin
        svt_ahb_if.slave_if[41].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_42
      42: begin
        svt_ahb_if.slave_if[42].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_43
      43: begin
        svt_ahb_if.slave_if[43].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_44
      44: begin
        svt_ahb_if.slave_if[44].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_45
      45: begin
        svt_ahb_if.slave_if[45].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_46
      46: begin
        svt_ahb_if.slave_if[46].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_47
      47: begin
        svt_ahb_if.slave_if[47].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_48
      48: begin
        svt_ahb_if.slave_if[48].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_49
      49: begin
        svt_ahb_if.slave_if[49].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_50
      50: begin
        svt_ahb_if.slave_if[50].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_51
      51: begin
        svt_ahb_if.slave_if[51].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_52
      52: begin
        svt_ahb_if.slave_if[52].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_53
      53: begin
        svt_ahb_if.slave_if[53].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_54
      54: begin
        svt_ahb_if.slave_if[54].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_55
      55: begin
        svt_ahb_if.slave_if[55].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_56
      56: begin
        svt_ahb_if.slave_if[56].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_57
      57: begin
        svt_ahb_if.slave_if[57].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_58
      58: begin
        svt_ahb_if.slave_if[58].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_59
      59: begin
        svt_ahb_if.slave_if[59].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_60
      60: begin
        svt_ahb_if.slave_if[60].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_61
      61: begin
        svt_ahb_if.slave_if[61].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_62
      62: begin
        svt_ahb_if.slave_if[62].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_63
      63: begin
        svt_ahb_if.slave_if[63].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_64
      64: begin
        svt_ahb_if.slave_if[64].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_65
      65: begin
        svt_ahb_if.slave_if[65].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_66
      66: begin
        svt_ahb_if.slave_if[66].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_67
      67: begin
        svt_ahb_if.slave_if[67].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_68
      68: begin
        svt_ahb_if.slave_if[68].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_69
      69: begin
        svt_ahb_if.slave_if[69].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_70
      70: begin
        svt_ahb_if.slave_if[70].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_71
      71: begin
        svt_ahb_if.slave_if[71].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_72
      72: begin
        svt_ahb_if.slave_if[72].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_73
      73: begin
        svt_ahb_if.slave_if[73].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_74
      74: begin
        svt_ahb_if.slave_if[74].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_75
      75: begin
        svt_ahb_if.slave_if[75].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_76
      76: begin
        svt_ahb_if.slave_if[76].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_77
      77: begin
        svt_ahb_if.slave_if[77].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_78
      78: begin
        svt_ahb_if.slave_if[78].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_79
      79: begin
        svt_ahb_if.slave_if[79].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_80
      80: begin
        svt_ahb_if.slave_if[80].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_81
      81: begin
        svt_ahb_if.slave_if[81].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_82
      82: begin
        svt_ahb_if.slave_if[82].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_83
      83: begin
        svt_ahb_if.slave_if[83].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_84
      84: begin
        svt_ahb_if.slave_if[84].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_85
      85: begin
        svt_ahb_if.slave_if[85].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_86
      86: begin
        svt_ahb_if.slave_if[86].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_87
      87: begin
        svt_ahb_if.slave_if[87].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_88
      88: begin
        svt_ahb_if.slave_if[88].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_89
      89: begin
        svt_ahb_if.slave_if[89].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_90
      90: begin
        svt_ahb_if.slave_if[90].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_91
      91: begin
        svt_ahb_if.slave_if[91].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_92
      92: begin
        svt_ahb_if.slave_if[92].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_93
      93: begin
        svt_ahb_if.slave_if[93].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_94
      94: begin
        svt_ahb_if.slave_if[94].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_95
      95: begin
        svt_ahb_if.slave_if[95].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_96
      96: begin
        svt_ahb_if.slave_if[96].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_97
      97: begin
        svt_ahb_if.slave_if[97].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_98
      98: begin
        svt_ahb_if.slave_if[98].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_99
      99: begin
        svt_ahb_if.slave_if[99].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_100
      100: begin
        svt_ahb_if.slave_if[100].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_101
      101: begin
        svt_ahb_if.slave_if[101].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_102
      102: begin
        svt_ahb_if.slave_if[102].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_103
      103: begin
        svt_ahb_if.slave_if[103].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_104
      104: begin
        svt_ahb_if.slave_if[104].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_105
      105: begin
        svt_ahb_if.slave_if[105].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_106
      106: begin
        svt_ahb_if.slave_if[106].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_107
      107: begin
        svt_ahb_if.slave_if[107].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_108
      108: begin
        svt_ahb_if.slave_if[108].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_109
      109: begin
        svt_ahb_if.slave_if[109].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_110
      110: begin
        svt_ahb_if.slave_if[110].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_111
      111: begin
        svt_ahb_if.slave_if[111].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_112
      112: begin
        svt_ahb_if.slave_if[112].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_113
      113: begin
        svt_ahb_if.slave_if[113].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_114
      114: begin
        svt_ahb_if.slave_if[114].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_115
      115: begin
        svt_ahb_if.slave_if[115].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_116
      116: begin
        svt_ahb_if.slave_if[116].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_117
      117: begin
        svt_ahb_if.slave_if[117].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_118
      118: begin
        svt_ahb_if.slave_if[118].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_119
      119: begin
        svt_ahb_if.slave_if[119].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_120
      120: begin
        svt_ahb_if.slave_if[120].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_121
      121: begin
        svt_ahb_if.slave_if[121].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_122
      122: begin
        svt_ahb_if.slave_if[122].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_123
      123: begin
        svt_ahb_if.slave_if[123].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_124
      124: begin
        svt_ahb_if.slave_if[124].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_125
      125: begin
        svt_ahb_if.slave_if[125].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_126
      126: begin
        svt_ahb_if.slave_if[126].common_reset_mode = mode;
      end
`endif
`ifdef SVT_AHB_VALID_SLAVE_IDX_127
      127: begin
        svt_ahb_if.slave_if[127].common_reset_mode = mode;
      end
`endif
      default: begin
        $display("svt_ahb_if::set_slave_common_reset_mode(): Slave index %0d not supported", idx);
        $finish;
      end
    endcase
  endfunction 
`endif

/** @endcond *//**support for signal logging. */
`SVT_IF_UTIL_SUPPORT_SIGNAL_LOGGING(1)

endinterface

`endif // GUARD_SVT_AHB_IF_SVI

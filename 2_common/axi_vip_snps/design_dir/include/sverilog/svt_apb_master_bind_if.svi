
`ifndef GUARD_SVT_APB_BINDIF_SVI
`define GUARD_svt_apb_master_bind_if_SVI

`include "svt_apb_defines.svi"

`include "svt_apb_slave_if.svi"

/**
    @grouphdr Interfaces svt_apb_master_bind_if APB SV Bind interface.
 */

/**
 * @groupname svt_apb_master_bind_if
 * <b>General description:</b><p>
 * Bind interface is an interface which contains directional signals for APB. 
 * Users can connect DUT signals to these directional signals. 
 * Bind interfaces provided with VIP are svt_apb_master_bind_if and svt_apb_slave_bind_if.
 * To use bind interface, user still needs to instantiate the non-bind interface, 
 * and then connect bind interface to the non-bind interface. 
 * 
 * VIP provides APB  and APB SLAVE connector modules to connect the VIP bind interface to VIP non-bind interface.
 * User needs to instantiate a connector module corresponding to each instance of VIP MASTER and SLAVE, and pass
 * the bind interface and non-bind interface instance to this connector module.
 *
 * The connector module is parameterized in order to distinguish between Active and Passive connection.
 * Based on the value of the parameter(Active or Passive) passed from the TB while instantiating the 
 * connector module the corresponding signal connections are made between APB IF and APB BIND IF.
 *
 * The MASTER Bind interface svt_apb_master_bind_if defines the APB signals, along with the Parametrized APB connector
 * module (svt_apb_connector) which is used to connect the VIP bind interface to VIP non-bind interface in either 
 * Active or Passive mode depending on the value of the parameter passed.
 */

interface svt_apb_master_bind_if#(  int  PSEL_WIDTH_PARAM  = `SVT_APB_MAX_NUM_SLAVES,
                                    int  PADDR_WIDTH_PARAM  = `SVT_APB_MAX_ADDR_WIDTH,
                                    int  PWDATA_WIDTH_PARAM  = `SVT_APB_MAX_DATA_WIDTH,
                                    int  PRDATA_WIDTH_PARAM  = `SVT_APB_MAX_DATA_WIDTH,
                                    int  PSTRB_WIDTH_PARAM  = `SVT_APB_MAX_DATA_WIDTH/8,
                                    int  CONTROL_PUSER_WIDTH_PARAM  = `SVT_APB_MAX_CONTROL_PUSER_WIDTH
                                  )
(
 inout  [(PSEL_WIDTH_PARAM -1):0]  psel,
 inout                        penable,
 inout                        pwrite,
 inout  [(PADDR_WIDTH_PARAM -1):0]  paddr,
 inout  [(PWDATA_WIDTH_PARAM -1):0]  pwdata,
 inout  [((PSTRB_WIDTH_PARAM)-1):0] pstrb,
 inout  [2:0]                              pprot,
 inout  [(CONTROL_PUSER_WIDTH_PARAM -1):0] control_puser,
 input  [(PRDATA_WIDTH_PARAM-1):0]   prdata  ,
 input                                   pready ,
 input                                   pslverr 
 );

endinterface :svt_apb_master_bind_if
//================================================================================================
module svt_apb_master_connector #(parameter is_active=1) (svt_apb_if master_if , svt_apb_master_bind_if master_bind_if);

`ifdef SVT_MULTI_SIM_PROCEDURAL_COMBINATORIAL_DRIVE

  // input (Master Inputs)
  always @(*)
  begin
    master_if.prdata[0]    = master_bind_if.prdata;
    master_if.pready[0]    = master_bind_if.pready;
    master_if.pslverr[0]   = master_bind_if.pslverr;
  end
`else
   assign  master_if.prdata[0]     = master_bind_if.prdata; 
   assign  master_if.pready[0]     = master_bind_if.pready;
   assign  master_if.pslverr[0]    = master_bind_if.pslverr;
`endif


  //inout(Master outputs)
  // if master is active 
  assign master_bind_if.psel  =    (is_active == 0) ?    'bz : master_if.psel;
  assign master_bind_if.penable  =  (is_active == 0) ? 'bz : master_if.penable;
  assign master_bind_if.pwrite  =  (is_active == 0) ? 'bz : master_if.pwrite;
  assign master_bind_if.paddr   =  (is_active == 0) ? 'bz : master_if.paddr;
  assign master_bind_if.pwdata  =  (is_active == 0) ? 'bz : master_if.pwdata;
  assign master_bind_if.pstrb  =  (is_active == 0) ? 'bz : master_if.pstrb;
  assign master_bind_if.pprot  =  (is_active == 0) ? 'bz : master_if.pprot;
  assign master_bind_if.control_puser =  (is_active == 0) ? 'bz : master_if.control_puser;

  
  // if master is passive
  always @ (*)
  begin
    if(is_active == 0) begin
      master_if.psel  =          master_bind_if.psel;       
      master_if.penable  =       master_bind_if.penable;
      master_if.pwrite  =        master_bind_if.pwrite;             
      master_if.paddr   =        master_bind_if.paddr;      
      master_if.pwdata  =        master_bind_if.pwdata;     
      master_if.pstrb  =         master_bind_if.pstrb;       
      master_if.pprot  =         master_bind_if.pprot;       
      master_if.control_puser  = master_bind_if.control_puser;
    end
   end
endmodule 

`endif // GAURD_APB_MASTER_BIND_IF_SVI



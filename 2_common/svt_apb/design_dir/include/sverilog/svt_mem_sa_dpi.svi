//--------------------------------------------------------------------------
// COPYRIGHT (C) 2012-2016 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//--------------------------------------------------------------------------
`ifndef GUARD_SVT_MEM_SA_DPI_SVI
`define GUARD_SVT_MEM_SA_DPI_SVI

//----------------------------------------------------------------------
// 
// System Verilog to C/C++ sparse array server
//
// "standard" (model code) interface class.
//
// Uses DPI for inter-language control transfer.
//
//----------------------------------------------------------------------

`ifndef SVT_MEM_SA_CORE_ADDR_BITS
`define SVT_MEM_SA_CORE_ADDR_BITS 64
`endif

`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_mem_sa_defs)
`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_mem_sa_helpers)

//======================================================================
//
// S Y S T E M   V E R I L O G   C A L L B A C K   F U N C T I O N S
//
//======================================================================

//----------------------------------------------------------------------
// BREAK EVENT CALLBACK instance command
//----------------------------------------------------------------------

`ifndef __SVDOC__

export "DPI-C" svt_mem_sa_msg = function svt_mem_sa_msg;

function void svt_mem_sa_msg( input int    msg_type,
                              input string tag,
                              input string msg_text );

`ifndef SVT_VMM_TECHNOLOGY
`ifdef SVT_XVM
  static `SVT_XVM(report_object) reporter =  `SVT_XVM(root)::get(); 
`endif
`else
  static vmm_log log = new ( "svt_mem_sa_msg", "class" );
`endif

  case (msg_type) 

    `SVT_MEM_MSG_TYPE_FATAL:
      begin
`ifdef svt_fatal
      `svt_fatal( tag, msg_text );
`else
      $display( "\nTime %0t *** F A T A L ***\n%s %s\n", $time, tag, msg_text );
`ifndef SVT_FATAL_ERROR_DO_NOT_FINISH
      $finish;
`endif        
`endif
      end

    `SVT_MEM_MSG_TYPE_ERROR:
      begin
`ifdef svt_error
      `svt_error( tag, msg_text );
`else
      $display( "\nTime %0t *** E R R O R ***\n%s %s\n", $time, tag, msg_text );
`endif
      end

    `SVT_MEM_MSG_TYPE_WARN:
      begin
`ifdef svt_warning
      `svt_warning( tag, msg_text );
`else
      $display( "\nTime %0t *** W A R N I N G ***\n%s %s\n", $time, tag, msg_text );
`endif
      end

    `SVT_MEM_MSG_TYPE_INFO:
      begin
`ifdef svt_info
      `svt_info( tag, msg_text );
`else
      $display( "\nTime %0t *** I N F O ***\n%s %s\n", $time, tag, msg_text );
`endif
      end

    `SVT_MEM_MSG_TYPE_DEBUG:
      begin
`ifdef svt_debug
      `svt_debug( tag, msg_text );
`else
      $display( "\nTime %0t *** D E B U G ***\n%s %s\n", $time, tag, msg_text );
`endif
      end

    `SVT_MEM_MSG_TYPE_VERBOSE:
      begin
`ifdef svt_verbose
      `svt_verbose( tag, msg_text );
`else
      $display( "\nTime %0t *** V E R B O S E ***\n%s %s\n", $time, tag, msg_text );
`endif
      end

    default:
      begin
      $display( "\nTime %0t *** ?????? ***\n%s %s\n", $time, tag, msg_text );
      end
  endcase

endfunction



export "DPI-C" svt_mem_halt = function svt_mem_halt;

function void svt_mem_halt( input string tag, input string reason_for_halt );

`ifdef svt_info
  `svt_info( tag, reason_for_halt )
`else
  $display( "\nTime %0t *** INFO ***  %s\n%s\n", $time, tag, reason_for_halt );
`endif

  $stop;

endfunction


export "DPI-C" svt_mem_stop = function svt_mem_stop;

function void svt_mem_stop();
  $stop;
endfunction

//----------------------------------------------------------------------
// Functions related to FSDB-recording of memory actions.
//----------------------------------------------------------------------

import "DPI-C" context function void svt_mem_sa_inst_set_svt_mem_core_id(
  input chandle instp,
  input int     svt_mem_core_id );

export "DPI-C" svt_mem_sa_record_file_data = function svt_mem_sa_record_file_data;

export "DPI-C" svt_mem_sa_record_file_data4 = function svt_mem_sa_record_file_data4;

export "DPI-C" svt_mem_sa_record_wrmasked_data = function svt_mem_sa_record_wrmasked_data;

export "DPI-C" svt_mem_sa_record_wrmasked_data4 = function svt_mem_sa_record_wrmasked_data4;

//======================================================================
//
// S P A R S E   A R R A Y   S E R V E R   C A L L S
//
//======================================================================


//----------------------------------------------------------------------
// INTERNAL USE ONLY - reset the fatal, error, warning, info, debug,
// and verbose message tracking counts...
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_set_debug_level(
  input  chandle   instp,
  input  int       level );


//----------------------------------------------------------------------
// INTERNAL USE ONLY - reset the fatal, error, warning, info, debug,
// and verbose message tracking counts...
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_reset_msg_counts(
  input  chandle   instp );


//----------------------------------------------------------------------
// INTERNAL USE ONLY - fetch the fatal, error, warning, info, debug,
// and verbose message tracking counts...
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_get_msg_counts(
  input  chandle   instp,
  output int       fatal_count,
  output int       error_count,
  output int       warning_count,
  output int       info_count,
  output int       debug_count,
  output int       verbose_count );


//----------------------------------------------------------------------
// NEW instance command
//----------------------------------------------------------------------
import "DPI-C" context function chandle svt_mem_sa_inst_new(
  input  string  name,
  input  int     four_state,  // `SVT_MEM_SA_2STATE or `SVT_MEM_SA_4STATE
  input  int     a_width,
  input  int     phys_dim_nb,
  input  int     max_phys_dim_nb,
  input  int     d_width,
  input  int     at_width,
  input  int     modes,   // 1=read_only 2=no_WPE_attr 4=no_ACCESS_attr
  input  string  load_file_name,
  output int     status );    // 0=failure, 1=success

import "DPI-C" context function int svt_mem_sa_inst_delete( input chandle instp );

import "DPI-C" context function int svt_mem_sa_inst_delete_all();

//----------------------------------------------------------------------
// Physical dimensions - to be called right after new, before all read/writes
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_define_physical_dimension( input chandle instp,
                                                                          input string attribute_name, 
                                                                          input string dimension_name,
                                                                          input int    dimension_size);   
   
//----------------------------------------------------------------------
// clone
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_clone(
  input chandle          dest_instp,
  input chandle          src_instp,
  input longint unsigned sim_time );


//----------------------------------------------------------------------
// mem copy
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_copy(
  input  chandle          dest_instp,
  input  chandle          src_instp,
  longint unsigned        dest_adr,
  longint unsigned        src_adr,
  longint                 length,
  input longint unsigned  sim_time );


//----------------------------------------------------------------------
// mem compare
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_memcmp(
  input  chandle          instp1,
  input  chandle          instp2,
  input  int              modes,
  input  int              max_errors,
  output int              num_errors,
  input  longint unsigned dest_adr,
  input  longint unsigned src_adr,
  input  longint          length,
  output int              status,
  input longint unsigned  sim_time );


//----------------------------------------------------------------------
// DISPLAY names of all registered file formatters
//----------------------------------------------------------------------
import "DPI-C" context function svt_mem_sa_display_formatters();
import "DPI-C" context function int svt_mem_sa_get_formatters( output string formatter_types );
import "DPI-C" context function int svt_mem_sa_is_formatter( input string formatter_type );


//----------------------------------------------------------------------
// DISPLAY names of all instances
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_display_instances();


//----------------------------------------------------------------------
// FIND instance command (backdoor interface) -- locate an instance
// using it's name.
//
// status is 1 if instance located OK (since chandles can't be tested
// for NULL in System Verilog)
//----------------------------------------------------------------------
import "DPI-C" context function chandle svt_mem_sa_find_instance( input string name, output int status );


//----------------------------------------------------------------------
// COLLECT STATISTICS for all isntances
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_collect_all_statistics( output svt_mem_sa_statdata stats );

//----------------------------------------------------------------------
// RESET STATISTICS for all isntances
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_reset_all_statistics();




//======================================================================
//
// S P A R S E  A R R A Y   I N S T A N C E   S P E C I F I C   C A L L S 
//
//======================================================================

//----------------------------------------------------------------------
// GET DATAARRARY ID of this instance
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_get_dataarray_id( input chandle instp );


//----------------------------------------------------------------------
// GET NAME of this instance
//----------------------------------------------------------------------
import "DPI-C" context function svt_mem_sa_inst_get_name( input chandle instp, output string name );


//----------------------------------------------------------------------
// COLLECT STATISTICS - collect statistics from an instance
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_collect_statistics(
  input  chandle    instp,
  output svt_mem_sa_statdata stats );


//----------------------------------------------------------------------
// COLLECT STATISTICS - reset statistics from an instance
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_reset_statistics( input chandle instp );


//----------------------------------------------------------------------
// DISPLAY PAGE MAP - show page structure orginations
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_display_page_map(
  input  chandle    instp );

import "DPI-C" context function void svt_mem_sa_inst_display_pagelist(
  input  chandle    instp,
  input  int        index );



//----------------------------------------------------------------------
// WRITE commands
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_write(
  input  chandle                              instp,
  input  longint unsigned                     address,
  input          `SVT_MEM_SA_PHYSICAL_ADDRESS(physical_address), 
  input  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0]    data,
  output int                                  attrs,
  output int                                  status,
  input longint unsigned                      sim_time );

import "DPI-C" context function int svt_mem_sa_inst_write4(
  input  chandle                              instp,
  input  longint unsigned                     address,
  input          `SVT_MEM_SA_PHYSICAL_ADDRESS(physical_address), 
  input  logic [`SVT_MEM_MAX_DATA_WIDTH-1:0]  data,
  output int                                  attrs,
  output int                                  status,
  input longint unsigned                      sim_time );


import "DPI-C" context function int svt_mem_sa_inst_write_masked(
  input  chandle                              instp,
  input  longint unsigned                     address,
  input          `SVT_MEM_SA_PHYSICAL_ADDRESS(physical_address), 
  input  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0]    data,
  input  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0]    mask,
  output int                                  attrs,
  output int                                  status,
  input longint unsigned                      sim_time );

import "DPI-C" context function int svt_mem_sa_inst_write_masked4(
  input  chandle                              instp,
  input  longint unsigned                     address,
  input          `SVT_MEM_SA_PHYSICAL_ADDRESS(physical_address), 
  input  logic [`SVT_MEM_MAX_DATA_WIDTH-1:0]  data,
  input  bit   [`SVT_MEM_MAX_DATA_WIDTH-1:0]  mask,
  output int                                  attrs,
  output int                                  status,
  input longint unsigned                      sim_time );

//----------------------------------------------------------------------
// READ commands
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_read(
  input  chandle                              instp,
  input  longint unsigned                     address,
  input          `SVT_MEM_SA_PHYSICAL_ADDRESS(physical_address), 
  inout  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0]    data,
  output int                                  attrs,
  output int                                  status,
  input longint unsigned                      sim_time );

import "DPI-C" context function int svt_mem_sa_inst_read4(
  input  chandle                              instp,
  input  longint unsigned                     address,
  input          `SVT_MEM_SA_PHYSICAL_ADDRESS(physical_address), 
  inout  logic [`SVT_MEM_MAX_DATA_WIDTH-1:0]  data,
  output int                                  attrs,
  output int                                  status,
  input longint unsigned                      sim_time );
                                                                       
//----------------------------------------------------------------------
// ATTRIBUTE commands
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_peek_attr(
  input  chandle                              instp,
  input  longint unsigned                     addr_lo,
  input  longint unsigned                     addr_hi,
  output int                                  attrs,
  input  int                                  modes );


import "DPI-C" context function int svt_mem_sa_inst_poke_attr(
  input chandle                               instp,
  input longint unsigned                      addr_lo,
  input longint unsigned                      addr_hi,
  input int                                   attrs,
  input int                                   modes,
  input longint unsigned                      sim_time );

import "DPI-C" context function int svt_mem_sa_inst_get_attr(
  input  chandle                              instp,
  input  longint unsigned                     address,
  output int                                  attrs );

import "DPI-C" context function int svt_mem_sa_inst_set_attr(
  input chandle                              instp,
  input longint unsigned                     address,
  input int                                  attrs,
  input longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_clear_attr(
  input  chandle                              instp,
  input  longint unsigned                     address,
  input  int                                  attrs,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_clear_attr_range(
  input  chandle                              instp,
  input  longint unsigned                     addr_lo,
  input  longint unsigned                     addr_hi,
  input  int                                  attrs,
  input  longint unsigned                     sim_time );
   

import "DPI-C" context function int svt_mem_sa_inst_clear_all(
  input chandle                              instp,
  input int                                  attrs,
  input longint unsigned                     sim_time );


//----------------------------------------------------------------------
// UNLOAD memory commands
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_unload(
  input chandle                              instp,
  input longint unsigned                     addr_lo,
  input longint unsigned                     addr_hi,
  input longint unsigned                     sim_time );


import "DPI-C" context function int svt_mem_sa_inst_unload_all(
  input  chandle                             instp,
  input  longint unsigned                    sim_time );


//----------------------------------------------------------------------
// RESET sparse array command
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_reset(
  input chandle                              instp,
  input longint unsigned                     sim_time );


//----------------------------------------------------------------------
// POKE commands (backdoor interface)
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_poke(
  input  chandle                              instp,
  input  longint unsigned                     adr,
  input  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0]    data,
  output int                                  status,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_poke4(
  input  chandle                              instp,
  input  longint unsigned                     adr,
  input  logic [`SVT_MEM_MAX_DATA_WIDTH-1:0]  data,
  output int                                  status,
  input  longint unsigned                     sim_time );


//----------------------------------------------------------------------
// PEEK commands (backdoor interface)
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_peek(
  input  chandle                              instp,
  input  longint unsigned                     adr,
  output bit [`SVT_MEM_MAX_DATA_WIDTH-1:0]    data,
  output int                                  status,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_peek4(
  input  chandle                              instp,
  input  longint unsigned                     adr,
  output logic [`SVT_MEM_MAX_DATA_WIDTH-1:0]  data,
  output int                                  status,
  input  longint unsigned                     sim_time );


//----------------------------------------------------------------------
// PROTECT/UNPROTECT commands (backdoor interface)
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_protect(
  input  chandle                              instp,
  input  longint unsigned                     adr_lo,
  input  longint unsigned                     adr_hi,
  output int                                  status,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_unprotect(
  input  chandle                              instp,
  input  longint unsigned                     adr_lo,
  input  longint unsigned                     adr_hi,
  output int                                  status,
  input  longint unsigned                     sim_time );


//----------------------------------------------------------------------
// LOAD/DUMP commands (backdoor interface)
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_load(
  input  chandle                              instp,
  input  string                               filename,
  input  int                                  modes,  // see SVT_MEM_SA_LOAD_xxx defines in defs.svi file
  input  longint unsigned                     adr_lo,
  input  longint unsigned                     adr_hi,
  input  longint unsigned                     src_adr_lo,
  input  longint unsigned                     src_adr_hi,
  output int                                  status,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_get_words_loaded(
  input  chandle                              instp );


import "DPI-C" context function int svt_mem_sa_inst_compare(
  input  chandle                              instp,
  input  string                               filename,
  input  int                                  modes,
  output int                                  num_errors,
  input  int                                  max_errors,
  output int                                  status );

import "DPI-C" context function int svt_mem_sa_inst_compare_range(
  input  chandle                              instp,
  input  string                               filename,
  input  longint unsigned                     adr_lo,
  input  longint unsigned                     adr_hi,
  input  longint unsigned                     src_adr_lo,
  input  longint unsigned                     src_adr_hi,
  input  int                                  modes,
  output int                                  num_errors,
  input  int                                  max_errors,
  output int                                  status );

import "DPI-C" context function int svt_mem_sa_inst_get_compare_error4(
  input  chandle                                instp,
  output int                                    error_type,
  output longint unsigned                       addr,
  output logic [`SVT_MEM_MAX_DATA_WIDTH-1:0] mem_data,
  output logic [`SVT_MEM_MAX_DATA_WIDTH-1:0] file_data );

import "DPI-C" context function int svt_mem_sa_inst_get_compare_error(
  input  chandle                              instp,
  output int                                  error_type,
  output longint unsigned                     addr,
  output bit [`SVT_MEM_MAX_DATA_WIDTH-1:0] mem_data,
  output bit [`SVT_MEM_MAX_DATA_WIDTH-1:0] file_data );

import "DPI-C" context function int svt_mem_sa_inst_dump(
  input  chandle                              instp,
  input  string                               filename,
  input  string                               filetype,
  input  int                                  modes,  // see SVT_MEM_DUMP_xxx defines in svt_common_defines.svi file
  input  longint unsigned                     adr_lo,
  input  longint unsigned                     adr_hi,
  input  longint unsigned                     src_adr_lo,
  input  longint unsigned                     src_adr_hi,
  output int                                  status );


//----------------------------------------------------------------------
// WIDTH commands
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_get_addr_width( input  chandle instp );

import "DPI-C" context function int svt_mem_sa_inst_get_nb_phys_dimensions( input  chandle instp);    

import "DPI-C" context function int svt_mem_sa_inst_get_data_width( input  chandle instp );

import "DPI-C" context function int svt_mem_sa_inst_get_attr_width( input  chandle instp );

import "DPI-C" context function int svt_mem_sa_inst_get_inst_modes( input  chandle instp );

import "DPI-C" context function void svt_mem_sa_inst_get_load_file_name( input  chandle instp, output string load_file_name );

//----------------------------------------------------------------------
// OPTIMIZE page data structure
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_optimize( input  chandle instp );


//----------------------------------------------------------------------
// ATTRIBUTE management functions
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_alloc_attr_bit(
  input  chandle                              instp,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_free_attr_bit(
  input  chandle                              instp,
  input  int                                  attr_bit_mask,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_get_access_lock_attr(
  input  chandle                              instp );

import "DPI-C" context function int svt_mem_sa_inst_get_write_protect_attr(
  input  chandle                              instp );


//----------------------------------------------------------------------
// ERROR CHECKING management functions
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_get_checks(
  input  chandle                              instp );

import "DPI-C" context function void svt_mem_sa_inst_set_checks(
  input  chandle                              instp,
  input  int                                  enables,
  input  longint unsigned                     sim_time );

//----------------------------------------------------------------------
// MSG DISABLE function
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_inst_set_msg_disables(
  input  chandle                              instp,
  input  int                                  mask );


//----------------------------------------------------------------------
// MISC functions
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_get_native_page_size(
  input  chandle                              instp );

import "DPI-C" context function int svt_mem_sa_inst_get_default_page_size(
  input  chandle                              instp );


import "DPI-C" context function int svt_mem_sa_inst_is_read_only(
  input  chandle                              instp );

import "DPI-C" context function void svt_mem_sa_inst_set_read_only(
  input  chandle                              instp,
  input  int                                  read_only,
  input  longint unsigned                     sim_time );

import "DPI-C" context function void svt_mem_sa_set_mem_max_data_width(
  input  int                                  mem_max_data_width);

import "DPI-C" context function void svt_mem_sa_set_mem_simulation_seed(
  input  int unsigned                         sim_seed);

//----------------------------------------------------------------------
// BURST MODE commands
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_start_access(
  input  chandle                              instp,
  input  int                                  mode,
  input  longint unsigned                     addr,
  input  int                                  access_length,
  output int                                  status,
  input  longint unsigned                     sim_time );


import "DPI-C" context function int svt_mem_sa_inst_end_access(
  input  chandle                              instp,
  input  longint unsigned                     lock_addr,
  output int                                  actual_access_length,
  output int                                  status,
  input  longint unsigned                     sim_time );


import "DPI-C" context function int svt_mem_sa_inst_get_access_lock_status(
  input  chandle                              instp );


//----------------------------------------------------------------------
// PROTOCOL ANALYZER commands
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_enable_pa_history_collection(
  input  chandle                              instp,
  input  string                               filename );

import "DPI-C" context function void svt_mem_sa_inst_close_pa_history_file(
  input  chandle                              instp,
  input  int                                  delete_xml_file );


//----------------------------------------------------------------------
// PATTERN GENERATOR commands (backdoor interface)
//----------------------------------------------------------------------

import "DPI-C" context function int svt_mem_sa_inst_create_pattern(
  input  chandle                              instp,
  input  svt_mem_sa_patspec                   pattern_spec, // pattern type specification struct
  input  logic [`SVT_MEM_MAX_DATA_WIDTH-1:0]  base_data,
  output int                                  pattern_id,
  input  longint unsigned                     sim_time ); // unique pattern id #

import "DPI-C" context function int svt_mem_sa_inst_remove_pattern(
  input  chandle                              instp,
  input  int                                  pattern_id,
  input  longint unsigned                     sim_time );

import "DPI-C" context function int svt_mem_sa_inst_get_pattern_data(
  input  chandle                              instp,
  input  int                                  pattern_id,
  input  longint unsigned                     adr, // address for pattern
  inout  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0] data );

import "DPI-C" context function int svt_mem_sa_inst_show_pattern(
  input  chandle                              instp,
  input  int                                  pattern_id );


//----------------------------------------------------------------------
// BREAKPOINT commands (backdoor interface)
//----------------------------------------------------------------------

import "DPI-C" context function int svt_mem_sa_inst_create_breakpoint(
  input  chandle                              instp,
  input  svt_mem_sa_breakspec                 break_spec, // break point request struct
  input  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0] data,
  input  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0] data_hi,
  input  bit [`SVT_MEM_MAX_DATA_WIDTH-1:0] data_mask,
  input  string                               text_msg,
  output int                                  break_id );

import "DPI-C" context function int svt_mem_sa_inst_remove_breakpoint(
  input  chandle                              instp,
  input  int                                  break_id );

import "DPI-C" context function int svt_mem_sa_inst_enable_breakpoint(
  input  chandle                              instp,
  input  int                                  break_id );

import "DPI-C" context function int svt_mem_sa_inst_disable_breakpoint(
  input  chandle                              instp,
  input  int                                  break_id );

import "DPI-C" context function int svt_mem_sa_inst_is_breakpoint_enabled(
  input  chandle                              instp,
  input  int                                  break_id,
  output int                                  enabled );


//----------------------------------------------------------------------
// ITERATOR commands (backdoor interface)
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_inst_next_occupied(
  input  chandle                              inst_handle,
  input  longint unsigned                     adr,
  input  longint unsigned                     limit_adr,
  output longint unsigned                     next_adr );

import "DPI-C" context function int svt_mem_sa_inst_next_attr(
  input  chandle                              inst_handle,
  input  longint unsigned                     adr,
  input  int unsigned                         attrs,
  input  int unsigned                         mask,
  input  longint unsigned                     limit_adr,
  output longint unsigned                     next_adr );


//----------------------------------------------------------------------
// PROCESS MEMORY MEASUREMENTS
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_get_process_pid();

// Mem types: VmSize, VmRSS, returns the memory size in kB  
import "DPI-C" context function int svt_mem_sa_get_process_mem_size(input string mem_type);


//----------------------------------------------------------------------
// SELF-TEST 
//----------------------------------------------------------------------
import "DPI-C" context function int svt_mem_sa_self_test();


//----------------------------------------------------------------------
// CLEAN-UP
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_clean_up();

//----------------------------------------------------------------------
// Enable data width aligned address feature
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_enable_dwidth_aligned_addr(input chandle inst_handle);


//----------------------------------------------------------------------
// Clean-up method to reset static variables and memcore sparse array
// when simualtion is ended.
//----------------------------------------------------------------------
import "DPI-C" context function void svt_mem_sa_terminate();

`endif // __SVDOC__
 
`endif // GUARD_SVT_MEM_SA_DPI_SVI

//=======================================================================
// COPYRIGHT (C) 2009-2016 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

// This include file is intended to be included in hdl transactor model wrappers to 
// implement command wrapping.  This is really code to be included in class 
// definitions.  Therefore, guarding the file is inappropriate.

// =============================================================================
// HDL TASK EXPORTS: This file 'exports' the model methods which will be
// available to an HDL testbench, as tasks called on an instance of the model
// (which is encapsulated in a shell file). These tasks are declared in the
// interface of the shell file (it is the shell module that is instantiated as
// a VIP model component in the HDL testbench). Except for the initialization
// usage of set_data_prop(), these tasks simply call their counterparts in the
// internal model instance.

//------------------------------------------------------------------------------
/**
 * Command Support:
 * Used to start a transactor based model.
 */
task start_xactor();
  begin
    svt_xactor xactor;
    // Watch out for subenv cmd providers
    if ($cast(xactor, model)) begin
      xactor.start_xactor();
    end else begin
      `vmm_error(model.log, "start_xactor() - Command not supported by this model");
    end
  end
endtask

//------------------------------------------------------------------------------
/**
 * Command Support:
 * Used to stop a transactor based model.
 */
task stop_xactor();
  begin
    svt_xactor xactor;
    // Watch out for subenv cmd providers
    if ($cast(xactor, model)) begin
      xactor.stop_xactor();
    end else begin
      `vmm_error(model.log, "stop_xactor() - Command not supported by this model");
    end
  end
endtask

//------------------------------------------------------------------------------
/**
 * Command Support:
 * Used to reset a transactor based model.
 */
task reset_xactor(int rst_type);
  begin
    svt_xactor xactor;
    // Watch out for subenv cmd providers
    if ($cast(xactor, model)) begin
      vmm_xactor::reset_e vmm_rst_type;
      if ($cast(vmm_rst_type, rst_type)) begin
        xactor.reset_xactor(vmm_rst_type);
      end else begin
        string msg;
        $sformat(msg, "reset_xactor() - Invalid rst_type value (%0d) specified -- unable to execute reset_xactor", rst_type);
        `vmm_error(xactor.log, msg);
      end
    end else begin
      `vmm_error(model.log, "stop() - Command not supported by this model");
    end 
  end
endtask

`include `SVT_SOURCE_MAP_LIB_INCLUDE_SVI(R-2020.12,svt_common_export)

//------------------------------------------------------------------------------

//==============================================================================

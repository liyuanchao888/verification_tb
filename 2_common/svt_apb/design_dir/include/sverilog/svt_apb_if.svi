
`ifndef GUARD_SVT_APB_IF_SVI
`define GUARD_SVT_APB_IF_SVI

`include "svt_apb_defines.svi"

`include "svt_apb_slave_if.svi"

typedef virtual svt_apb_slave_if APB_SLAVE_IF;

/**
  * APB Interface provides implicit connection between single master and multiple slaves
  * by default. Below macro SVT_APB_DISCONNECT_TOP_LEVEL_APB_IF_SIGNALS can be defined
  * in order to disable this implicit connection.
  * Following connectivity between master and slave is further divided into 3 different
  * topology.
  *   1) CONNECT_TOP_LEVEL_APB_IF_SIGNALS_BASED_ON_PSEL - master signals are driven only
  *        to the slave which is selected by psel. Other slaves will be driven 0 for all signals.
  *   2) CONNECT_TOP_LEVEL_APB_IF_SIGNALS_BASED_ON_PSEL_FROM_PASSIVE_SLAVE - this connection
  *        is only applicable for passive mode. Here passive slave signals are connected to
  *        passive master ports.
  *   3) if none of the above two macros are defined then each slave receives signals driven
  *        by the master directly.
  */
`ifndef SVT_AMBA_INTERFACE_METHOD_DISABLE  
`ifndef SVT_APB_DISCONNECT_TOP_LEVEL_APB_IF_SIGNALS
`define CONNECT_TOP_LEVEL_APB_IF_SIGNALS(port_num) \
`ifdef CONNECT_TOP_LEVEL_APB_IF_SIGNALS_BASED_ON_PSEL \
  assign svt_apb_if.slave_if[port_num].pclk = pclk; \
  assign svt_apb_if.slave_if[port_num].presetn = presetn; \
  assign svt_apb_if.slave_if[port_num].psel = psel[port_num]; \
  assign svt_apb_if.slave_if[port_num].penable = psel[port_num] ? penable : 1'b0; \
  assign svt_apb_if.slave_if[port_num].pwrite = psel[port_num] ? pwrite : 1'b0; \
  assign svt_apb_if.slave_if[port_num].paddr = psel[port_num] ? paddr : 'h0; \
  assign svt_apb_if.slave_if[port_num].pwdata = psel[port_num] ? pwdata : 'h0; \
  assign svt_apb_if.slave_if[port_num].pstrb = psel[port_num] ? pstrb : 1'b0; \
  assign svt_apb_if.slave_if[port_num].pprot = psel[port_num] ? pprot : 3'h0; \
  assign svt_apb_if.slave_if[port_num].control_puser = psel[port_num] ? control_puser : 'h0; \
  assign prdata[port_num] = psel[port_num] ? svt_apb_if.slave_if[port_num].prdata : 'h0; \
  assign pready[port_num] = psel[port_num] ? svt_apb_if.slave_if[port_num].pready : 1'b0; \
  assign pslverr[port_num] = psel[port_num] ? svt_apb_if.slave_if[port_num].pslverr : 'h0; \
  \
`elsif CONNECT_TOP_LEVEL_APB_IF_SIGNALS_BASED_ON_PSEL_FROM_PASSIVE_SLAVE \
  assign svt_apb_if.slave_if[port_num].pclk = pclk; \
  assign svt_apb_if.slave_if[port_num].presetn = presetn; \
  assign svt_apb_if.slave_if[port_num].psel = psel[port_num]; \
  assign penable = psel[port_num] ? svt_apb_if.slave_if[port_num].penable : 1'b0; \
  assign pwrite = psel[port_num] ? svt_apb_if.slave_if[port_num].pwrite : 1'b0; \
  assign paddr = psel[port_num] ? svt_apb_if.slave_if[port_num].paddr : 'h0; \
  assign pwdata = psel[port_num] ? svt_apb_if.slave_if[port_num].pwdata : 'h0; \
  assign pstrb = psel[port_num] ? svt_apb_if.slave_if[port_num].pstrb : 1'b0; \
  assign pprot = psel[port_num] ? svt_apb_if.slave_if[port_num].pprot : 3'h0; \
  assign control_puser = psel[port_num] ? svt_apb_if.slave_if[port_num].control_puser : 'h0; \
  assign prdata[port_num] = psel[port_num] ? svt_apb_if.slave_if[port_num].prdata : 'h0; \
  assign pready[port_num] = psel[port_num] ? svt_apb_if.slave_if[port_num].pready : 1'b0; \
  assign pslverr[port_num] = psel[port_num] ? svt_apb_if.slave_if[port_num].pslverr : 'h0; \
  \
`else \
  assign svt_apb_if.slave_if[port_num].pclk = pclk; \
  assign svt_apb_if.slave_if[port_num].presetn = presetn; \
  assign svt_apb_if.slave_if[port_num].psel = psel[port_num]; \
  assign svt_apb_if.slave_if[port_num].penable = penable; \
  assign svt_apb_if.slave_if[port_num].pwrite = pwrite; \
  assign svt_apb_if.slave_if[port_num].paddr = paddr; \
  assign svt_apb_if.slave_if[port_num].pwdata = pwdata; \
  assign svt_apb_if.slave_if[port_num].pstrb = pstrb; \
  assign svt_apb_if.slave_if[port_num].pprot = pprot; \
  assign svt_apb_if.slave_if[port_num].control_puser = control_puser;\
  assign prdata[port_num] = svt_apb_if.slave_if[port_num].prdata; \
  assign pready[port_num] = svt_apb_if.slave_if[port_num].pready; \
  assign pslverr[port_num] = svt_apb_if.slave_if[port_num].pslverr; \
`endif \

`endif
`endif

/**
 * APB VIP provides the SystemVerilog interface which can be used to connect
 * the VIP to the DUT. A top level interface svt_apb_if is defined. The top
 * level interface contains the system level pins and an array of slave interfaces.
 * By default, 16 slave interfaces are defined in the top level interface.
 * Currently, the maximum number of slave interfaces supported is 128. The
 * number of slave interfaces in top level interface can be controlled using 
 * macro SVT_APB_MAX_NUM_SLAVES_{0..128}. For example, if you want to
 * use 20 slave interfaces, you can define following macro when compiling the VIP:
 * <li> SVT_APB_MAX_NUM_SLAVES_20<br>
 * Please refer to User Guide section Overriding System Constants on how to
 * provide these macro definitions to VIP.
 */
interface svt_apb_if ();

`ifndef SVT_APB_MAX_NUM_SLAVES_0
  svt_apb_slave_if  slave_if[`SVT_APB_MAX_NUM_SLAVES-1:0]();
`endif

  // Parameter describing an interface to be active or passive
  // If this parameter == 1 then the interface is active otherwise passive
  // By default the interface is active
  bit						is_active=1;

  // If set to '1' then it disables assertion check of X in presetn 
  bit						disable_x_check_of_presetn=0;

  // If set to '1' then it disables assertion check of X in pclk when presetn is de-asserted
  bit						disable_x_check_of_pclk=0;

//-----------------------------------------------------------------------
// Interface Signals
//-----------------------------------------------------------------------
  // Master Signals
  logic                                   pclk;
  logic                                   presetn;
  logic [(`SVT_APB_MAX_NUM_SLAVES -1):0]  psel;
  logic                                   penable;
  logic                                   pwrite;
  logic [(`SVT_APB_MAX_ADDR_WIDTH -1):0]  paddr;
  logic [(`SVT_APB_MAX_DATA_WIDTH -1):0]  pwdata;
  logic [((`SVT_APB_MAX_DATA_WIDTH/8)-1):0] pstrb;
  logic [2:0]                              pprot;
 
  //user defined signals
  logic[(`SVT_APB_MAX_CONTROL_PUSER_WIDTH -1):0] control_puser;

  // Slave Signals
  logic [(`SVT_APB_MAX_DATA_WIDTH-1):0]   prdata[`SVT_APB_MAX_NUM_SLAVES-1:0];
  logic                                 pready[`SVT_APB_MAX_NUM_SLAVES-1:0] ;
  logic                                 pslverr[`SVT_APB_MAX_NUM_SLAVES-1:0];

  /** Debug Signals for master driver */
  logic [31:0]                          xact_id;

  /** Debug Signals for master monitor */
  logic [31:0]                          mon_xact_id;

initial begin
  wait(presetn === 1'b0);
  fork
    forever begin
      wait(presetn === 1'bx);
      if(disable_x_check_of_presetn == 1'b0) begin
         presetn_x_assert: assert(0) else $fatal(1,"stopping simulation as abp_if.presetn is set to X");
      end
      wait(presetn !== 1'bx);
    end
    forever begin
      wait(presetn === 1'b1);
      wait(pclk === 1'bx && presetn === 1'b1);
      if(disable_x_check_of_pclk == 1'b0) begin
         pclk_x_assert: assert(0) else $fatal(1,"stopping simulation as abp_if.pclk is set to X");
      end
      wait(pclk !== 1'bx);
    end
  join
end

//-----------------------------------------------------------------------
// Clocking Blocks
//-----------------------------------------------------------------------
  /**
   * Clocking block that defines VIP APB Master Interface signal synchronization
   * and directionality.
   */
  clocking apb_master_cb @(posedge pclk);
    default input #`SVT_APB_IF_SETUP_TIME output #`SVT_APB_IF_HOLD_TIME;

    input presetn;

    output psel;
    output penable;
    output pwrite;
    output paddr;
    output pwdata;
    output pstrb;
    output pprot;
    output control_puser;

    input prdata;
    input pready;
    input pslverr;
  endclocking: apb_master_cb

  //-----------------------------------------------------------------------
  /**
   * Clocking block that defines VIP APB System Monitor Interface signal
   * synchronization and directionality.
   */
    clocking apb_monitor_cb @(posedge pclk);
    default input #`SVT_APB_IF_SETUP_TIME output #`SVT_APB_IF_HOLD_TIME;

    input presetn;

    input psel;
    input penable;
    input pwrite;
    input paddr;
    input pwdata;
    input pstrb;
    input pprot;
    input control_puser;

    input prdata;
    input pready;
    input pslverr;
  endclocking: apb_monitor_cb


//-----------------------------------------------------------------------
// Modports
//-----------------------------------------------------------------------
  //------------------------------------------------------------------------
  /** Modport used to connect the VIP Master to APB interface signals. */
  modport svt_apb_master_modport (clocking apb_master_cb,input presetn);
  
  //-----------------------------------------------------------------------
  /** Modport used to connect the VIP Monitor to APB interface signals. */
  modport svt_apb_monitor_modport (clocking apb_monitor_cb,input presetn);

  //-----------------------------------------------------------------------
  /** Modport used to connect the VIP Debug Port. */
  modport svt_apb_debug_modport (output xact_id,
                                 output mon_xact_id);

  //-----------------------------------------------------------------------
  /** Asynchronous modport suitable for SV Master Bind interface */
  modport svt_apb_master_async_modport (input presetn,
                                        output psel,
                                        output penable,
                                        output pwrite,
                                        output paddr,
                                        output pwdata,
                                        output pstrb,
                                        output pprot,
                                        output control_puser,
                                        input prdata,
                                        input pready,
                                        input pslverr
                                        );

//-----------------------------------------------------------------------
// Accessor method to obtain a slave interface
//-----------------------------------------------------------------------
  function APB_SLAVE_IF get_slave_if(int idx);
    case (idx)
`ifdef SVT_APB_VALID_SLAVE_IDX_0
      0 : get_slave_if = svt_apb_if.slave_if[0];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_1
      1 : get_slave_if = svt_apb_if.slave_if[1];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_2
      2 : get_slave_if = svt_apb_if.slave_if[2];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_3
      3 : get_slave_if = svt_apb_if.slave_if[3];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_4
      4 : get_slave_if = svt_apb_if.slave_if[4];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_5
      5 : get_slave_if = svt_apb_if.slave_if[5];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_6
      6 : get_slave_if = svt_apb_if.slave_if[6];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_7
      7 : get_slave_if = svt_apb_if.slave_if[7];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_8
      8 : get_slave_if = svt_apb_if.slave_if[8];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_9
      9 : get_slave_if = svt_apb_if.slave_if[9];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_10
      10 : get_slave_if = svt_apb_if.slave_if[10];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_11
      11 : get_slave_if = svt_apb_if.slave_if[11];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_12
      12 : get_slave_if = svt_apb_if.slave_if[12];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_13
      13 : get_slave_if = svt_apb_if.slave_if[13];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_14
      14 : get_slave_if = svt_apb_if.slave_if[14];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_15
      15 : get_slave_if = svt_apb_if.slave_if[15];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_16
      16 : get_slave_if = svt_apb_if.slave_if[16];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_17
      17 : get_slave_if = svt_apb_if.slave_if[17];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_18
      18 : get_slave_if = svt_apb_if.slave_if[18];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_19
      19 : get_slave_if = svt_apb_if.slave_if[19];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_20
      20 : get_slave_if = svt_apb_if.slave_if[20];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_21
      21 : get_slave_if = svt_apb_if.slave_if[21];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_22
      22 : get_slave_if = svt_apb_if.slave_if[22];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_23
      23 : get_slave_if = svt_apb_if.slave_if[23];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_24
      24 : get_slave_if = svt_apb_if.slave_if[24];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_25
      25 : get_slave_if = svt_apb_if.slave_if[25];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_26
      26 : get_slave_if = svt_apb_if.slave_if[26];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_27
      27 : get_slave_if = svt_apb_if.slave_if[27];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_28
      28 : get_slave_if = svt_apb_if.slave_if[28];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_29
      29 : get_slave_if = svt_apb_if.slave_if[29];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_30
      30 : get_slave_if = svt_apb_if.slave_if[30];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_31
      31 : get_slave_if = svt_apb_if.slave_if[31];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_32
      32 : get_slave_if = svt_apb_if.slave_if[32];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_33
      33 : get_slave_if = svt_apb_if.slave_if[33];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_34
      34 : get_slave_if = svt_apb_if.slave_if[34];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_35
      35 : get_slave_if = svt_apb_if.slave_if[35];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_36
      36 : get_slave_if = svt_apb_if.slave_if[36];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_37
      37 : get_slave_if = svt_apb_if.slave_if[37];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_38
      38 : get_slave_if = svt_apb_if.slave_if[38];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_39
      39 : get_slave_if = svt_apb_if.slave_if[39];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_40
      40 : get_slave_if = svt_apb_if.slave_if[40];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_41
      41 : get_slave_if = svt_apb_if.slave_if[41];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_42
      42 : get_slave_if = svt_apb_if.slave_if[42];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_43
      43 : get_slave_if = svt_apb_if.slave_if[43];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_44
      44 : get_slave_if = svt_apb_if.slave_if[44];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_45
      45 : get_slave_if = svt_apb_if.slave_if[45];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_46
      46 : get_slave_if = svt_apb_if.slave_if[46];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_47
      47 : get_slave_if = svt_apb_if.slave_if[47];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_48
      48 : get_slave_if = svt_apb_if.slave_if[48];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_49
      49 : get_slave_if = svt_apb_if.slave_if[49];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_50
      50 : get_slave_if = svt_apb_if.slave_if[50];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_51
      51 : get_slave_if = svt_apb_if.slave_if[51];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_52
      52 : get_slave_if = svt_apb_if.slave_if[52];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_53
      53 : get_slave_if = svt_apb_if.slave_if[53];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_54
      54 : get_slave_if = svt_apb_if.slave_if[54];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_55
      55 : get_slave_if = svt_apb_if.slave_if[55];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_56
      56 : get_slave_if = svt_apb_if.slave_if[56];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_57
      57 : get_slave_if = svt_apb_if.slave_if[57];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_58
      58 : get_slave_if = svt_apb_if.slave_if[58];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_59
      59 : get_slave_if = svt_apb_if.slave_if[59];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_60
      60 : get_slave_if = svt_apb_if.slave_if[60];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_61
      61 : get_slave_if = svt_apb_if.slave_if[61];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_62
      62 : get_slave_if = svt_apb_if.slave_if[62];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_63
      63 : get_slave_if = svt_apb_if.slave_if[63];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_64
      64 : get_slave_if = svt_apb_if.slave_if[64];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_65
      65 : get_slave_if = svt_apb_if.slave_if[65];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_66
      66 : get_slave_if = svt_apb_if.slave_if[66];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_67
      67 : get_slave_if = svt_apb_if.slave_if[67];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_68
      68 : get_slave_if = svt_apb_if.slave_if[68];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_69
      69 : get_slave_if = svt_apb_if.slave_if[69];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_70
      70 : get_slave_if = svt_apb_if.slave_if[70];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_71
      71 : get_slave_if = svt_apb_if.slave_if[71];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_72
      72 : get_slave_if = svt_apb_if.slave_if[72];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_73
      73 : get_slave_if = svt_apb_if.slave_if[73];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_74
      74 : get_slave_if = svt_apb_if.slave_if[74];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_75
      75 : get_slave_if = svt_apb_if.slave_if[75];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_76
      76 : get_slave_if = svt_apb_if.slave_if[76];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_77
      77 : get_slave_if = svt_apb_if.slave_if[77];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_78
      78 : get_slave_if = svt_apb_if.slave_if[78];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_79
      79 : get_slave_if = svt_apb_if.slave_if[79];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_80
      80 : get_slave_if = svt_apb_if.slave_if[80];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_81
      81 : get_slave_if = svt_apb_if.slave_if[81];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_82
      82 : get_slave_if = svt_apb_if.slave_if[82];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_83
      83 : get_slave_if = svt_apb_if.slave_if[83];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_84
      84 : get_slave_if = svt_apb_if.slave_if[84];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_85
      85 : get_slave_if = svt_apb_if.slave_if[85];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_86
      86 : get_slave_if = svt_apb_if.slave_if[86];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_87
      87 : get_slave_if = svt_apb_if.slave_if[87];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_88
      88 : get_slave_if = svt_apb_if.slave_if[88];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_89
      89 : get_slave_if = svt_apb_if.slave_if[89];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_90
      90 : get_slave_if = svt_apb_if.slave_if[90];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_91
      91 : get_slave_if = svt_apb_if.slave_if[91];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_92
      92 : get_slave_if = svt_apb_if.slave_if[92];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_93
      93 : get_slave_if = svt_apb_if.slave_if[93];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_94
      94 : get_slave_if = svt_apb_if.slave_if[94];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_95
      95 : get_slave_if = svt_apb_if.slave_if[95];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_96
      96 : get_slave_if = svt_apb_if.slave_if[96];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_97
      97 : get_slave_if = svt_apb_if.slave_if[97];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_98
      98 : get_slave_if = svt_apb_if.slave_if[98];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_99
      99 : get_slave_if = svt_apb_if.slave_if[99];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_100
      100 : get_slave_if = svt_apb_if.slave_if[100];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_101
      101 : get_slave_if = svt_apb_if.slave_if[101];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_102
      102 : get_slave_if = svt_apb_if.slave_if[102];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_103
      103 : get_slave_if = svt_apb_if.slave_if[103];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_104
      104 : get_slave_if = svt_apb_if.slave_if[104];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_105
      105 : get_slave_if = svt_apb_if.slave_if[105];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_106
      106 : get_slave_if = svt_apb_if.slave_if[106];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_107
      107 : get_slave_if = svt_apb_if.slave_if[107];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_108
      108 : get_slave_if = svt_apb_if.slave_if[108];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_109
      109 : get_slave_if = svt_apb_if.slave_if[109];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_110
      110 : get_slave_if = svt_apb_if.slave_if[110];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_111
      111 : get_slave_if = svt_apb_if.slave_if[111];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_112
      112 : get_slave_if = svt_apb_if.slave_if[112];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_113
      113 : get_slave_if = svt_apb_if.slave_if[113];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_114
      114 : get_slave_if = svt_apb_if.slave_if[114];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_115
      115 : get_slave_if = svt_apb_if.slave_if[115];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_116
      116 : get_slave_if = svt_apb_if.slave_if[116];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_117
      117 : get_slave_if = svt_apb_if.slave_if[117];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_118
      118 : get_slave_if = svt_apb_if.slave_if[118];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_119
      119 : get_slave_if = svt_apb_if.slave_if[119];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_120
      120 : get_slave_if = svt_apb_if.slave_if[120];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_121
      121 : get_slave_if = svt_apb_if.slave_if[121];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_122
      122 : get_slave_if = svt_apb_if.slave_if[122];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_123
      123 : get_slave_if = svt_apb_if.slave_if[123];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_124
      124 : get_slave_if = svt_apb_if.slave_if[124];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_125
      125 : get_slave_if = svt_apb_if.slave_if[125];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_126
      126 : get_slave_if = svt_apb_if.slave_if[126];
`endif
`ifdef SVT_APB_VALID_SLAVE_IDX_127
      127 : get_slave_if = svt_apb_if.slave_if[127];
`endif
      default: begin
        $display("svt_apb_if::get_slave_if(): Slave index %0d not supported.", idx);
        $finish;
      end
    endcase
  endfunction

`ifndef SVT_AMBA_INTERFACE_METHOD_DISABLE
`ifndef __SVDOC__
//-----------------------------------------------------------------------
// Connect the slave sub-interfaces to the top level interface
//-----------------------------------------------------------------------
`ifndef SVT_APB_DISCONNECT_TOP_LEVEL_APB_IF_SIGNALS
`ifdef SVT_APB_VALID_SLAVE_IDX_0
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(0)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_1
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(1)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_2
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(2)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_3
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(3)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_4
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(4)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_5
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(5)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_6
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(6)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_7
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(7)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_8
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(8)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_9
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(9)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_10
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(10)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_11
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(11)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_12
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(12)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_13
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(13)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_14
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(14)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_15
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(15)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_16
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(16)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_17
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(17)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_18
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(18)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_19
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(19)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_20
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(20)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_21
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(21)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_22
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(22)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_23
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(23)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_24
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(24)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_25
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(25)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_26
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(26)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_27
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(27)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_28
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(28)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_29
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(29)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_30
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(30)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_31
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(31)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_32
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(32)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_33
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(33)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_34
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(34)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_35
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(35)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_36
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(36)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_37
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(37)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_38
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(38)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_39
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(39)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_40
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(40)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_41
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(41)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_42
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(42)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_43
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(43)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_44
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(44)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_45
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(45)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_46
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(46)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_47
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(47)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_48
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(48)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_49
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(49)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_50
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(50)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_51
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(51)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_52
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(52)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_53
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(53)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_54
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(54)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_55
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(55)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_56
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(56)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_57
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(57)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_58
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(58)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_59
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(59)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_60
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(60)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_61
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(61)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_62
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(62)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_63
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(63)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_64
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(64)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_65
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(65)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_66
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(66)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_67
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(67)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_68
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(68)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_69
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(69)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_70
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(70)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_71
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(71)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_72
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(72)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_73
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(73)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_74
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(74)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_75
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(75)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_76
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(76)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_77
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(77)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_78
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(78)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_79
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(79)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_80
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(80)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_81
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(81)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_82
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(82)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_83
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(83)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_84
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(84)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_85
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(85)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_86
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(86)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_87
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(87)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_88
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(88)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_89
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(89)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_90
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(90)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_91
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(91)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_92
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(92)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_93
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(93)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_94
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(94)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_95
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(95)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_96
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(96)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_97
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(97)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_98
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(98)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_99
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(99)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_100
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(100)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_101
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(101)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_102
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(102)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_103
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(103)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_104
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(104)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_105
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(105)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_106
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(106)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_107
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(107)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_108
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(108)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_109
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(109)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_110
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(110)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_111
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(111)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_112
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(112)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_113
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(113)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_114
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(114)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_115
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(115)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_116
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(116)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_117
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(117)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_118
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(118)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_119
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(119)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_120
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(120)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_121
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(121)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_122
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(122)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_123
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(123)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_124
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(124)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_125
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(125)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_126
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(126)
`endif

`ifdef SVT_APB_VALID_SLAVE_IDX_127
  `CONNECT_TOP_LEVEL_APB_IF_SIGNALS(127)
`endif
`endif

`endif //__SVDOC__
`endif

/**support for signal logging. */
`SVT_IF_UTIL_SUPPORT_SIGNAL_LOGGING(1)

endinterface

`endif // GUARD_SVT_APB_IF_SVI

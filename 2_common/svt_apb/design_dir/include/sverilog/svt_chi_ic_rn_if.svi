//=======================================================================
// COPYRIGHT (C) 2013 SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//
//-----------------------------------------------------------------------

`ifndef GUARD_SVT_CHI_IC_RN_IF_SVI
`define GUARD_SVT_CHI_IC_RN_IF_SVI

`include "svt_chi_port_defines.svi"

/**
    @grouphdr Interfaces svt_chi_ic_rn_if CHI IC Request Node interface. This is a sub-interface of svt_chi_if.
 */

/**
 * @groupname svt_chi_ic_rn_if
 * <b>General description:</b><p>
 * The RN interface svt_chi_ic_rn_if defines the CHI signals appropriate for an
 * interconnect node that connects to a  fully coherent Request Node, along
 * with the modports needed for the CHI Interconnect and monitor VIP. IC RN
 * interface is a sub-interface to the top level interface svt_chi_if.
 *
 * <b>Clock signal description:</b><br>
 * Clock signal is obtained in this IC RN interface through interface port list.
 * User provides this signal from the testbench to the top level interface
 * svt_chi_if through interface port list. The top level interface then passes
 * this signal down to the RN sub-interface.
 *
 * <b>Debug port description:</b><br>
 * - The CHI VIP drives the object number of the transaction corresponding to a flit on the debug ports.
 * - The CHI VIP drives the current l-credit count corresponding to each virtual channel on the debug ports.
 *   - #curr_snp_lcrd_count : 
 *     - Current TX SNP VC l-credit count, will be driven whenever there is a change in TX SNP VC l-credit count
 *     - On power up or reset will be driven to default l-credit count value zero 
 *     .
 *   - #curr_txrsp_lcrd_count : 
 *     - Current TX RSP VC l-credit count, will be driven whenever there is a change in TX RSP VC l-credit count
 *     - On power up or reset will be driven to default l-credit count value zero
 *     .
 *   - #curr_txdat_lcrd_count : 
 *     - Current TX DAT VC l-credit count, will be driven whenever there is a change in TX DAT VC l-credit count
 *     - On power up or reset will be driven to default l-credit count value zero
 *     .
 *   - #curr_req_lcrd_count : 
 *     - Current RX REQ VC l-credit count, will be driven whenever there is a change in RX REQ VC l-credit count
 *     - On power up or reset will be driven to default l-credit count value svt_chi_node_configuration::rx_req_vc_flit_buffer_size
 *     .
 *   - #curr_rxrsp_lcrd_count : 
 *     - Current RX RSP VC l-credit count, will be driven whenever there is a change in RX RSP VC l-credit count
 *     - On power up or reset will be driven to default l-credit count value svt_chi_node_configuration::rx_rsp_vc_flit_buffer_size
 *     .
 *   - #curr_rxdat_lcrd_count : 
 *     - Current RX DAT VC l-credit count, will be driven whenever there is a change in RX DAT VC l-credit count
 *     - On power up or reset will be driven to default l-credit count value svt_chi_node_configuration::rx_dat_vc_flit_buffer_size
 *     .
 *   . 
 * .
 *
 * <b>CHI signal description:</b><br>
 * This sub-interface supports signals for the CHI protocol. The names of the
 * signals match the names specified in the CHI specification. Please refer to
 * the CHI specification for specific description of any of the signals.
 */
interface svt_chi_ic_rn_if (input logic clk, input logic resetn);

  bit is_active;

  //-----------------------------------------------------------------------
  // Link Activation Status Signals
  //-----------------------------------------------------------------------
  logic RXSACTIVE;
  logic TXSACTIVE;

  //-----------------------------------------------------------------------
  // Link Activation Status Signals
  //-----------------------------------------------------------------------
  logic RXLINKACTIVEREQ;
  logic RXLINKACTIVEACK;
  logic TXLINKACTIVEREQ;
  logic TXLINKACTIVEACK;

  `ifdef SVT_CHI_ISSUE_B_ENABLE
  //-----------------------------------------------------------------------
  // System Coherency Interface Signals
  //-----------------------------------------------------------------------
  logic SYSCOREQ;
  logic SYSCOACK;
  `endif

  //-----------------------------------------------------------------------
  // RX Request Virtual Channel
  //-----------------------------------------------------------------------
  logic RXREQFLITPEND;
  logic RXREQFLITV;
  logic [`SVT_CHI_MAX_REQ_FLIT_WIDTH-1:0] RXREQFLIT;
  logic RXREQLCRDV;

  //-----------------------------------------------------------------------
  // RX Response Virtual Channel
  //-----------------------------------------------------------------------
  logic TXRSPFLITPEND;
  logic TXRSPFLITV;
  logic [`SVT_CHI_MAX_RSP_FLIT_WIDTH-1:0] TXRSPFLIT;
  logic TXRSPLCRDV;

  //-----------------------------------------------------------------------
  // TX Dat Virtual Channel
  //-----------------------------------------------------------------------
  logic TXDATFLITPEND;
  logic TXDATFLITV;
  logic [`SVT_CHI_MAX_DAT_FLIT_WIDTH-1:0] TXDATFLIT;
  logic TXDATLCRDV;

  //-----------------------------------------------------------------------
  // TX Snoop Virtual Channel
  //-----------------------------------------------------------------------
  logic TXSNPFLITPEND;
  logic TXSNPFLITV;
  logic [`SVT_CHI_MAX_SNP_FLIT_WIDTH-1:0] TXSNPFLIT;
  logic TXSNPLCRDV;

  //-----------------------------------------------------------------------
  // RX Response Virtual Channel
  //-----------------------------------------------------------------------
  logic RXRSPFLITPEND;
  logic RXRSPFLITV;
  logic [`SVT_CHI_MAX_RSP_FLIT_WIDTH-1:0] RXRSPFLIT;
  logic RXRSPLCRDV;

  //-----------------------------------------------------------------------
  // RX Dat Virtual Channel
  //-----------------------------------------------------------------------
  logic RXDATFLITPEND;
  logic RXDATFLITV;
  logic [`SVT_CHI_MAX_DAT_FLIT_WIDTH-1:0] RXDATFLIT;
  logic RXDATLCRDV;
  
`ifdef SVT_CHI_ISSUE_D_ENABLE
  `ifdef SVT_CHI_INTERFACE_PARITY_ENABLE
  //-----------------------------------------------------------------------
  //Check signals for Link Activation Status Signals
  //-----------------------------------------------------------------------
  logic RXSACTIVECHK;
  logic TXSACTIVECHK;

  //-----------------------------------------------------------------------
  //Check signals for Link Activation Status Signals
  //-----------------------------------------------------------------------
  logic RXLINKACTIVEREQCHK;
  logic RXLINKACTIVEACKCHK;
  logic TXLINKACTIVEREQCHK;
  logic TXLINKACTIVEACKCHK;

  //-----------------------------------------------------------------------
  // Check signals for System Coherency Interface Signals
  //-----------------------------------------------------------------------
  logic SYSCOREQCHK;
  logic SYSCOACKCHK;

  //-----------------------------------------------------------------------
  //Check signals for RX Request Virtual Channel
  //-----------------------------------------------------------------------
  logic RXREQFLITPENDCHK;
  logic RXREQFLITVCHK;
  logic [`SVT_CHI_IF_PARITY_REQ_FLIT_CHK_WIDTH -1:0] RXREQFLITCHK;
  logic RXREQLCRDVCHK;

  //-----------------------------------------------------------------------
  // Check signals for TX Response Virtual Channel
  //-----------------------------------------------------------------------
  logic TXRSPFLITPENDCHK;
  logic TXRSPFLITVCHK;
  logic [`SVT_CHI_IF_PARITY_RSP_FLIT_CHK_WIDTH -1:0] TXRSPFLITCHK;
  logic TXRSPLCRDVCHK;

  //-----------------------------------------------------------------------
  //Check signals for  TX Dat Virtual Channel
  //-----------------------------------------------------------------------
  logic TXDATFLITPENDCHK;
  logic TXDATFLITVCHK;
  logic [`SVT_CHI_IF_PARITY_DAT_FLIT_CHK_WIDTH -1:0] TXDATFLITCHK;
  logic TXDATLCRDVCHK;

  //-----------------------------------------------------------------------
  //Check signals for TX Snoop Virtual Channel
  //-----------------------------------------------------------------------
  logic TXSNPFLITPENDCHK;
  logic TXSNPFLITVCHK;
  logic [`SVT_CHI_IF_PARITY_SNP_FLIT_CHK_WIDTH -1:0] TXSNPFLITCHK;
  logic TXSNPLCRDVCHK;

  //-----------------------------------------------------------------------
  //Check signals for RX Response Virtual Channel
  //-----------------------------------------------------------------------
  logic RXRSPFLITPENDCHK;
  logic RXRSPFLITVCHK;
  logic [`SVT_CHI_IF_PARITY_RSP_FLIT_CHK_WIDTH -1:0] RXRSPFLITCHK;
  logic RXRSPLCRDVCHK;

  //-----------------------------------------------------------------------
  //Check signals for RX Dat Virtual Channel
  //-----------------------------------------------------------------------
  logic RXDATFLITPENDCHK;
  logic RXDATFLITVCHK;
  logic [`SVT_CHI_IF_PARITY_DAT_FLIT_CHK_WIDTH -1:0] RXDATFLITCHK;
  logic RXDATLCRDVCHK;

  `endif
`endif
  //-----------------------------------------------------------------------
  // Debug Port Signals 
  //-----------------------------------------------------------------------
  /** Object number of the transaction currently observed on REQ VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] req_obj_num;

  /** Object number of the transaction currently observed on RX RSP VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] rx_rsp_obj_num;

  /** Object number of the transaction currently observed on RX DAT VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] rx_dat_obj_num;

  /** Object number of the transaction currently observed on TX RSP VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] tx_rsp_obj_num;

  /** Object number of the transaction currently observed on TX DAT VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] tx_dat_obj_num;

  /** Object number of the transaction currently observed on SNP VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] snp_req_obj_num;

  /** Object number of the transaction currently observed on TX DAT VC, if
    * it corresponds to a snoop transaction */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] snp_dat_obj_num;

  /** Object number of the transaction currently observed on TX RSP VC, if
    * it corresponds to a snoop transaction */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] snp_rsp_obj_num;

  /** Current L-credit count observed on TX SNP VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] curr_snp_lcrd_count;

  /** Current L-credit count observed on TX RSP VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] curr_txrsp_lcrd_count;

  /** Current L-credit count observed on TX DAT VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] curr_txdat_lcrd_count;

  /** Current L-credit count observed on RX REQ VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] curr_req_lcrd_count;

  /** Current L-credit count observed on RX RSP VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] curr_rxrsp_lcrd_count;

  /** Current L-credit count observed on RX DAT VC */
  logic[(`SVT_CHI_DEBUG_PORT_WIDTH-1):0] curr_rxdat_lcrd_count;



  // Clocking blocks
  //-----------------------------------------------------------------------
  /**
   * Clocking block that defines VIP CHI RN Interface signal synchronization
   * and directionality.
   */
  clocking sn_cb @(posedge clk);
    default input #`SVT_CHI_RN_IF_SETUP_TIME output #`SVT_CHI_RN_IF_HOLD_TIME;

    // Link Activation Status Signals
    input RXSACTIVE;
    output TXSACTIVE;

    // Link Activation Status Signals
    input RXLINKACTIVEREQ;
    output RXLINKACTIVEACK;
    output TXLINKACTIVEREQ;
    input TXLINKACTIVEACK;

    `ifdef SVT_CHI_ISSUE_B_ENABLE
    // System Coherency Interface Signals
    input  SYSCOREQ;
    output SYSCOACK;
    `endif

    // RX Request Virtual Channel
    input RXREQFLITPEND;
    input RXREQFLITV;
    input RXREQFLIT;
    output  RXREQLCRDV;

    // TX Response Virtual Channel
    output  TXRSPFLITPEND;
    output  TXRSPFLITV;
    output  TXRSPFLIT;
    input TXRSPLCRDV;

    // TX Dat Virtual Channel
    output  TXDATFLITPEND;
    output  TXDATFLITV;
    output  TXDATFLIT;
    input TXDATLCRDV;

    // TX Snoop Virtual Channel
    output  TXSNPFLITPEND;
    output  TXSNPFLITV;
    output  TXSNPFLIT;
    input TXSNPLCRDV;

    // RX Response Virtual Channel
    input RXRSPFLITPEND;
    input RXRSPFLITV;
    input RXRSPFLIT;
    output  RXRSPLCRDV;

    // RX Dat Virtual Channel
    input RXDATFLITPEND;
    input RXDATFLITV;
    input RXDATFLIT;
    output  RXDATLCRDV;

  `ifdef SVT_CHI_ISSUE_D_ENABLE
    `ifdef SVT_CHI_INTERFACE_PARITY_ENABLE
    
    //Check signals for Link Activation Status Signals
    input RXSACTIVECHK;
    output TXSACTIVECHK;

    //Check signals for Link Activation Status Signals
    input RXLINKACTIVEREQCHK;
    output RXLINKACTIVEACKCHK;
    output TXLINKACTIVEREQCHK;
    input TXLINKACTIVEACKCHK;

    //Check signals for System Coherency Interface Signals
    input  SYSCOREQCHK;
    output SYSCOACKCHK;

    //Check signals for RX Request Virtual Channel
    input RXREQFLITPENDCHK;
    input RXREQFLITVCHK;
    input RXREQFLITCHK;
    output  RXREQLCRDVCHK;

    //Check signals for TX Response Virtual Channel
    output  TXRSPFLITPENDCHK;
    output  TXRSPFLITVCHK;
    output  TXRSPFLITCHK;
    input TXRSPLCRDVCHK;

    //Check signals for TX Dat Virtual Channel
    output  TXDATFLITPENDCHK;
    output  TXDATFLITVCHK;
    output  TXDATFLITCHK;
    input TXDATLCRDVCHK;

    //Check signals for TX Snoop Virtual Channel
    output  TXSNPFLITPENDCHK;
    output  TXSNPFLITVCHK;
    output  TXSNPFLITCHK;
    input TXSNPLCRDVCHK;

    //Check signals for RX Response Virtual Channel
    input RXRSPFLITPENDCHK;
    input RXRSPFLITVCHK;
    input RXRSPFLITCHK;
    output  RXRSPLCRDVCHK;

    //Check signals for RX Dat Virtual Channel
    input RXDATFLITPENDCHK;
    input RXDATFLITVCHK;
    input RXDATFLITCHK;
    output  RXDATLCRDVCHK;
    `endif
   `endif
  endclocking: sn_cb 

  //-----------------------------------------------------------------------
  /**
   * Clocking block that defines VIP CHI RN Monitor Interface signal synchronization
   * and directionality.
   */
  clocking monitor_cb @(posedge clk);
    default input #`SVT_CHI_RN_IF_SETUP_TIME output #`SVT_CHI_RN_IF_HOLD_TIME;

    // Link Activation Status Signals
    input  TXSACTIVE;
    input  RXSACTIVE;

    // Link Activation Status Signals
    input  TXLINKACTIVEREQ;
    input  TXLINKACTIVEACK;
    input  RXLINKACTIVEREQ;
    input  RXLINKACTIVEACK;

    `ifdef SVT_CHI_ISSUE_B_ENABLE
    // System Coherency Interface Signals
    input  SYSCOREQ;
    input  SYSCOACK;
    `endif

    // RX Request Virtual Channel
    input  RXREQFLITPEND;
    input  RXREQFLITV;
    input  RXREQFLIT;
    input  RXREQLCRDV;

    // TX Response Virtual Channel
    input  TXRSPFLITPEND;
    input  TXRSPFLITV;
    input  TXRSPFLIT;
    input  TXRSPLCRDV;

    // TX Dat Virtual Channel
    input  TXDATFLITPEND;
    input  TXDATFLITV;
    input  TXDATFLIT;
    input  TXDATLCRDV;

    // TX Snoop Virtual Channel
    input  TXSNPFLITPEND;
    input  TXSNPFLITV;
    input  TXSNPFLIT;
    input  TXSNPLCRDV;

    // RX Response Virtual Channel
    input  RXRSPFLITPEND;
    input  RXRSPFLITV;
    input  RXRSPFLIT;
    input  RXRSPLCRDV;

    // RX Dat Virtual Channel
    input  RXDATFLITPEND;
    input  RXDATFLITV;
    input  RXDATFLIT;
    input  RXDATLCRDV;

  `ifdef SVT_CHI_ISSUE_D_ENABLE
    `ifdef SVT_CHI_INTERFACE_PARITY_ENABLE
    // Check signals for Link Activation Status Signals
    input  TXSACTIVECHK;
    input  RXSACTIVECHK;

    // Check signals for Link Activation Status Signals
    input  TXLINKACTIVEREQCHK;
    input  TXLINKACTIVEACKCHK;
    input  RXLINKACTIVEREQCHK;
    input  RXLINKACTIVEACKCHK;

    //Check signals for System Coherency Interface Signals
    input  SYSCOREQCHK;
    input  SYSCOACKCHK;

    //Check signals for RX Request Virtual Channel
    input  RXREQFLITPENDCHK;
    input  RXREQFLITVCHK;
    input  RXREQFLITCHK;
    input  RXREQLCRDVCHK;

    //Check signals for TX Response Virtual Channel
    input  TXRSPFLITPENDCHK;
    input  TXRSPFLITVCHK;
    input  TXRSPFLITCHK;
    input  TXRSPLCRDVCHK;

    //Check signals for TX Dat Virtual Channel
    input  TXDATFLITPENDCHK;
    input  TXDATFLITVCHK;
    input  TXDATFLITCHK;
    input  TXDATLCRDVCHK;

    //Check signals for TX Snoop Virtual Channel
    input  TXSNPFLITPENDCHK;
    input  TXSNPFLITVCHK;
    input  TXSNPFLITCHK;
    input  TXSNPLCRDVCHK;

    //Check signals for RX Response Virtual Channel
    input  RXRSPFLITPENDCHK;
    input  RXRSPFLITVCHK;
    input  RXRSPFLITCHK;
    input  RXRSPLCRDVCHK;

    //Check signals for RX Dat Virtual Channel
    input  RXDATFLITPENDCHK;
    input  RXDATFLITVCHK;
    input  RXDATFLITCHK;
    input  RXDATLCRDVCHK;
    `endif
  `endif
  endclocking: monitor_cb

  //-----------------------------------------------------------------------

  //------------------------------------------------------------------------
  /** Modport used to connect the VIP HN to CHI interface signals. */
  modport ic_rn_modport (clocking sn_cb, input resetn);
  
  //-----------------------------------------------------------------------
  /** Modport used to connect the VIP Monitor to CHI interface signals. */
  modport monitor_modport (clocking monitor_cb, input resetn);

  //-----------------------------------------------------------------------
  /** Debug Modport */
  modport debug_modport(output req_obj_num,
                        output rx_rsp_obj_num,
                        output rx_dat_obj_num,
                        output tx_rsp_obj_num,
                        output tx_dat_obj_num,
                        output snp_req_obj_num,
                        output snp_dat_obj_num,
                        output snp_rsp_obj_num,
                        output curr_req_lcrd_count,
                        output curr_txrsp_lcrd_count,
                        output curr_txdat_lcrd_count,
                        output curr_snp_lcrd_count,
                        output curr_rxrsp_lcrd_count,
                        output curr_rxdat_lcrd_count
          );

  /**support for signal logging. */
`SVT_IF_UTIL_SUPPORT_SIGNAL_LOGGING(1)
endinterface: svt_chi_ic_rn_if

`endif // GUARD_SVT_CHI_IC_RN_IF_SVI
